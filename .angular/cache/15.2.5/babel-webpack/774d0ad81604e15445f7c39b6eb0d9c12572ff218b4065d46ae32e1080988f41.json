{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { MustMatch } from '@app/_helpers';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@app/_services\";\nimport * as i4 from \"@angular/common\";\nfunction ResetPasswordComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Validating token... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Token validation failed, if the token has expired you can get a new one at the \");\n    i0.ɵɵelementStart(2, \"a\", 4);\n    i0.ɵɵtext(3, \"forgot password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \" page. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_form_5_div_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_form_5_div_5_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Password must be at least 6 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_form_5_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtemplate(1, ResetPasswordComponent_form_5_div_5_div_1_Template, 2, 0, \"div\", 2);\n    i0.ɵɵtemplate(2, ResetPasswordComponent_form_5_div_5_div_2_Template, 2, 0, \"div\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.f.password.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.f.password.errors.minlength);\n  }\n}\nfunction ResetPasswordComponent_form_5_div_10_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Confirm Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_form_5_div_10_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Passwords must match\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_form_5_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtemplate(1, ResetPasswordComponent_form_5_div_10_div_1_Template, 2, 0, \"div\", 2);\n    i0.ɵɵtemplate(2, ResetPasswordComponent_form_5_div_10_div_2_Template, 2, 0, \"div\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.f.confirmPassword.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.f.confirmPassword.errors.mustMatch);\n  }\n}\nfunction ResetPasswordComponent_form_5_span_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 15);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nfunction ResetPasswordComponent_form_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 5);\n    i0.ɵɵlistener(\"ngSubmit\", function ResetPasswordComponent_form_5_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onSubmit());\n    });\n    i0.ɵɵelementStart(1, \"div\", 6)(2, \"label\", 7);\n    i0.ɵɵtext(3, \"Password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 8);\n    i0.ɵɵtemplate(5, ResetPasswordComponent_form_5_div_5_Template, 3, 2, \"div\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 6)(7, \"label\", 7);\n    i0.ɵɵtext(8, \"Confirm Password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(9, \"input\", 10);\n    i0.ɵɵtemplate(10, ResetPasswordComponent_form_5_div_10_Template, 3, 2, \"div\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 6)(12, \"button\", 11);\n    i0.ɵɵtemplate(13, ResetPasswordComponent_form_5_span_13_Template, 1, 0, \"span\", 12);\n    i0.ɵɵtext(14, \" Reset Password \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"a\", 13);\n    i0.ɵɵtext(16, \"Cancel\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r2.form);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c0, ctx_r2.submitted && ctx_r2.f.password.errors));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.submitted && ctx_r2.f.password.errors);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx_r2.submitted && ctx_r2.f.confirmPassword.errors));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.submitted && ctx_r2.f.confirmPassword.errors);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.loading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.loading);\n  }\n}\nvar TokenStatus;\n(function (TokenStatus) {\n  TokenStatus[TokenStatus[\"Validating\"] = 0] = \"Validating\";\n  TokenStatus[TokenStatus[\"Valid\"] = 1] = \"Valid\";\n  TokenStatus[TokenStatus[\"Invalid\"] = 2] = \"Invalid\";\n})(TokenStatus || (TokenStatus = {}));\nexport class ResetPasswordComponent {\n  constructor(formBuilder, route, router, accountService, alertService) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.accountService = accountService;\n    this.alertService = alertService;\n    this.TokenStatus = TokenStatus;\n    this.tokenStatus = TokenStatus.Validating;\n    this.loading = false;\n    this.submitted = false;\n  }\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', Validators.required]\n    }, {\n      validator: MustMatch('password', 'confirmPassword')\n    });\n    const token = this.route.snapshot.queryParams['token'];\n    // remove token from url to prevent http referer leakage\n    this.router.navigate([], {\n      relativeTo: this.route,\n      replaceUrl: true\n    });\n    this.accountService.validateResetToken(token).pipe(first()).subscribe({\n      next: () => {\n        this.token = token;\n        this.tokenStatus = TokenStatus.Valid;\n      },\n      error: () => {\n        this.tokenStatus = TokenStatus.Invalid;\n      }\n    });\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.form.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    // reset alerts on submit\n    this.alertService.clear();\n    // stop here if form is invalid\n    if (this.form.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.accountService.resetPassword(this.token, this.f.password.value, this.f.confirmPassword.value).pipe(first()).subscribe({\n      next: () => {\n        this.alertService.success('Password reset successful, you can now login', {\n          keepAfterRouteChange: true\n        });\n        this.router.navigate(['../login'], {\n          relativeTo: this.route\n        });\n      },\n      error: error => {\n        this.alertService.error(error);\n        this.loading = false;\n      }\n    });\n  }\n}\nResetPasswordComponent.ɵfac = function ResetPasswordComponent_Factory(t) {\n  return new (t || ResetPasswordComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AccountService), i0.ɵɵdirectiveInject(i3.AlertService));\n};\nResetPasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ResetPasswordComponent,\n  selectors: [[\"ng-component\"]],\n  decls: 6,\n  vars: 3,\n  consts: [[1, \"card-header\"], [1, \"card-body\"], [4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [\"routerLink\", \"../forgot-password\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [1, \"form-label\"], [\"type\", \"password\", \"formControlName\", \"password\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"type\", \"password\", \"formControlName\", \"confirmPassword\", 1, \"form-control\", 3, \"ngClass\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-1\", 4, \"ngIf\"], [\"routerLink\", \"../login\", 1, \"btn\", \"btn-link\"], [1, \"invalid-feedback\"], [1, \"spinner-border\", \"spinner-border-sm\", \"me-1\"]],\n  template: function ResetPasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h3\", 0);\n      i0.ɵɵtext(1, \"Reset Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\", 1);\n      i0.ɵɵtemplate(3, ResetPasswordComponent_div_3_Template, 2, 0, \"div\", 2);\n      i0.ɵɵtemplate(4, ResetPasswordComponent_div_4_Template, 5, 0, \"div\", 2);\n      i0.ɵɵtemplate(5, ResetPasswordComponent_form_5_Template, 17, 11, \"form\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.tokenStatus == ctx.TokenStatus.Validating);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.tokenStatus == ctx.TokenStatus.Invalid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.tokenStatus == ctx.TokenStatus.Valid);\n    }\n  },\n  dependencies: [i4.NgClass, i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i2.RouterLink],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","first","MustMatch","i0","TokenStatus","ResetPasswordComponent","constructor","formBuilder","route","router","accountService","alertService","Validating","ngOnInit","form","group","password","required","minLength","confirmPassword","validator","token","snapshot","queryParams","navigate","relativeTo","replaceUrl","validateResetToken","pipe","subscribe","next","tokenStatus","Valid","error","Invalid","f","controls","onSubmit","submitted","clear","invalid","loading","resetPassword","value","success","keepAfterRouteChange","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["D:\\boilerplates\\angularfrontend-main\\src\\app\\account\\reset-password.component.ts","D:\\boilerplates\\angularfrontend-main\\src\\app\\account\\reset-password.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { AccountService, AlertService } from '@app/_services';\nimport { MustMatch } from '@app/_helpers';\n\nenum TokenStatus {\n    Validating,\n    Valid,\n    Invalid\n}\n\n@Component({ templateUrl: 'reset-password.component.html' })\nexport class ResetPasswordComponent implements OnInit {\n    TokenStatus = TokenStatus;\n    tokenStatus = TokenStatus.Validating;\n    token?: string;\n    form!: FormGroup;\n    loading = false;\n    submitted = false;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private accountService: AccountService,\n        private alertService: AlertService\n    ) { }\n\n    ngOnInit() {\n        this.form = this.formBuilder.group({\n            password: ['', [Validators.required, Validators.minLength(6)]],\n            confirmPassword: ['', Validators.required],\n        }, {\n            validator: MustMatch('password', 'confirmPassword')\n        });\n\n        const token = this.route.snapshot.queryParams['token'];\n\n        // remove token from url to prevent http referer leakage\n        this.router.navigate([], { relativeTo: this.route, replaceUrl: true });\n\n        this.accountService.validateResetToken(token)\n            .pipe(first())\n            .subscribe({\n                next: () => {\n                    this.token = token;\n                    this.tokenStatus = TokenStatus.Valid;\n                },\n                error: () => {\n                    this.tokenStatus = TokenStatus.Invalid;\n                }\n            });\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.form.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // reset alerts on submit\n        this.alertService.clear();\n\n        // stop here if form is invalid\n        if (this.form.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.accountService.resetPassword(this.token!, this.f.password.value, this.f.confirmPassword.value)\n            .pipe(first())\n            .subscribe({\n                next: () => {\n                    this.alertService.success('Password reset successful, you can now login', { keepAfterRouteChange: true });\n                    this.router.navigate(['../login'], { relativeTo: this.route });\n                },\n                error: error => {\n                    this.alertService.error(error);\n                    this.loading = false;\n                }\n            });\n    }\n}","<h3 class=\"card-header\">Reset Password</h3>\n<div class=\"card-body\">\n    <div *ngIf=\"tokenStatus == TokenStatus.Validating\">\n        Validating token...\n    </div>\n    <div *ngIf=\"tokenStatus == TokenStatus.Invalid\">\n        Token validation failed, if the token has expired you can get a new one at the <a routerLink=\"../forgot-password\">forgot password</a> page.\n    </div>\n    <form *ngIf=\"tokenStatus == TokenStatus.Valid\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"mb-3\">\n            <label class=\"form-label\">Password</label>\n            <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n            <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                <div *ngIf=\"f.password.errors.minlength\">Password must be at least 6 characters</div>\n            </div>\n        </div>\n        <div class=\"mb-3\">\n            <label class=\"form-label\">Confirm Password</label>\n            <input type=\"password\" formControlName=\"confirmPassword\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.confirmPassword.errors }\" />\n            <div *ngIf=\"submitted && f.confirmPassword.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.confirmPassword.errors.required\">Confirm Password is required</div>\n                <div *ngIf=\"f.confirmPassword.errors.mustMatch\">Passwords must match</div>\n            </div>\n        </div>\n        <div class=\"mb-3\">\n            <button [disabled]=\"loading\" class=\"btn btn-primary\">\n                <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm me-1\"></span>\n                Reset Password\n            </button>\n            <a routerLink=\"../login\" class=\"btn btn-link\">Cancel</a>\n        </div>\n    </form>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}