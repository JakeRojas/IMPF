{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first, finalize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@app/_services\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/router\";\nfunction ForgotPasswordComponent_div_8_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Email is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ForgotPasswordComponent_div_8_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Email is invalid\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ForgotPasswordComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtemplate(1, ForgotPasswordComponent_div_8_div_1_Template, 2, 0, \"div\", 11);\n    i0.ɵɵtemplate(2, ForgotPasswordComponent_div_8_div_2_Template, 2, 0, \"div\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.f.email.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.f.email.errors.email);\n  }\n}\nfunction ForgotPasswordComponent_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 12);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nexport class ForgotPasswordComponent {\n  constructor(formBuilder, accountService, alertService) {\n    this.formBuilder = formBuilder;\n    this.accountService = accountService;\n    this.alertService = alertService;\n    this.loading = false;\n    this.submitted = false;\n  }\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]]\n    });\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.form.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    // reset alerts on submit\n    this.alertService.clear();\n    // stop here if form is invalid\n    if (this.form.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.accountService.forgotPassword(this.f.email.value).pipe(first()).pipe(finalize(() => this.loading = false)).subscribe({\n      next: () => this.alertService.success('Please check your email for password reset instructions'),\n      error: error => this.alertService.error(error)\n    });\n  }\n}\nForgotPasswordComponent.ɵfac = function ForgotPasswordComponent_Factory(t) {\n  return new (t || ForgotPasswordComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AccountService), i0.ɵɵdirectiveInject(i2.AlertService));\n};\nForgotPasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ForgotPasswordComponent,\n  selectors: [[\"ng-component\"]],\n  decls: 15,\n  vars: 7,\n  consts: [[1, \"card-header\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [1, \"form-label\"], [\"type\", \"text\", \"formControlName\", \"email\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-1\", 4, \"ngIf\"], [\"routerLink\", \"../login\", 1, \"btn\", \"btn-link\"], [1, \"invalid-feedback\"], [4, \"ngIf\"], [1, \"spinner-border\", \"spinner-border-sm\", \"me-1\"]],\n  template: function ForgotPasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h3\", 0);\n      i0.ɵɵtext(1, \"Forgot Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\", 1)(3, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function ForgotPasswordComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"label\", 4);\n      i0.ɵɵtext(6, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 5);\n      i0.ɵɵtemplate(8, ForgotPasswordComponent_div_8_Template, 3, 2, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 3)(10, \"button\", 7);\n      i0.ɵɵtemplate(11, ForgotPasswordComponent_span_11_Template, 1, 0, \"span\", 8);\n      i0.ɵɵtext(12, \" Submit \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"a\", 9);\n      i0.ɵɵtext(14, \"Cancel\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c0, ctx.submitted && ctx.f.email.errors));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.email.errors);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.loading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.loading);\n    }\n  },\n  dependencies: [i3.NgClass, i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i4.RouterLink],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;AACnE,SAASC,KAAK,EAAEC,QAAQ,QAAQ,gBAAgB;;;;;;;;ICKhCC,2BAAqC;IAAAA,iCAAiB;IAAAA,iBAAM;;;;;IAC5DA,2BAAkC;IAAAA,gCAAgB;IAAAA,iBAAM;;;;;IAF5DA,+BAAkE;IAC9DA,+EAA4D;IAC5DA,+EAAwD;IAC5DA,iBAAM;;;;IAFIA,eAA6B;IAA7BA,qDAA6B;IAC7BA,eAA0B;IAA1BA,kDAA0B;;;;;IAKhCA,2BAA2E;;;;;;;;ADN3F,OAAM,MAAOC,uBAAuB;EAKhCC,YACYC,WAAwB,EACxBC,cAA8B,EAC9BC,YAA0B;IAF1B,gBAAW,GAAXF,WAAW;IACX,mBAAc,GAAdC,cAAc;IACd,iBAAY,GAAZC,YAAY;IANxB,YAAO,GAAG,KAAK;IACf,cAAS,GAAG,KAAK;EAMb;EAEJC,QAAQ;IACJ,IAAI,CAACC,IAAI,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MAC/BC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACZ,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACY,KAAK,CAAC;KACtD,CAAC;EACN;EAEA;EACA,IAAIE,CAAC;IAAK,OAAO,IAAI,CAACJ,IAAI,CAACK,QAAQ;EAAE;EAErCC,QAAQ;IACJ,IAAI,CAACC,SAAS,GAAG,IAAI;IAErB;IACA,IAAI,CAACT,YAAY,CAACU,KAAK,EAAE;IAEzB;IACA,IAAI,IAAI,CAACR,IAAI,CAACS,OAAO,EAAE;MACnB;;IAGJ,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAACb,cAAc,CAACc,cAAc,CAAC,IAAI,CAACP,CAAC,CAACF,KAAK,CAACU,KAAK,CAAC,CACjDC,IAAI,CAACtB,KAAK,EAAE,CAAC,CACbsB,IAAI,CAACrB,QAAQ,CAAC,MAAM,IAAI,CAACkB,OAAO,GAAG,KAAK,CAAC,CAAC,CAC1CI,SAAS,CAAC;MACPC,IAAI,EAAE,MAAM,IAAI,CAACjB,YAAY,CAACkB,OAAO,CAAC,yDAAyD,CAAC;MAChGC,KAAK,EAAEA,KAAK,IAAI,IAAI,CAACnB,YAAY,CAACmB,KAAK,CAACA,KAAK;KAChD,CAAC;EACV;;;mBAvCSvB,uBAAuB;AAAA;;QAAvBA,uBAAuB;EAAAwB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCPpC7B,6BAAwB;MAAAA,+BAAe;MAAAA,iBAAK;MAC5CA,8BAAuB;MACMA;QAAA,OAAY8B,cAAU;MAAA,EAAC;MAC5C9B,8BAAkB;MACYA,qBAAK;MAAAA,iBAAQ;MACvCA,2BAA4H;MAC5HA,wEAGM;MACVA,iBAAM;MACNA,8BAAkB;MAEVA,4EAA2E;MAC3EA,yBACJ;MAAAA,iBAAS;MACTA,6BAA8C;MAAAA,uBAAM;MAAAA,iBAAI;;;MAd1DA,eAAkB;MAAlBA,oCAAkB;MAGgDA,eAAyD;MAAzDA,yFAAyD;MACnHA,eAAiC;MAAjCA,0DAAiC;MAM/BA,eAAoB;MAApBA,sCAAoB;MACjBA,eAAa;MAAbA,kCAAa","names":["Validators","first","finalize","i0","ForgotPasswordComponent","constructor","formBuilder","accountService","alertService","ngOnInit","form","group","email","required","f","controls","onSubmit","submitted","clear","invalid","loading","forgotPassword","value","pipe","subscribe","next","success","error","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\boilerplates\\angularFrontendBoilerplate\\src\\app\\account\\forgot-password.component.ts","D:\\boilerplates\\angularFrontendBoilerplate\\src\\app\\account\\forgot-password.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first, finalize } from 'rxjs/operators';\n\nimport { AccountService, AlertService } from '@app/_services';\n\n@Component({ templateUrl: 'forgot-password.component.html' })\nexport class ForgotPasswordComponent implements OnInit {\n    form!: FormGroup;\n    loading = false;\n    submitted = false;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private accountService: AccountService,\n        private alertService: AlertService\n    ) { }\n\n    ngOnInit() {\n        this.form = this.formBuilder.group({\n            email: ['', [Validators.required, Validators.email]]\n        });\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.form.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // reset alerts on submit\n        this.alertService.clear();\n\n        // stop here if form is invalid\n        if (this.form.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.accountService.forgotPassword(this.f.email.value)\n            .pipe(first())\n            .pipe(finalize(() => this.loading = false))\n            .subscribe({\n                next: () => this.alertService.success('Please check your email for password reset instructions'),\n                error: error => this.alertService.error(error)\n            });\n    }\n}","<h3 class=\"card-header\">Forgot Password</h3>\n<div class=\"card-body\">\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"mb-3\">\n            <label class=\"form-label\">Email</label>\n            <input type=\"text\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\n            <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                <div *ngIf=\"f.email.errors.email\">Email is invalid</div>\n            </div>\n        </div>\n        <div class=\"mb-3\">\n            <button [disabled]=\"loading\" class=\"btn btn-primary\">\n                <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm me-1\"></span>\n                Submit\n            </button>\n            <a routerLink=\"../login\" class=\"btn btn-link\">Cancel</a>\n        </div>\n    </form>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}