{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map, finalize } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/accounts`;\nexport class AccountService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.accountSubject = new BehaviorSubject(null);\n    this.account = this.accountSubject.asObservable();\n  }\n  get accountValue() {\n    return this.accountSubject.value;\n  }\n  login(email, password) {\n    return this.http.post(`${baseUrl}/authenticate`, {\n      email,\n      password\n    }, {\n      withCredentials: true\n    }).pipe(map(account => {\n      this.accountSubject.next(account);\n      this.startRefreshTokenTimer();\n      return account;\n    }));\n  }\n  logout() {\n    this.http.post(`${baseUrl}/revoke-token`, {}, {\n      withCredentials: true\n    }).subscribe();\n    this.stopRefreshTokenTimer();\n    this.accountSubject.next(null);\n    this.router.navigate(['/account/login']);\n  }\n  refreshToken() {\n    return this.http.post(`${baseUrl}/refresh-token`, {}, {\n      withCredentials: true\n    }).pipe(map(account => {\n      this.accountSubject.next(account);\n      this.startRefreshTokenTimer();\n      return account;\n    }));\n  }\n  register(account) {\n    return this.http.post(`${baseUrl}/register`, account);\n  }\n  verifyEmail(token) {\n    return this.http.post(`${baseUrl}/verify-email`, {\n      token\n    });\n  }\n  forgotPassword(email) {\n    return this.http.post(`${baseUrl}/forgot-password`, {\n      email\n    });\n  }\n  validateResetToken(token) {\n    return this.http.post(`${baseUrl}/validate-reset-token`, {\n      token\n    });\n  }\n  resetPassword(token, password, confirmPassword) {\n    return this.http.post(`${baseUrl}/reset-password`, {\n      token,\n      password,\n      confirmPassword\n    });\n  }\n  getAll() {\n    return this.http.get(baseUrl);\n  }\n  getById(id) {\n    return this.http.get(`${baseUrl}/${id}`);\n  }\n  create(params) {\n    return this.http.post(baseUrl, params);\n  }\n  update(id, params) {\n    return this.http.put(`${baseUrl}/${id}`, params).pipe(map(account => {\n      // update the current account if it was updated\n      if (account.id === this.accountValue?.id) {\n        // publish updated account to subscribers\n        account = {\n          ...this.accountValue,\n          ...account\n        };\n        this.accountSubject.next(account);\n      }\n      return account;\n    }));\n  }\n  delete(id) {\n    return this.http.delete(`${baseUrl}/${id}`).pipe(finalize(() => {\n      // auto logout if the logged in account was deleted\n      if (id === this.accountValue?.id) this.logout();\n    }));\n  }\n  startRefreshTokenTimer() {\n    // parse json object from base64 encoded jwt token\n    const jwtBase64 = this.accountValue.jwtToken.split('.')[1];\n    const jwtToken = JSON.parse(atob(jwtBase64));\n    // set a timeout to refresh the token a minute before it expires\n    const expires = new Date(jwtToken.exp * 1000);\n    const timeout = expires.getTime() - Date.now() - 60 * 1000;\n    this.refreshTokenTimeout = setTimeout(() => this.refreshToken().subscribe(), timeout);\n  }\n  stopRefreshTokenTimer() {\n    clearTimeout(this.refreshTokenTimeout);\n  }\n}\nAccountService.ɵfac = function AccountService_Factory(t) {\n  return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\nAccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AccountService,\n  factory: AccountService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","map","finalize","environment","baseUrl","apiUrl","AccountService","constructor","router","http","accountSubject","account","asObservable","accountValue","value","login","email","password","post","withCredentials","pipe","next","startRefreshTokenTimer","logout","subscribe","stopRefreshTokenTimer","navigate","refreshToken","register","verifyEmail","token","forgotPassword","validateResetToken","resetPassword","confirmPassword","getAll","get","getById","id","create","params","update","put","delete","jwtBase64","jwtToken","split","JSON","parse","atob","expires","Date","exp","timeout","getTime","now","refreshTokenTimeout","setTimeout","clearTimeout","factory","providedIn"],"sourceRoot":"","sources":["D:\\boilerplates\\angularfrontend-main\\src\\app\\_services\\account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, finalize } from 'rxjs/operators';\n\nimport { environment } from '@environments/environment';\nimport { Account } from '@app/_models';\n\nconst baseUrl = `${environment.apiUrl}/accounts`;\n\n@Injectable({ providedIn: 'root' })\nexport class AccountService {\n    private accountSubject: BehaviorSubject<Account | null>;\n    public account: Observable<Account | null>;\n\n    constructor(\n        private router: Router,\n        private http: HttpClient\n    ) {\n        this.accountSubject = new BehaviorSubject<Account | null>(null);\n        this.account = this.accountSubject.asObservable();\n    }\n\n    public get accountValue() {\n        return this.accountSubject.value;\n    }\n\n    login(email: string, password: string) {\n        return this.http.post<any>(`${baseUrl}/authenticate`, { email, password }, { withCredentials: true })\n            .pipe(map(account => {\n                this.accountSubject.next(account);\n                this.startRefreshTokenTimer();\n                return account;\n            }));\n    }\n\n    logout() {\n        this.http.post<any>(`${baseUrl}/revoke-token`, {}, { withCredentials: true }).subscribe();\n        this.stopRefreshTokenTimer();\n        this.accountSubject.next(null);\n        this.router.navigate(['/account/login']);\n    }\n\n    refreshToken() {\n        return this.http.post<any>(`${baseUrl}/refresh-token`, {}, { withCredentials: true })\n            .pipe(map((account) => {\n                this.accountSubject.next(account);\n                this.startRefreshTokenTimer();\n                return account;\n            }));\n    }\n\n    register(account: Account) {\n        return this.http.post(`${baseUrl}/register`, account);\n    }\n\n    verifyEmail(token: string) {\n        return this.http.post(`${baseUrl}/verify-email`, { token });\n    }\n\n    forgotPassword(email: string) {\n        return this.http.post(`${baseUrl}/forgot-password`, { email });\n    }\n\n    validateResetToken(token: string) {\n        return this.http.post(`${baseUrl}/validate-reset-token`, { token });\n    }\n\n    resetPassword(token: string, password: string, confirmPassword: string) {\n        return this.http.post(`${baseUrl}/reset-password`, { token, password, confirmPassword });\n    }\n\n    getAll() {\n        return this.http.get<Account[]>(baseUrl);\n    }\n\n    getById(id: string) {\n        return this.http.get<Account>(`${baseUrl}/${id}`);\n    }\n\n    create(params: any) {\n        return this.http.post(baseUrl, params);\n    }\n\n    update(id: string, params: any) {\n        return this.http.put(`${baseUrl}/${id}`, params)\n            .pipe(map((account: any) => {\n                // update the current account if it was updated\n                if (account.id === this.accountValue?.id) {\n                    // publish updated account to subscribers\n                    account = { ...this.accountValue, ...account };\n                    this.accountSubject.next(account);\n                }\n                return account;\n            }));\n    }\n\n    delete(id: string) {\n        return this.http.delete(`${baseUrl}/${id}`)\n            .pipe(finalize(() => {\n                // auto logout if the logged in account was deleted\n                if (id === this.accountValue?.id)\n                    this.logout();\n            }));\n    }\n\n    // helper methods\n\n    private refreshTokenTimeout?: any;\n\n    private startRefreshTokenTimer() {\n        // parse json object from base64 encoded jwt token\n        const jwtBase64 = this.accountValue!.jwtToken!.split('.')[1];\n        const jwtToken = JSON.parse(atob(jwtBase64));\n\n        // set a timeout to refresh the token a minute before it expires\n        const expires = new Date(jwtToken.exp * 1000);\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\n        this.refreshTokenTimeout = setTimeout(() => this.refreshToken().subscribe(), timeout);\n    }\n\n    private stopRefreshTokenTimer() {\n        clearTimeout(this.refreshTokenTimeout);\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}