{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@app/_services\";\nexport class AuthGuard {\n  constructor(router, accountService) {\n    this.router = router;\n    this.accountService = accountService;\n  }\n  canActivate(route, state) {\n    const account = this.accountService.accountValue;\n    if (account) {\n      // check if route is restricted by role\n      if (route.data.roles && !route.data.roles.includes(account.role)) {\n        // role not authorized so redirect to home page\n        this.router.navigate(['/']);\n        return false;\n      }\n      // authorized so return true\n      return true;\n    }\n    // not logged in so redirect to login page with the return url \n    this.router.navigate(['/account/login'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n    return false;\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AccountService));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAMA,OAAM,MAAOA,SAAS;EAClBC,YACYC,MAAc,EACdC,cAA8B;IAD9B,WAAM,GAAND,MAAM;IACN,mBAAc,GAAdC,cAAc;EACtB;EAEJC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACjE,MAAMC,OAAO,GAAG,IAAI,CAACJ,cAAc,CAACK,YAAY;IAChD,IAAID,OAAO,EAAE;MACT;MACA,IAAIF,KAAK,CAACI,IAAI,CAACC,KAAK,IAAI,CAACL,KAAK,CAACI,IAAI,CAACC,KAAK,CAACC,QAAQ,CAACJ,OAAO,CAACK,IAAI,CAAC,EAAE;QAC9D;QACA,IAAI,CAACV,MAAM,CAACW,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;QAC3B,OAAO,KAAK;;MAGhB;MACA,OAAO,IAAI;;IAGf;IACA,IAAI,CAACX,MAAM,CAACW,QAAQ,CAAC,CAAC,gBAAgB,CAAC,EAAE;MAAEC,WAAW,EAAE;QAAEC,SAAS,EAAET,KAAK,CAACU;MAAG;IAAE,CAAE,CAAC;IACnF,OAAO,KAAK;EAChB;;;mBAvBShB,SAAS;AAAA;;SAATA,SAAS;EAAAiB,SAATjB,SAAS;EAAAkB,YADI;AAAM","names":["AuthGuard","constructor","router","accountService","canActivate","route","state","account","accountValue","data","roles","includes","role","navigate","queryParams","returnUrl","url","factory","providedIn"],"sourceRoot":"","sources":["D:\\boilerplates\\angularFrontendBoilerplate\\src\\app\\_helpers\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\nimport { AccountService } from '@app/_services';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n    constructor(\n        private router: Router,\n        private accountService: AccountService\n    ) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        const account = this.accountService.accountValue;\n        if (account) {\n            // check if route is restricted by role\n            if (route.data.roles && !route.data.roles.includes(account.role)) {\n                // role not authorized so redirect to home page\n                this.router.navigate(['/']);\n                return false;\n            }\n\n            // authorized so return true\n            return true;\n        }\n\n        // not logged in so redirect to login page with the return url \n        this.router.navigate(['/account/login'], { queryParams: { returnUrl: state.url } });\n        return false;\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}