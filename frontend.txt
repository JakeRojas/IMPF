================================================================================
File: angular.json
Size: 3.23 kB
================================================================================

{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "angular-15-example": {
      "projectType": "application",
      "schematics": {
        "@schematics/angular:component": {
          "style": "less"
        }
      },
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:browser",
          "options": {
            "outputPath": "dist/angular-15-example",
            "index": "src/index.html",
            "main": "src/main.ts",
            "polyfills": "src/polyfills.ts",
            "tsConfig": "tsconfig.app.json",
            "inlineStyleLanguage": "less",
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "src/styles.less"
            ],
            "scripts": []
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kb",
                  "maximumError": "1mb"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "2kb",
                  "maximumError": "4kb"
                }
              ],
              "fileReplacements": [
                {
                  "replace": "src/environments/environment.ts",
                  "with": "src/environments/environment.prod.ts"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "buildOptimizer": false,
              "optimization": false,
              "vendorChunk": true,
              "extractLicenses": false,
              "sourceMap": true,
              "namedChunks": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "browserTarget": "angular-15-example:build:production"
            },
            "development": {
              "browserTarget": "angular-15-example:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n",
          "options": {
            "browserTarget": "angular-15-example:build"
          }
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "main": "src/test.ts",
            "polyfills": "src/polyfills.ts",
            "tsConfig": "tsconfig.spec.json",
            "karmaConfig": "karma.conf.js",
            "inlineStyleLanguage": "less",
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "src/styles.less"
            ],
            "scripts": []
          }
        }
      }
    }
  },
  "cli": {
    "analytics": "e493dbb3-a581-4dce-9a48-c9918f0714ec"
  }
}


================================================================================
File: LICENSE
Size: 1.08 kB
================================================================================

The MIT License (MIT)

Copyright (c) 2023 Jason Watmore

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


================================================================================
File: netlify.toml
Size: 56 B
================================================================================

[build]
  command = "npm run build"
  publish = "dist/"


================================================================================
File: package.json
Size: 1.39 kB
================================================================================

{
    "name": "angular-15-example",
    "version": "0.0.0",
    "scripts": {
        "ng": "ng",
        "start": "ng serve --open",
        "build": "ng build",
        "watch": "ng build --watch --configuration development",
        "test": "ng test",
        "export:all": "folder2txt --output frontend.txt C:/Users/Administrator/My Desktop/IMPF --exclude .angular --exclude node_modules"
    },
    "private": true,
    "dependencies": {
        "@angular/animations": "^15.0.0",
        "@angular/common": "^15.0.0",
        "@angular/compiler": "^15.0.0",
        "@angular/core": "^15.0.0",
        "@angular/forms": "^15.0.0",
        "@angular/platform-browser": "^15.0.0",
        "@angular/platform-browser-dynamic": "^15.0.0",
        "@angular/router": "^15.0.0",
        "@zxing/library": "^0.21.3",
        "folder2txt": "^1.0.2",
        "rxjs": "~7.5.0",
        "tslib": "^2.3.0",
        "zone.js": "~0.12.0"
    },
    "devDependencies": {
        "@angular-devkit/build-angular": "^15.0.1",
        "@angular/cli": "~15.0.1",
        "@angular/compiler-cli": "^15.0.0",
        "@types/jasmine": "~4.3.0",
        "jasmine-core": "~4.5.0",
        "karma": "~6.4.0",
        "karma-chrome-launcher": "~3.1.0",
        "karma-coverage": "~2.2.0",
        "karma-jasmine": "~5.1.0",
        "karma-jasmine-html-reporter": "~2.0.0",
        "typescript": "~4.8.2"
    }
}


================================================================================
File: README.md
Size: 252 B
================================================================================

# angular-15-signup-verification-boilerplate

Angular 15 Auth Boilerplate - Sign Up with Verification, Login and Forgot Password

Documentation at https://jasonwatmore.com/angular-15-auth-boilerplate-sign-up-with-verification-login-and-forgot-password


================================================================================
File: src\app\account\account-routing.module.ts
Size: 1.06 kB
================================================================================

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { LayoutComponent } from './layout.component';
import { LoginComponent } from './login.component';
import { RegisterComponent } from './register.component';
import { VerifyEmailComponent } from './verify-email.component';
import { ForgotPasswordComponent } from './forgot-password.component';
import { ResetPasswordComponent } from './reset-password.component';

const routes: Routes = [
    {
        path: '', component: LayoutComponent,
        children: [
            { path: 'login', component: LoginComponent },
            { path: 'register', component: RegisterComponent },
            { path: 'verify-email', component: VerifyEmailComponent },
            { path: 'forgot-password', component: ForgotPasswordComponent },
            { path: 'reset-password', component: ResetPasswordComponent }
        ]
    }
];

@NgModule({
    imports: [RouterModule.forChild(routes)],
    exports: [RouterModule]
})
export class AccountRoutingModule { }

================================================================================
File: src\app\account\account.module.ts
Size: 923 B
================================================================================

import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

import { AccountRoutingModule } from './account-routing.module';
import { LayoutComponent } from './layout.component';
import { LoginComponent } from './login.component';
import { RegisterComponent } from './register.component';
import { VerifyEmailComponent } from './verify-email.component';
import { ForgotPasswordComponent } from './forgot-password.component';
import { ResetPasswordComponent } from './reset-password.component';

@NgModule({
    imports: [
        CommonModule,
        ReactiveFormsModule,
        AccountRoutingModule
    ],
    declarations: [
        LayoutComponent,
        LoginComponent,
        RegisterComponent,
        VerifyEmailComponent,
        ForgotPasswordComponent,
        ResetPasswordComponent
    ]
})
export class AccountModule { }

================================================================================
File: src\app\account\forgot-password.component.html
Size: 937 B
================================================================================

ï»¿<h3 class="card-header">Forgot Password</h3>
<div class="card-body">
    <form [formGroup]="form" (ngSubmit)="onSubmit()">
        <div class="mb-3">
            <label class="form-label">Email</label>
            <input type="text" formControlName="email" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.email.errors }" />
            <div *ngIf="submitted && f.email.errors" class="invalid-feedback">
                <div *ngIf="f.email.errors.required">Email is required</div>
                <div *ngIf="f.email.errors.email">Email is invalid</div>
            </div>
        </div>
        <div class="mb-3">
            <button [disabled]="loading" class="btn btn-primary">
                <span *ngIf="loading" class="spinner-border spinner-border-sm me-1"></span>
                Submit
            </button>
            <a routerLink="../login" class="btn btn-link">Cancel</a>
        </div>
    </form>
</div>

================================================================================
File: src\app\account\forgot-password.component.ts
Size: 1.32 kB
================================================================================

ï»¿import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { first, finalize } from 'rxjs/operators';

import { AccountService, AlertService } from '@app/_services';

@Component({ templateUrl: 'forgot-password.component.html' })
export class ForgotPasswordComponent implements OnInit {
    form!: FormGroup;
    loading = false;
    submitted = false;

    constructor(
        private formBuilder: FormBuilder,
        private accountService: AccountService,
        private alertService: AlertService
    ) { }

    ngOnInit() {
        this.form = this.formBuilder.group({
            email: ['', [Validators.required, Validators.email]]
        });
    }

    get f() { return this.form.controls; }

    onSubmit() {
        this.submitted = true;

        this.alertService.clear();

        if (this.form.invalid) {
            return;
        }

        this.loading = true;
        this.accountService.forgotPassword(this.f.email.value)
            .pipe(first())
            .pipe(finalize(() => this.loading = false))
            .subscribe({
                next: () => this.alertService.success('Please check your email for password reset instructions'),
                error: error => this.alertService.error(error)
            });
    }
}

================================================================================
File: src\app\account\layout.component.html
Size: 231 B
================================================================================

ï»¿<div class="container">
    <div class="row">
        <div class="col-lg-8 offset-lg-2 mt-5">
            <div class="card m-3">
                <router-outlet></router-outlet>
            </div>
        </div>
    </div>
</div>

================================================================================
File: src\app\account\layout.component.ts
Size: 482 B
================================================================================

ï»¿import { Component } from '@angular/core';
import { Router } from '@angular/router';

import { AccountService } from '@app/_services';

@Component({ templateUrl: 'layout.component.html' })
export class LayoutComponent {
    constructor(
        private router: Router,
        private accountService: AccountService
    ) {
        // redirect to home if already logged in
        if (this.accountService.accountValue) {
            this.router.navigate(['/']);
        }
    }
}

================================================================================
File: src\app\account\login.component.html
Size: 1.62 kB
================================================================================

ï»¿<h3 class="card-header">Login</h3>
<div class="card-body">
    <form [formGroup]="form" (ngSubmit)="onSubmit()">
        <div class="mb-3">
            <label class="form-label">Email</label>
            <input type="text" formControlName="email" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.email.errors }" />
            <div *ngIf="submitted && f.email.errors" class="invalid-feedback">
                <div *ngIf="f.email.errors.required">Email is required</div>
                <div *ngIf="f.email.errors.email">Email is invalid</div>
            </div>
        </div>
        <div class="mb-3">
            <label class="form-label">Password</label>
            <input type="password" formControlName="password" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.password.errors }" />
            <div *ngIf="submitted && f.password.errors" class="invalid-feedback">
                <div *ngIf="f.password.errors.required">Password is required</div>
            </div>
        </div>
        <div class="row">
            <div class="mb-3 col">
                <button [disabled]="submitting" class="btn btn-primary">
                    <span *ngIf="submitting" class="spinner-border spinner-border-sm me-1"></span>
                    Login
                </button>
                <a *ngIf="showRegister" routerLink="../register" class="btn btn-link">Register</a>
            </div>
            <div class="mb-3 col text-end">
                <a routerLink="../forgot-password" class="btn btn-link pe-0">Forgot Password?</a>
            </div>
        </div>
    </form>
</div>

================================================================================
File: src\app\account\login.component.ts
Size: 1.96 kB
================================================================================

ï»¿import { Component, OnInit } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { first } from 'rxjs/operators';

import { AccountService, AlertService } from '@app/_services';

@Component({ templateUrl: 'login.component.html' })
export class LoginComponent implements OnInit {
    form!: FormGroup;
    submitting = false;
    submitted = false;
    showRegister = false;

    constructor(
        private formBuilder: FormBuilder,
        private route: ActivatedRoute,
        private router: Router,
        private accountService: AccountService,
        private alertService: AlertService
    ) { }

    ngOnInit() {
        this.form = this.formBuilder.group({
            email: ['', [Validators.required, Validators.email]],
            password: ['', Validators.required]
        });
        this.accountService.hasAnyAccount()
      .pipe(first())
      .subscribe({
        next: res => {
          this.showRegister = !(res && res.exists);
        },
        error: err => {
          console.warn('hasAnyAccount failed (showing register):', err);
          this.showRegister = true;
        }
      });
    }

    get f() { return this.form.controls; }

    onSubmit() {
        this.submitted = true;

        this.alertService.clear();

        if (this.form.invalid) {
            return;
        }

        this.submitting = true;
        this.accountService.login(this.f.email.value, this.f.password.value)
            .pipe(first())
            .subscribe({
                next: () => {
                    const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';
                    this.router.navigateByUrl(returnUrl);
                },
                error: error => {
                    this.alertService.error(error);
                    this.submitting = false;
                }
            });
    }
}

================================================================================
File: src\app\account\register.component.html
Size: 4.29 kB
================================================================================

ï»¿<h3 class="card-header">Register</h3>
<div class="card-body">
    <form [formGroup]="form" (ngSubmit)="onSubmit()">
        <div class="row">
            <div class="mb-3 col-2">
                <label class="form-label">Title</label>
                <select formControlName="title" class="form-select" [ngClass]="{ 'is-invalid': submitted && f.title.errors }">
                    <option value=""></option>
                    <option value="Mr">Mr</option>
                    <option value="Mrs">Mrs</option>
                    <option value="Miss">Miss</option>
                    <option value="Ms">Ms</option>
                </select>
                <div *ngIf="submitted && f.title.errors" class="invalid-feedback">
                    <div *ngIf="f.title.errors.required">Title is required</div>
                </div>
            </div>
            <div class="mb-3 col-5">
                <label class="form-label">First Name</label>
                <input type="text" formControlName="firstName" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.firstName.errors }" />
                <div *ngIf="submitted && f.firstName.errors" class="invalid-feedback">
                    <div *ngIf="f.firstName.errors.required">First Name is required</div>
                </div>
            </div>
            <div class="mb-3 col-5">
                <label class="form-label">Last Name</label>
                <input type="text" formControlName="lastName" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.lastName.errors }" />
                <div *ngIf="submitted && f.lastName.errors" class="invalid-feedback">
                    <div *ngIf="f.lastName.errors.required">Last Name is required</div>
                </div>
            </div>
        </div>
        <div class="mb-3">
            <label class="form-label">Email</label>
            <input type="text" formControlName="email" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.email.errors }" />
            <div *ngIf="submitted && f.email.errors" class="invalid-feedback">
                <div *ngIf="f.email.errors.required">Email is required</div>
                <div *ngIf="f.email.errors.email">Email must be a valid email address</div>
            </div>
        </div>
        <div class="row">
            <div class="mb-3 col">
                <label class="form-label">Password</label>
                <input type="password" formControlName="password" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.password.errors }" />
                <div *ngIf="submitted && f.password.errors" class="invalid-feedback">
                    <div *ngIf="f.password.errors.required">Password is required</div>
                    <div *ngIf="f.password.errors.minlength">Password must be at least 6 characters</div>
                </div>
            </div>
            <div class="mb-3 col">
                <label class="form-label">Confirm Password</label>
                <input type="password" formControlName="confirmPassword" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.confirmPassword.errors }" />
                <div *ngIf="submitted && f.confirmPassword.errors" class="invalid-feedback">
                    <div *ngIf="f.confirmPassword.errors.required">Confirm Password is required</div>
                    <div *ngIf="f.confirmPassword.errors.mustMatch">Passwords must match</div>
                </div>
            </div>
        </div>
        <div class="mb-3 form-check">
            <input type="checkbox" formControlName="acceptTerms" id="acceptTerms" class="form-check-input" [ngClass]="{ 'is-invalid': submitted && f.acceptTerms.errors }" />
            <label for="acceptTerms" class="form-check-label">Accept Terms & Conditions</label>
            <div *ngIf="submitted && f.acceptTerms.errors" class="invalid-feedback">Accept Ts & Cs is required</div>
        </div>
        <div class="mb-3">
            <button [disabled]="submitting" class="btn btn-primary">
                <span *ngIf="submitting" class="spinner-border spinner-border-sm me-1"></span>
                Register
            </button>
            <a routerLink="../login" href="" class="btn btn-link">Cancel</a>
        </div>
    </form>
</div>

================================================================================
File: src\app\account\register.component.ts
Size: 2.09 kB
================================================================================

ï»¿import { Component, OnInit } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { first } from 'rxjs/operators';

import { AccountService, AlertService } from '@app/_services';
import { MustMatch } from '@app/_helpers';

@Component({ templateUrl: 'register.component.html' })
export class RegisterComponent implements OnInit {
    form!: FormGroup;
    submitting = false;
    submitted = false;

    constructor(
        private formBuilder: FormBuilder,
        private route: ActivatedRoute,
        private router: Router,
        private accountService: AccountService,
        private alertService: AlertService
    ) { }

    ngOnInit() {
        this.form = this.formBuilder.group({
            title: ['', Validators.required],
            firstName: ['', Validators.required],
            lastName: ['', Validators.required],
            email: ['', [Validators.required, Validators.email]],
            password: ['', [Validators.required, Validators.minLength(6)]],
            confirmPassword: ['', Validators.required],
            acceptTerms: [false, Validators.requiredTrue]
        }, {
            validator: MustMatch('password', 'confirmPassword')
        });
    }

    get f() { return this.form.controls; }

    onSubmit() {
        this.submitted = true;

        this.alertService.clear();

        if (this.form.invalid) {
            return;
        }

        this.submitting = true;
        this.accountService.register(this.form.value)
            .pipe(first())
            .subscribe({
                next: () => {
                    this.alertService.success('Registration successful, please check your email for verification instructions', { keepAfterRouteChange: true });
                    this.router.navigate(['../login'], { relativeTo: this.route });
                },
                error: error => {
                    this.alertService.error(error);
                    this.submitting = false;
                }
            });
    }
}

================================================================================
File: src\app\account\reset-password.component.html
Size: 1.91 kB
================================================================================

ï»¿<h3 class="card-header">Reset Password</h3>
<div class="card-body">
    <div *ngIf="tokenStatus == TokenStatus.Validating">
        Validating token...
    </div>
    <div *ngIf="tokenStatus == TokenStatus.Invalid">
        Token validation failed, if the token has expired you can get a new one at the <a routerLink="../forgot-password">forgot password</a> page.
    </div>
    <form *ngIf="tokenStatus == TokenStatus.Valid" [formGroup]="form" (ngSubmit)="onSubmit()">
        <div class="mb-3">
            <label class="form-label">Password</label>
            <input type="password" formControlName="password" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.password.errors }" />
            <div *ngIf="submitted && f.password.errors" class="invalid-feedback">
                <div *ngIf="f.password.errors.required">Password is required</div>
                <div *ngIf="f.password.errors.minlength">Password must be at least 6 characters</div>
            </div>
        </div>
        <div class="mb-3">
            <label class="form-label">Confirm Password</label>
            <input type="password" formControlName="confirmPassword" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.confirmPassword.errors }" />
            <div *ngIf="submitted && f.confirmPassword.errors" class="invalid-feedback">
                <div *ngIf="f.confirmPassword.errors.required">Confirm Password is required</div>
                <div *ngIf="f.confirmPassword.errors.mustMatch">Passwords must match</div>
            </div>
        </div>
        <div class="mb-3">
            <button [disabled]="loading" class="btn btn-primary">
                <span *ngIf="loading" class="spinner-border spinner-border-sm me-1"></span>
                Reset Password
            </button>
            <a routerLink="../login" class="btn btn-link">Cancel</a>
        </div>
    </form>
</div>

================================================================================
File: src\app\account\reset-password.component.ts
Size: 2.53 kB
================================================================================

ï»¿import { Component, OnInit } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { first } from 'rxjs/operators';

import { AccountService, AlertService } from '@app/_services';
import { MustMatch } from '@app/_helpers';

enum TokenStatus {
    Validating,
    Valid,
    Invalid
}

@Component({ templateUrl: 'reset-password.component.html' })
export class ResetPasswordComponent implements OnInit {
    TokenStatus = TokenStatus;
    tokenStatus = TokenStatus.Validating;
    token?: string;
    form!: FormGroup;
    loading = false;
    submitted = false;

    constructor(
        private formBuilder: FormBuilder,
        private route: ActivatedRoute,
        private router: Router,
        private accountService: AccountService,
        private alertService: AlertService
    ) { }

    ngOnInit() {
        this.form = this.formBuilder.group({
            password: ['', [Validators.required, Validators.minLength(6)]],
            confirmPassword: ['', Validators.required],
        }, {
            validator: MustMatch('password', 'confirmPassword')
        });

        const token = this.route.snapshot.queryParams['token'];

        this.router.navigate([], { relativeTo: this.route, replaceUrl: true });

        this.accountService.validateResetToken(token)
            .pipe(first())
            .subscribe({
                next: () => {
                    this.token = token;
                    this.tokenStatus = TokenStatus.Valid;
                },
                error: () => {
                    this.tokenStatus = TokenStatus.Invalid;
                }
            });
    }

    get f() { return this.form.controls; }

    onSubmit() {
        this.submitted = true;

        this.alertService.clear();

        if (this.form.invalid) {
            return;
        }

        this.loading = true;
        this.accountService.resetPassword(this.token!, this.f.password.value, this.f.confirmPassword.value)
            .pipe(first())
            .subscribe({
                next: () => {
                    this.alertService.success('Password reset successful, you can now login', { keepAfterRouteChange: true });
                    this.router.navigate(['../login'], { relativeTo: this.route });
                },
                error: error => {
                    this.alertService.error(error);
                    this.loading = false;
                }
            });
    }
}

================================================================================
File: src\app\account\verify-email.component.html
Size: 355 B
================================================================================

ï»¿<h3 class="card-header">Verify Email</h3>
<div class="card-body">
    <div *ngIf="emailStatus == EmailStatus.Verifying">
        Verifying...
    </div>
    <div *ngIf="emailStatus == EmailStatus.Failed">
        Verification failed, you can also verify your account using the <a routerLink="forgot-password">forgot password</a> page.
    </div>
</div>

================================================================================
File: src\app\account\verify-email.component.ts
Size: 1.29 kB
================================================================================

ï»¿import { Component, OnInit } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { first } from 'rxjs/operators';

import { AccountService, AlertService } from '@app/_services';

enum EmailStatus {
    Verifying,
    Failed
}

@Component({ templateUrl: 'verify-email.component.html' })
export class VerifyEmailComponent implements OnInit {
    EmailStatus = EmailStatus;
    emailStatus = EmailStatus.Verifying;

    constructor(
        private route: ActivatedRoute,
        private router: Router,
        private accountService: AccountService,
        private alertService: AlertService
    ) { }

    ngOnInit() {
        const token = this.route.snapshot.queryParams['token'];

        this.router.navigate([], { relativeTo: this.route, replaceUrl: true });

        this.accountService.verifyEmail(token)
            .pipe(first())
            .subscribe({
                next: () => {
                    this.alertService.success('Verification successful, you can now login', { keepAfterRouteChange: true });
                    this.router.navigate(['../login'], { relativeTo: this.route });
                },
                error: () => {
                    this.emailStatus = EmailStatus.Failed;
                }
            });
    }
}

================================================================================
File: src\app\admin\accounts\accounts-routing.module.ts
Size: 518 B
================================================================================

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { ListComponent } from './list.component';
import { AddEditComponent } from './add-edit.component';

const routes: Routes = [
    { path: '', component: ListComponent },
    { path: 'add', component: AddEditComponent },
    { path: 'edit/:AccountId', component: AddEditComponent }
];

@NgModule({
    imports: [RouterModule.forChild(routes)],
    exports: [RouterModule]
})
export class AccountsRoutingModule { }

================================================================================
File: src\app\admin\accounts\accounts.module.ts
Size: 543 B
================================================================================

import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

import { AccountsRoutingModule } from './accounts-routing.module';
import { ListComponent } from './list.component';
import { AddEditComponent } from './add-edit.component';

@NgModule({
    imports: [
        CommonModule,
        ReactiveFormsModule,
        AccountsRoutingModule
    ],
    declarations: [
        ListComponent,
        AddEditComponent
    ]
})
export class AccountsModule { }

================================================================================
File: src\app\admin\accounts\add-edit.component.html
Size: 5.17 kB
================================================================================

ï»¿<form *ngIf="!loading" [formGroup]="form" (ngSubmit)="onSubmit()">
    <div class="row">
        <div class="mb-3 col-2">
            <label class="form-label">Title</label>
            <select formControlName="title" class="form-select" [ngClass]="{ 'is-invalid': submitted && f.title.errors }">
                <option value=""></option>
                <option value="Mr">Mr</option>
                <option value="Mrs">Mrs</option>
                <option value="Miss">Miss</option>
                <option value="Ms">Ms</option>
            </select>
            <div *ngIf="submitted && f.title.errors" class="invalid-feedback">
                <div *ngIf="f.title.errors.required">Title is required</div>
            </div>
        </div>
        <div class="mb-3 col-5">
            <label class="form-label">First Name</label>
            <input type="text" formControlName="firstName" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.firstName.errors }" />
            <div *ngIf="submitted && f.firstName.errors" class="invalid-feedback">
                <div *ngIf="f.firstName.errors.required">First Name is required</div>
            </div>
        </div>
        <div class="mb-3 col-5">
            <label class="form-label">Last Name</label>
            <input type="text" formControlName="lastName" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.lastName.errors }" />
            <div *ngIf="submitted && f.lastName.errors" class="invalid-feedback">
                <div *ngIf="f.lastName.errors.required">Last Name is required</div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="mb-3 col-5">
            <label class="form-label">Role</label>
            <select formControlName="role" class="form-select" [ngClass]="{ 'is-invalid': submitted && f.role.errors }">
                <option value="user">User</option>
                <option value="teacher">Teacher</option>
                <option value="stockroomAdmin">Stock Admin</option>
                <option value="admin">Admin</option>
                <option value="superAdmin">SuperAdmin</option>
            </select>
            <div *ngIf="submitted && f.role.errors" class="invalid-feedback">
                <div *ngIf="f.role.errors.required">Role is required</div>
            </div>
        </div>
        <div class="mb-3 col-5">
            <label class="form-label">Status</label>
            <select formControlName="status" class="form-select" [ngClass]="{ 'is-invalid': submitted && f.status.errors }">
                <option value="active">Reactivate</option>
                <option value="deactivated">Deactivate</option>
            </select>
            <div *ngIf="submitted && f.status.errors" class="invalid-feedback">
                <div *ngIf="f.status.errors.required">Status is required</div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="mb-3 col-7">
            <label class="form-label">Email</label>
            <input type="text" formControlName="email" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.email.errors }" />
            <div *ngIf="submitted && f.email.errors" class="invalid-feedback">
                <div *ngIf="f.email.errors.required">Email is required</div>
                <div *ngIf="f.email.errors.email">Email must be a valid email address</div>
            </div>
        </div>
    </div>
    <div *ngIf="AccountId">
        <h3 class="pt-3">Change Password</h3>
        <p>Leave blank to keep the same password</p>
    </div>
    <div class="row">
        <div class="mb-3 col">
            <label class="form-label">Password</label>
            <input type="password" formControlName="password" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.password.errors }" />
            <div *ngIf="submitted && f.password.errors" class="invalid-feedback">
                <div *ngIf="f.password.errors.required">Password is required</div>
                <div *ngIf="f.password.errors.minlength">Password must be at least 6 characters</div>
            </div>
        </div>
        <div class="mb-3 col">
            <label class="form-label">Confirm Password</label>
            <input type="password" formControlName="confirmPassword" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.confirmPassword.errors }" />
            <div *ngIf="submitted && f.confirmPassword.errors" class="invalid-feedback">
                <div *ngIf="f.confirmPassword.errors.required">Confirm Password is required</div>
                <div *ngIf="f.confirmPassword.errors.mustMatch">Passwords must match</div>
            </div>
        </div>
    </div>
    <div class="mb-3">
        <button type="submit" [disabled]="submitting" class="btn btn-primary">
            <span *ngIf="submitting" class="spinner-border spinner-border-sm me-1"></span>
            Save
        </button>
        <a routerLink="/admin/accounts" class="btn btn-link">Cancel</a>
    </div>
</form>
<div *ngIf="loading" class="text-center m-5">
    <span class="spinner-border spinner-border-lg align-center"></span>
</div>

================================================================================
File: src\app\admin\accounts\add-edit.component.ts
Size: 3.04 kB
================================================================================

ï»¿import { Component, OnInit } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { first } from 'rxjs/operators';

import { AccountService, AlertService } from '@app/_services';
import { MustMatch } from '@app/_helpers';

@Component({ templateUrl: 'add-edit.component.html' })
export class AddEditComponent implements OnInit {
    form!: FormGroup;
    AccountId?: number;
    title!: string;
    loading = false;
    submitting = false;
    submitted = false;

    constructor(
        private formBuilder: FormBuilder,
        private route: ActivatedRoute,
        private router: Router,
        public accountService: AccountService,
        private alertService: AlertService
    ) { }

    ngOnInit() {
        this.AccountId = this.route.snapshot.params['AccountId'];

        this.form = this.formBuilder.group({
            title:              ['', Validators.required],
            firstName:          ['', Validators.required],
            lastName:           ['', Validators.required],
            email:              ['', [Validators.required, Validators.email]],
            role:               ['', Validators.required],
            status:             ['', Validators.required],
            password:           ['', [Validators.minLength(6), ...(!this.AccountId ? [Validators.required] : [])]],
            confirmPassword:    ['']
        }, {
            validator: MustMatch('password', 'confirmPassword')
        });

        this.title = 'Create Account';
        if (this.AccountId) {
            this.title = 'Edit Account';
            this.loading = true;
            this.accountService.getById(this.AccountId)
                .pipe(first())
                .subscribe(x => {
                    this.form.patchValue(x);
                    this.loading = false;
                });
        }
    }

    get f() { return this.form.controls; }

    onSubmit() {
        this.submitted = true;

        this.alertService.clear();

        if (this.form.invalid) {
            return;
        }

        this.submitting = true;

        let saveAccount;
        let message: string;
        if (this.AccountId) {
            saveAccount = () => this.accountService.update(this.AccountId!, this.form.value);
            message = 'Account updated';
        } else {
            saveAccount = () => this.accountService.create(this.form.value);
            message = 'Account created';
        }

        saveAccount()
            .pipe(first())
            .subscribe({
                next: () => {
                    this.alertService.success(message, { keepAfterRouteChange: true });
                    this.router.navigateByUrl('/admin/accounts');
                },
                error: error => {
                    console.error('Create account error:', error);
                    this.alertService.error(error);
                    this.submitting = false;
                }
            });
    }
}

================================================================================
File: src\app\admin\accounts\list.component.html
Size: 1.23 kB
================================================================================

ï»¿<h1>Accounts</h1>
<p>All accounts from secure (admin only) api end point:</p>
<a routerLink="add" class="btn btn-sm btn-success mb-2">Create Account</a>
<table class="table table-striped">
    <thead>
        <tr>
            <th style="width:30%">Name</th>
            <th style="width:30%">Email</th>
            <th style="width:30%">Role</th>
            <th style="width:30%">Status</th>
            <th style="width:10%"></th>
        </tr>
    </thead>
    <tbody>
        <tr *ngFor="let account of accounts">
            <td class="align-middle">{{account.title}} {{account.firstName}} {{account.lastName}}</td>
            <td class="align-middle">{{account.email}}</td>
            <td class="align-middle">{{account.role}}</td>
            <td class="align-middle">{{account.status}}</td>
            <td style="white-space: nowrap">
                <a [routerLink]="['/admin','accounts','edit', account.AccountId]" class="btn btn-sm btn-primary me-1">Edit</a>
            </td>
        </tr>
        <tr *ngIf="!accounts">
            <td colspan="4" class="text-center">
                <span class="spinner-border spinner-border-lg align-center"></span>
            </td>
        </tr>
    </tbody>
</table>

================================================================================
File: src\app\admin\accounts\list.component.ts
Size: 1.15 kB
================================================================================

ï»¿import { Component, OnInit } from '@angular/core';
import { first } from 'rxjs/operators';

import { AccountService, AlertService } from '@app/_services';

@Component({ 
    selector: 'app-accounts-list',
    templateUrl: 'list.component.html' 
})
export class ListComponent implements OnInit {
    accounts?: any[];
    loading = false;

    constructor(
        private accountService: AccountService,
        private alertService: AlertService
    ) { }

    ngOnInit() {
        this.loadAccounts();
    }

    loadAccounts() {
        this.loading = true;
        this.accountService.getAll()
        .pipe(first())
        .subscribe({
          next: (accounts: any[]) => {
            this.accounts = (accounts || []).map(a => ({
              ...a,
              AccountId: a.accountId ?? a.AccountId ?? a.id,
              status: a.status ?? a._status ?? (a.isActive ? 'active' : 'deactivated'),
              toggling: false
            }));
            this.loading = false;
          },
          error: (err: any) => {
            this.alertService.error(err);
            this.loading = false;
          }
        });
      }
}

================================================================================
File: src\app\admin\admin-routing.module.ts
Size: 786 B
================================================================================

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { SubNavComponent } from './subnav.component';
import { LayoutComponent } from './layout.component';
import { OverviewComponent } from './overview.component';

const accountsModule = () => import('./accounts/accounts.module').then(x => x.AccountsModule);

const routes: Routes = [
    { path: '', component: SubNavComponent, outlet: 'subnav' },
    {
        path: '', component: LayoutComponent,
        children: [
            { path: '', component: OverviewComponent },
            { path: 'accounts', loadChildren: accountsModule }
        ]
    }
];

@NgModule({
    imports: [RouterModule.forChild(routes)],
    exports: [RouterModule]
})
export class AdminRoutingModule { }

================================================================================
File: src\app\admin\admin.module.ts
Size: 618 B
================================================================================

import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

import { AdminRoutingModule } from './admin-routing.module';
import { SubNavComponent } from './subnav.component';
import { LayoutComponent } from './layout.component';
import { OverviewComponent } from './overview.component';

@NgModule({
    imports: [
        CommonModule,
        ReactiveFormsModule,
        AdminRoutingModule
    ],
    declarations: [
        SubNavComponent,
        LayoutComponent,
        OverviewComponent
    ]
})
export class AdminModule { }

================================================================================
File: src\app\admin\layout.component.html
Size: 106 B
================================================================================

ï»¿<div class="p-4">
    <div class="container">
        <router-outlet></router-outlet>
    </div>
</div>

================================================================================
File: src\app\admin\layout.component.ts
Size: 132 B
================================================================================

ï»¿import { Component } from '@angular/core';

@Component({ templateUrl: 'layout.component.html' })
export class LayoutComponent { }

================================================================================
File: src\app\admin\overview.component.html
Size: 217 B
================================================================================

ï»¿<div class="p-4">
    <div class="container">
        <h1>Admin</h1>
        <p>This section can only be accessed by administrators.</p>
        <p><a routerLink="accounts">Manage Accounts</a></p>
    </div>
</div>

================================================================================
File: src\app\admin\overview.component.ts
Size: 136 B
================================================================================

ï»¿import { Component } from '@angular/core';

@Component({ templateUrl: 'overview.component.html' })
export class OverviewComponent { }

================================================================================
File: src\app\admin\subnav.component.html
Size: 207 B
================================================================================

<nav class="admin-nav navbar navbar-expand navbar-light px-3">
    <div class="navbar-nav">
        <a routerLink="accounts" routerLinkActive="active" class="nav-item nav-link">Accounts</a>
    </div>
</nav>

================================================================================
File: src\app\admin\subnav.component.ts
Size: 129 B
================================================================================

import { Component } from '@angular/core';

@Component({ templateUrl: 'subnav.component.html' })
export class SubNavComponent { }

================================================================================
File: src\app\app-routing.module.ts
Size: 2.21 kB
================================================================================

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { HomeComponent } from './home';
import { AuthGuard } from './_helpers';
import { Role } from './_models';

const accountModule = () => import('./account/account.module').then(x => x.AccountModule);
const adminModule = () => import('./admin/admin.module').then(x => x.AdminModule);
const profileModule = () => import('./profile/profile.module').then(x => x.ProfileModule);

const roomModule = () => import('./room/room.module').then(x => x.RoomModule);
const scanModule = () => import('./scan/scan.module').then(x => x.ScanModule);

const stockRequestModule = () => import('./requests/stock-request/stock-request.module').then(x => x.StockRequestModule);
const itemRequestModule = () => import('./requests/item-request/item-request.module').then(x => x.ItemRequestModule);

const transferModule = () => import('./transfer/transfer.module').then(x => x.TransferModule);

const routes: Routes = [
    { path: '', component: HomeComponent, canActivate: [AuthGuard] },
    { path: 'account', loadChildren: accountModule },
    { path: 'profile', loadChildren: profileModule, canActivate: [AuthGuard] },
    { path: 'admin', loadChildren: adminModule, canActivate: [AuthGuard], data: { roles: [Role.SuperAdmin] } },

    { path: 'room', loadChildren: roomModule, canActivate: [AuthGuard], data: { roles: [Role.SuperAdmin] } },
    { path: 'scan', loadChildren: scanModule, canActivate: [AuthGuard], data: { roles: [Role.SuperAdmin] } },

    { path: 'req-stock', loadChildren: stockRequestModule, canActivate: [AuthGuard], data: { roles: [Role.SuperAdmin, Role.Admin, Role.StockroomAdmin] } },
    { path: 'req-item', loadChildren: itemRequestModule, canActivate: [AuthGuard], data: { roles: [Role.SuperAdmin, Role.StockroomAdmin, Role.Teacher] } },

    { path: 'transfers', loadChildren: transferModule, canActivate: [AuthGuard], data: { roles: [Role.SuperAdmin, Role.Admin, Role.StockroomAdmin, Role.Teacher] } },

    // otherwise redirect to home
    { path: '**', redirectTo: '' }
];

@NgModule({
    imports: [RouterModule.forRoot(routes)],
    exports: [RouterModule]
})
export class AppRoutingModule { }


================================================================================
File: src\app\app.component.html
Size: 1.83 kB
================================================================================

ï»¿<div class="app-container" [ngClass]="{ 'bg-light': account }">
    <!-- main nav -->
    <nav class="navbar navbar-expand navbar-dark bg-dark px-3" *ngIf="account">
        <div class="navbar-nav">
            <a routerLink="/" routerLinkActive="active" [routerLinkActiveOptions]="{exact: true}" class="nav-item nav-link">Home</a>
            <a routerLink="/profile" routerLinkActive="active" class="nav-item nav-link">Profile</a>
            <a *ngIf="account.role === Role.SuperAdmin" routerLink="/room" routerLinkActive="active" class="nav-item nav-link">Room</a>
            <a *ngIf="account.role === Role.SuperAdmin" routerLink="/scan" routerLinkActive="active" class="nav-item nav-link">Scan</a>
            <a *ngIf="account.role === Role.SuperAdmin" routerLink="/admin" routerLinkActive="active" class="nav-item nav-link">Admin</a>

            <a *ngIf="account.role === Role.SuperAdmin || account.role === Role.Admin || account.role === Role.StockroomAdmin"
             routerLink="/req-stock"
             routerLinkActive="active"
             class="nav-item nav-link">Stock Requests</a>

             <a *ngIf="account.role === Role.SuperAdmin || account.role === Role.StockroomAdmin || account.role === Role.Teacher"
             routerLink="/req-item" routerLinkActive="active" class="nav-item nav-link">Item Request</a>

             <a class="nav-link" routerLink="/transfers" routerLinkActive="active">
                <i class="fa fa-exchange"></i> Transfers
              </a>

            <button (click)="logout()" class="btn btn-link nav-item nav-link">Logout</button>
        </div>
    </nav>

    <!-- subnav router outlet -->
    <router-outlet name="subnav"></router-outlet>

    <!-- global alert -->
    <alert></alert>

    <!-- main router outlet -->
    <router-outlet></router-outlet>
</div>

================================================================================
File: src\app\app.component.ts
Size: 522 B
================================================================================

ï»¿import { Component } from '@angular/core';
import { Router } from '@angular/router';

import { AccountService } from './_services';
import { Account, Role } from './_models';

@Component({ selector: 'app-root', templateUrl: 'app.component.html' })
export class AppComponent {
    Role = Role;
    account?: Account | null;

    constructor(private accountService: AccountService) {
        this.accountService.account.subscribe(x => this.account = x);
    }

    logout() {
        this.accountService.logout();
    }
}

================================================================================
File: src\app\app.module.ts
Size: 1.15 kB
================================================================================

ï»¿import { NgModule, APP_INITIALIZER } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';

import { AppRoutingModule } from './app-routing.module';
import { JwtInterceptor, ErrorInterceptor, appInitializer } from './_helpers';
import { AccountService } from './_services';
import { AppComponent } from './app.component';
import { AlertComponent } from './_components';
import { HomeComponent } from './home';

@NgModule({
    imports: [
        BrowserModule,
        ReactiveFormsModule,
        HttpClientModule,
        AppRoutingModule
    ],
    declarations: [
        AppComponent,
        AlertComponent,
        HomeComponent
    ],
    providers: [
        { provide: APP_INITIALIZER, useFactory: appInitializer, multi: true, deps: [AccountService] },
        { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },
        { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },
    ],
    bootstrap: [AppComponent]
})
export class AppModule { }


================================================================================
File: src\app\home\home.component.html
Size: 166 B
================================================================================

ï»¿<div class="p-4">
    <div class="container">
        <h1>Hi {{account?.firstName}}!</h1>
        <p>You're logged in with Angular 15 & JWT!!</p>
    </div>
</div>

================================================================================
File: src\app\home\home.component.ts
Size: 287 B
================================================================================

ï»¿import { Component } from '@angular/core';

import { AccountService } from '@app/_services';

@Component({ templateUrl: 'home.component.html' })
export class HomeComponent {
    account = this.accountService.accountValue;

    constructor(private accountService: AccountService) { }
}

================================================================================
File: src\app\home\index.ts
Size: 36 B
================================================================================

ï»¿export * from './home.component';

================================================================================
File: src\app\profile\details.component.html
Size: 238 B
================================================================================

ï»¿<h1>My Profile</h1>
<p *ngIf="account">
    <strong>Name: </strong> {{account.title}} {{account.firstName}} {{account.lastName}}<br />
    <strong>Email: </strong> {{account.email}}
</p>
<p><a routerLink="update">Update Profile</a></p>

================================================================================
File: src\app\profile\details.component.ts
Size: 293 B
================================================================================

ï»¿import { Component } from '@angular/core';

import { AccountService } from '@app/_services';

@Component({ templateUrl: 'details.component.html' })
export class DetailsComponent {
    account = this.accountService.accountValue;

    constructor(private accountService: AccountService) { }
}

================================================================================
File: src\app\profile\layout.component.html
Size: 106 B
================================================================================

ï»¿<div class="p-4">
    <div class="container">
        <router-outlet></router-outlet>
    </div>
</div>

================================================================================
File: src\app\profile\layout.component.ts
Size: 132 B
================================================================================

ï»¿import { Component } from '@angular/core';

@Component({ templateUrl: 'layout.component.html' })
export class LayoutComponent { }

================================================================================
File: src\app\profile\profile-routing.module.ts
Size: 621 B
================================================================================

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { LayoutComponent } from './layout.component';
import { DetailsComponent } from './details.component';
import { UpdateComponent } from './update.component';

const routes: Routes = [
    {
        path: '', component: LayoutComponent,
        children: [
            { path: '', component: DetailsComponent },
            { path: 'update', component: UpdateComponent }
        ]
    }
];

@NgModule({
    imports: [RouterModule.forChild(routes)],
    exports: [RouterModule]
})
export class ProfileRoutingModule { }

================================================================================
File: src\app\profile\profile.module.ts
Size: 623 B
================================================================================

import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

import { ProfileRoutingModule } from './profile-routing.module';
import { LayoutComponent } from './layout.component';
import { DetailsComponent } from './details.component';
import { UpdateComponent } from './update.component';

@NgModule({
    imports: [
        CommonModule,
        ReactiveFormsModule,
        ProfileRoutingModule
    ],
    declarations: [
        LayoutComponent,
        DetailsComponent,
        UpdateComponent
    ]
})
export class ProfileModule { }

================================================================================
File: src\app\profile\update.component.html
Size: 3.87 kB
================================================================================

ï»¿<h1>Update Profile</h1>
<form [formGroup]="form" (ngSubmit)="onSubmit()">
    <div class="row">
        <div class="mb-3 col-2">
            <label class="form-label">Title</label>
            <select formControlName="title" class="form-select" [ngClass]="{ 'is-invalid': submitted && f.title.errors }">
                <option value=""></option>
                <option value="Mr">Mr</option>
                <option value="Mrs">Mrs</option>
                <option value="Miss">Miss</option>
                <option value="Ms">Ms</option>
            </select>
            <div *ngIf="submitted && f.title.errors" class="invalid-feedback">
                <div *ngIf="f.title.errors.required">Title is required</div>
            </div>
        </div>
        <div class="mb-3 col-5">
            <label class="form-label">First Name</label>
            <input type="text" formControlName="firstName" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.firstName.errors }" />
            <div *ngIf="submitted && f.firstName.errors" class="invalid-feedback">
                <div *ngIf="f.firstName.errors.required">First Name is required</div>
            </div>
        </div>
        <div class="mb-3 col-5">
            <label class="form-label">Last Name</label>
            <input type="text" formControlName="lastName" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.lastName.errors }" />
            <div *ngIf="submitted && f.lastName.errors" class="invalid-feedback">
                <div *ngIf="f.lastName.errors.required">Last Name is required</div>
            </div>
        </div>
    </div>
    <div class="mb-3">
        <label class="form-label">Email</label>
        <input type="text" formControlName="email" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.email.errors }" />
        <div *ngIf="submitted && f.email.errors" class="invalid-feedback">
            <div *ngIf="f.email.errors.required">Email is required</div>
            <div *ngIf="f.email.errors.email">Email must be a valid email address</div>
        </div>
    </div>
    <h3 class="pt-3">Change Password</h3>
    <p>Leave blank to keep the same password</p>
    <div class="row">
        <div class="mb-3 col">
            <label class="form-label">Password</label>
            <input type="password" formControlName="password" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.password.errors }" />
            <div *ngIf="submitted && f.password.errors" class="invalid-feedback">
                <div *ngIf="f.password.errors.required">Password is required</div>
                <div *ngIf="f.password.errors.minlength">Password must be at least 6 characters</div>
            </div>
        </div>
        <div class="mb-3 col">
            <label class="form-label">Confirm Password</label>
            <input type="password" formControlName="confirmPassword" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.confirmPassword.errors }" />
            <div *ngIf="submitted && f.confirmPassword.errors" class="invalid-feedback">
                <div *ngIf="f.confirmPassword.errors.required">Confirm Password is required</div>
                <div *ngIf="f.confirmPassword.errors.mustMatch">Passwords must match</div>
            </div>
        </div>
    </div>
    <div class="mb-3">
        <button type="submit" [disabled]="submitting" class="btn btn-primary me-2">
            <span *ngIf="submitting" class="spinner-border spinner-border-sm me-1"></span>
            Update
        </button>
        <button type="button" (click)="onDelete()" [disabled]="deleting" class="btn btn-danger">
            <span *ngIf="deleting" class="spinner-border spinner-border-sm me-1"></span>
            Delete
        </button>
        <a routerLink="../" href="" class="btn btn-link">Cancel</a>
    </div>
</form>

================================================================================
File: src\app\profile\update.component.ts
Size: 2.46 kB
================================================================================

ï»¿import { Component, OnInit } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { first } from 'rxjs/operators';

import { AccountService, AlertService } from '@app/_services';
import { MustMatch } from '@app/_helpers';

@Component({ templateUrl: 'update.component.html' })
export class UpdateComponent implements OnInit {
    account = this.accountService.accountValue!;
    form!: FormGroup;
    submitting = false;
    submitted = false;
    deleting = false;

    constructor(
        private formBuilder: FormBuilder,
        private route: ActivatedRoute,
        private router: Router,
        private accountService: AccountService,
        private alertService: AlertService
    ) { }

    ngOnInit() {
        this.form = this.formBuilder.group({
            title: [this.account.title, Validators.required],
            firstName: [this.account.firstName, Validators.required],
            lastName: [this.account.lastName, Validators.required],
            email: [this.account.email, [Validators.required, Validators.email]],
            password: ['', [Validators.minLength(6)]],
            confirmPassword: ['']
        }, {
            validator: MustMatch('password', 'confirmPassword')
        });
    }

    get f() { return this.form.controls; }

    onSubmit() {
        this.submitted = true;

        this.alertService.clear();

        if (this.form.invalid) {
            return;
        }

        this.submitting = true;
        this.accountService.update(this.account.AccountId!, this.form.value)
            .pipe(first())
            .subscribe({
                next: () => {
                    this.alertService.success('Update successful', { keepAfterRouteChange: true });
                    this.router.navigate(['../'], { relativeTo: this.route });
                },
                error: error => {
                    this.alertService.error(error);
                    this.submitting = false;
                }
            });
    }

    onDelete() {
        if (confirm('Are you sure?')) {
            this.deleting = true;
            this.accountService.delete(this.account.AccountId!)
                .pipe(first())
                .subscribe(() => {
                    this.alertService.success('Account deleted successfully', { keepAfterRouteChange: true });
                });
        }
    }
}

================================================================================
File: src\app\requests\item-request\item-request-create.component.html
Size: 1.93 kB
================================================================================

<div class="container p-3">
    <h4>New Item Request</h4>
    <form [formGroup]="form" (ngSubmit)="submit()">
      <div class="mb-3">
        <label>Requester Room ID (optional)</label>
        <input class="form-control" formControlName="requesterRoomId" />
      </div>
  
      <div formArrayName="items">
        <div *ngFor="let it of items.controls; let i=index" [formGroupName]="i" class="card mb-2 p-2">
          <div class="d-flex gap-2">
            <div class="flex-fill">
              <label>Item Type</label>
              <select class="form-select" formControlName="itemType">
                <option value="apparel">Apparel</option>
                <option value="supply">Supply</option>
                <option value="genItem">Gen Item</option>
              </select>
            </div>
            <div class="flex-fill">
              <label>Item ID (optional)</label>
              <input class="form-control" formControlName="itemId" />
            </div>
            <div style="width:120px">
              <label>Qty</label>
              <input class="form-control" type="number" formControlName="quantity" />
            </div>
            <div style="width:48px" class="d-flex align-items-end">
              <button type="button" class="btn btn-danger" (click)="removeItem(i)">â</button>
            </div>
          </div>
          <div class="mt-2">
            <label>Note</label>
            <input class="form-control" formControlName="note" />
          </div>
        </div>
      </div>
  
      <div class="mb-3">
        <button type="button" class="btn btn-sm btn-outline-secondary" (click)="addItem()">+ Add item</button>
      </div>
  
      <button class="btn btn-primary" [disabled]="submitting">{{ submitting ? 'Creating...' : 'Create' }}</button>
      <a class="btn btn-link" routerLink="/req-item">Cancel</a>
    </form>
  </div>
  

================================================================================
File: src\app\requests\item-request\item-request-create.component.ts
Size: 3.05 kB
================================================================================

import { 
  FormBuilder, 
  FormArray, 
  Validators 
} from '@angular/forms';
import { Component  } from '@angular/core';
import { Router     } from '@angular/router';
import { first      } from 'rxjs/operators';
import { forkJoin   } from 'rxjs';

import { 
  AlertService, 
  AccountService, 
  ItemRequestService 
} from '@app/_services';
// ===================================================

@Component({
  templateUrl: './item-request-create.component.html'
})
export class ItemRequestCreateComponent {
  form = this.fb.group({
    requesterRoomId: [null],
    items: this.fb.array([ this._createItem() ]),
    note: ['']
  });

  submitting = false;
  account: any;

  constructor(
    private fb: FormBuilder,
    private ir: ItemRequestService,
    private alert: AlertService,
    private router: Router,
    private accountService: AccountService
  ) {
    this.account = this.accountService.accountValue;
  }

  private _createItem() {
    return this.fb.group({
      itemType: ['apparel', Validators.required],
      itemId: [null],
      quantity: [1, [Validators.required, Validators.min(1)]],
      note: ['']
    });
  }

  get items() { return this.form.get('items') as FormArray; }
  addItem() { this.items.push(this._createItem()); }
  removeItem(i: number) { if (this.items.length > 1) this.items.removeAt(i); }

  private _errToString(err: any) {
    if (!err && err !== 0) return 'Unknown error';
    if (typeof err === 'string') return err;
    if (err?.error?.message) return String(err.error.message);
    if (err?.message) return String(err.message);
    try { return JSON.stringify(err); } catch { return String(err); }
  }

  submit() {
    if (this.form.invalid) {
      this.alert.error('Please fix validation errors');
      return;
    }

    const raw = this.form.value;
    const requesterRoomId = raw.requesterRoomId ? Number(raw.requesterRoomId) : null;

    const payloads = (raw.items || []).map((it: any) => ({
      requesterRoomId,
      itemType: String(it.itemType || '').trim(),
      itemId: it.itemId ? Number(it.itemId) : null,
      quantity: Number(it.quantity) || 0,
      note: it.note && String(it.note).trim() !== '' ? String(it.note).trim() : null
    }));

    if (payloads.some(p => !p.itemType || !Number.isFinite(p.quantity) || p.quantity <= 0)) {
      this.alert.error('Each item must have a valid type and a positive integer quantity.');
      return;
    }

    this.submitting = true;

    const calls = payloads.map(p => this.ir.create(p));

    forkJoin(calls).pipe(first()).subscribe({
      next: () => {
        this.alert.success(payloads.length > 1 ? 'Item requests created' : 'Item request created', { keepAfterRouteChange: true });
        this.router.navigate(['/req-item']);
      },
      error: e => {
        this.alert.error(this._errToString(e));
        console.error('Create item request error (full):', e);
        this.submitting = false;
      }
    });
  }
}

================================================================================
File: src\app\requests\item-request\item-request-list.component.html
Size: 1.7 kB
================================================================================

<div class="container p-3">
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h3>Item Requests</h3>
      <div>
        <button class="btn btn-sm btn-success" (click)="create()" *ngIf="isTeacher() || isSuperAdmin()">New Request</button>
      </div>
    </div>
  
    <table class="table table-sm">
      <thead>
        <tr><th>ID</th><th>Room</th><th>Requester</th><th>Items</th><th>Date</th><th>Status</th><th></th></tr>
      </thead>
      <tbody>
        <tr *ngFor="let r of requests">
          <td>{{ r.itemRequestId || r.id }}</td>
          <td>{{ r.requesterRoomId }}</td>
          <td>{{ r.acccountId }}</td>
          <td>{{ (r.items || []).length }} item(s)</td>
          <td>{{ r.createdAt | date:'short' }}</td>
          <td>{{ r.status }}</td>
          <td>
            <button class="btn btn-sm btn-outline-primary" (click)="view(r)">View</button>
  
            <button *ngIf="isStockroomAdmin() && r.status === 'pending'" class="btn btn-sm btn-success ms-1" (click)="accept(r)">Accept</button>
            <button *ngIf="isStockroomAdmin() && r.status === 'pending'" class="btn btn-sm btn-warning ms-1" (click)="decline(r)">Decline</button>
            <button *ngIf="isStockroomAdmin() && r.status === 'accepted'" class="btn btn-sm btn-secondary ms-1" (click)="release(r)">Release</button>
  
            <button *ngIf="isTeacher() && r.status === 'released'" class="btn btn-sm btn-danger ms-1" (click)="fulfill(r)">Fulfill</button>
          </td>
        </tr>
      </tbody>
    </table>
  
    <div *ngIf="loading" class="text-center"><span class="spinner-border spinner-border-sm"></span></div>
  </div>
  

================================================================================
File: src\app\requests\item-request\item-request-list.component.ts
Size: 3.75 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { first } from 'rxjs/operators';

import { 
  AlertService, 
  AccountService, 
  ItemRequestService 
} from '@app/_services';
import { ItemRequest } from '@app/_models/item-request.model';
// ==============================================================

@Component({
  templateUrl: './item-request-list.component.html'
})
export class ItemRequestListComponent implements OnInit {
  requests: ItemRequest[] = [];
  loading = false;
  account: any;

  constructor(
    private router: Router,
    private ir: ItemRequestService,
    private alert: AlertService,
    private accountService: AccountService
  ) {
    this.account = this.accountService.accountValue;
  }

  ngOnInit() { 
    this.load(); 
  }

  private _errToString(err: any) {
    if (!err && err !== 0) return 'Unknown error';
    if (typeof err === 'string') return err;
    if (err?.message) return String(err.message);
    if (err?.error?.message) return String(err.error.message);
    try { return JSON.stringify(err); } catch { return String(err); }
  }

  load() {
    this.loading = true;
    this.ir.list().pipe(first()).subscribe({
      next: (res) => { this.requests = res || []; this.loading = false; },
      error: e => { this.alert.error(this._errToString(e)); this.loading = false; }
    });
  }

  view(r: ItemRequest) {
    const rid = Number(r?.itemRequestId ?? r?.id);
    if (!Number.isFinite(rid) || rid <= 0) return this.alert.error('Invalid id');
    this.router.navigate(['/req-item', 'view', rid]);
  }

  create() { this.router.navigate(['/req-item','create']); }

  accept(r: ItemRequest) {
    const id = Number(r?.itemRequestId ?? r?.id);
    if (!Number.isFinite(id)) return this.alert.error('Invalid id');
    if (!confirm('Accept this item request?')) return;
    this.ir.accept(id).pipe(first()).subscribe({ next: () => { this.alert.success('Accepted'); this.load(); }, error: e => this.alert.error(this._errToString(e)) });
  }

  decline(r: ItemRequest) {
    const id = Number(r?.itemRequestId ?? r?.id);
    if (!Number.isFinite(id)) return this.alert.error('Invalid id');
    const reason = prompt('Reason for decline (optional):') ?? undefined;
    this.ir.decline(id, reason).pipe(first()).subscribe({ next: () => { this.alert.success('Declined'); this.load(); }, error: e => this.alert.error(this._errToString(e)) });
  }

  release(r: ItemRequest) {
    const id = Number(r?.itemRequestId ?? r?.id);
    if (!Number.isFinite(id)) return this.alert.error('Invalid id');
    if (!confirm('Release this accepted item request?')) return;

    this.ir.release(id).pipe(first()).subscribe({
      next: () => {
        this.alert.success('Released');
        this.load();
      },
      error: e => this.alert.error(this._errToString(e))
    });
  }

  // Teacher/room-in-charge action: fulfill when accepted
  fulfill(r: ItemRequest) {
    const id = Number(r?.itemRequestId ?? r?.id);
    if (!Number.isFinite(id)) return this.alert.error('Invalid id');
    if (!confirm('Fulfill this item request?')) return;
    this.ir.fulfill(id).pipe(first()).subscribe({ next: () => { this.alert.success('Fulfilled'); this.load(); }, error: e => this.alert.error(this._errToString(e)) });
  }

  // role helpers
  isStockroomAdmin() { return this.account?.role === 'stockroomAdmin' || this.account?.role === 'admin' || this.account?.role === 'superAdmin'; }
  isTeacher() { return this.account?.role === 'teacher' || this.account?.role === 'roomInCharge' || this.account?.role === 'user'; }
  isSuperAdmin() { return this.account?.role === 'superAdmin'; }
}


================================================================================
File: src\app\requests\item-request\item-request-routing.module.ts
Size: 689 B
================================================================================

import { NgModule             } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

import { ItemRequestListComponent   } from './item-request-list.component';
import { ItemRequestCreateComponent } from './item-request-create.component';
import { ItemRequestViewComponent   } from './item-request-view.component';

const routes: Routes = [
  { path: '', component: ItemRequestListComponent },
  { path: 'create', component: ItemRequestCreateComponent },
  { path: 'view/:id', component: ItemRequestViewComponent }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class ItemRequestRoutingModule {}


================================================================================
File: src\app\requests\item-request\item-request-view.component.html
Size: 1.82 kB
================================================================================

<div class="container p-3">
    <button class="btn btn-link mb-2" (click)="goBack()">&larr; Back</button>
  
    <div *ngIf="request">
      <h4>Item Request #{{ request.itemRequestId || request.id }}</h4>
      <dl class="row">
        <dt class="col-sm-3">Room</dt><dd class="col-sm-9">{{ request.requesterRoomId }}</dd>
        <dt class="col-sm-3">Requester</dt><dd class="col-sm-9">{{ request.acccountId }}</dd>
        <dt class="col-sm-3">Status</dt><dd class="col-sm-9">{{ request.status }}</dd>
        <dt class="col-sm-3">Note</dt><dd class="col-sm-9">{{ request.note }}</dd>
        <dt class="col-sm-3">Created</dt><dd class="col-sm-9">{{ request.createdAt | date:'short' }}</dd>
      </dl>
  
      <hr />
      <h5>Requested Items</h5>
  
      <table class="table table-sm">
        <thead><tr><th>#</th><th>Type</th><th>Item ID</th><th>Qty</th><th>Note</th></tr></thead>
        <tbody>
          <tr *ngFor="let it of request.items; let i = index">
            <td>{{ i + 1 }}</td>
            <td>{{ it.itemType }}</td>
            <td>{{ it.itemId }}</td>
            <td>{{ it.quantity }}</td>
            <td>{{ it.note }}</td>
          </tr>
        </tbody>
      </table>
  
      <div class="mt-3">
        <button *ngIf="isStockroomAdmin() && request.status === 'pending'" class="btn btn-success me-1" (click)="accept()">Accept</button>
        <button *ngIf="isStockroomAdmin() && request.status === 'pending'" class="btn btn-warning me-1" (click)="decline()">Decline</button>
        <button *ngIf="isTeacher() && request.status === 'accepted'" class="btn btn-danger" (click)="fulfill()">Fulfill</button>
      </div>
    </div>
  
    <div *ngIf="loading" class="text-center"><span class="spinner-border spinner-border-sm"></span></div>
  </div>
  

================================================================================
File: src\app\requests\item-request\item-request-view.component.ts
Size: 2.97 kB
================================================================================

import { Component, OnInit      } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { first } from 'rxjs/operators';

import { 
  AlertService, 
  AccountService, 
  ItemRequestService 
} from '@app/_services';
import { ItemRequest } from '@app/_models/item-request.model';
// ==============================================================

@Component({ 
  templateUrl: './item-request-view.component.html' 
})
export class ItemRequestViewComponent implements OnInit {
  id!: number;
  request: ItemRequest | null = null;
  loading = false;
  account: any;

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private ir: ItemRequestService,
    private alert: AlertService,
    private accountService: AccountService
  ) {
    this.account = this.accountService.accountValue;
  }

  private _errToString(err: any) {
    if (!err && err !== 0) return 'Unknown error';
    if (typeof err === 'string') return err;
    if (err?.error?.message) return String(err.error.message);
    if (err?.message) return String(err.message);
    try { return JSON.stringify(err); } catch { return String(err); }
  }

  ngOnInit() {
    const param = this.route.snapshot.paramMap.get('id') ?? undefined;
    let id = Number(param);
    if (!Number.isFinite(id) || id <= 0) {
      this.alert.error('Invalid item request id'); this.router.navigate(['/req-item']); return;
    }
    this.id = id;
    this.load();
  }

  load() {
    this.loading = true;
    this.ir.get(this.id).pipe(first()).subscribe({
      next: (r) => { this.request = r; this.loading = false; },
      error: e => { this.alert.error(this._errToString(e)); this.loading = false; this.router.navigate(['/req-item']); }
    });
  }

  accept() { 
    if (!confirm('Accept?')) 
    return; 
      this.ir.accept(this.id)
        .pipe(first())
        .subscribe(() => { 
          this.alert.success('Accepted'); 
          this.load(); 
        }, e => this.alert.error(this._errToString(e))); 
  }
  decline() {
    const reason = prompt('Reason?') ?? undefined; 
    this.ir.decline(this.id, reason)
      .pipe(first())
      .subscribe(() => { 
        this.alert.success('Declined'); 
        this.load(); 
      }, e => this.alert.error(this._errToString(e))); 
  }
  fulfill() { 
    if (!confirm('Fulfill?')) 
    return; 
      this.ir.fulfill(this.id)
        .pipe(first())
        .subscribe(() => { 
      this.alert.success('Fulfilled'); 
      this.load(); 
    }, e => this.alert.error(this._errToString(e))); 
  }

  isStockroomAdmin() { return this.account?.role === 'stockroom' || this.account?.role === 'admin' || this.account?.role === 'superAdmin'; }
  isTeacher() { return this.account?.role === 'teacher' || this.account?.role === 'roomInCharge' || this.account?.role === 'user'; }

  goBack() { this.router.navigate(['/req-item']); }
}


================================================================================
File: src\app\requests\item-request\item-request.module.ts
Size: 747 B
================================================================================

import { NgModule             } from '@angular/core';
import { CommonModule         } from '@angular/common';
import { ReactiveFormsModule  } from '@angular/forms';

import { ItemRequestRoutingModule   } from './item-request-routing.module';
import { ItemRequestListComponent   } from './item-request-list.component';
import { ItemRequestViewComponent   } from './item-request-view.component';
import { ItemRequestCreateComponent } from './item-request-create.component';

@NgModule({
  imports: [
    CommonModule,
    ReactiveFormsModule,
    ItemRequestRoutingModule
  ],
  declarations: [
    ItemRequestListComponent,
    ItemRequestViewComponent,
    ItemRequestCreateComponent
  ]
})
export class ItemRequestModule {}


================================================================================
File: src\app\requests\stock-request\stock-request-routing.module.ts
Size: 803 B
================================================================================

import { NgModule             } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { StockRequestListComponent    } from './stock-request.list.component';
import { StockRequestViewComponent    } from './stock-request.view.component';
import { StockRequestCreateComponent  } from './stock-request.create.component';
// ===============================================================================

const routes: Routes = [
    { path: '',         component: StockRequestListComponent },
    { path: 'create',   component: StockRequestCreateComponent },
    { path: 'view/:id', component: StockRequestViewComponent }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class StockRequestRoutingModule { }


================================================================================
File: src\app\requests\stock-request\stock-request.create.component.html
Size: 1.28 kB
================================================================================

<div class="container p-3">
    <h4>New Stock Request</h4>
    <form [formGroup]="form" (ngSubmit)="submit()">
      <div class="mb-3">
        <label>Requester Room ID (optional)</label>
        <input class="form-control" formControlName="requesterRoomId" />
      </div>
  
      <div class="mb-3">
        <label>Item Type</label>
        <select class="form-select" formControlName="itemType">
          <option value="apparel">Apparel</option>
          <option value="supply">Supply</option>
          <option value="genItem">General Item</option>
        </select>
      </div>
  
      <div class="mb-3">
        <label>Item ID (optional)</label>
        <input class="form-control" formControlName="itemId" />
      </div>
  
      <div class="mb-3">
        <label>Quantity</label>
        <input type="number" min="1" class="form-control" formControlName="quantity" />
      </div>
  
      <div class="mb-3">
        <label>Note</label>
        <textarea class="form-control" formControlName="note"></textarea>
      </div>
  
      <button class="btn btn-primary" [disabled]="submitting">{{ submitting ? 'Creating...' : 'Create' }}</button>
      <a class="btn btn-link" routerLink="/req-stock">Cancel</a>
    </form>
  </div>


================================================================================
File: src\app\requests\stock-request\stock-request.create.component.ts
Size: 3.27 kB
================================================================================

import { Component  } from '@angular/core';
import { Router     } from '@angular/router';
import { first      } from 'rxjs/operators';
import { 
  FormBuilder, 
  FormGroup, 
  Validators 
} from '@angular/forms';

import { 
  AlertService, 
  AccountService, 
  StockRequestService 
} from '@app/_services';
// =========================================================================

@Component({ 
  templateUrl: './stock-request.create.component.html' 
})
export class StockRequestCreateComponent {
  form: FormGroup;
  submitting = false;
  account: any;

  private readonly VALID_ITEM_TYPES = ['apparel', 'supply', 'genItem'];

  constructor(
    private fb: FormBuilder,
    private sr: StockRequestService,
    private alert: AlertService,
    private router: Router,
    private accountService: AccountService
  ) {
    this.account = this.accountService.accountValue;
    this.form = this.fb.group({
      requesterRoomId: [null],
      itemType: ['apparel', Validators.required],
      itemId: [null],
      quantity: [1, [Validators.required, Validators.min(1)]],
      note: ['']
    });
  }

  private _errToString(err: any): string {
    if (!err && err !== 0) return 'Unknown error';
    if (typeof err === 'string') return err;
    if (err?.error?.message) return String(err.error.message);
    if (err?.message) return String(err.message);
    try { return JSON.stringify(err); } catch { return String(err); }
  }

submit() {
  if (this.form.invalid) {
    this.alert.error('Please complete the required fields (item type and quantity).');
    return;
  }

  const raw = this.form.value;
  const itemType = String(raw.itemType || '').trim();
  if (!this.VALID_ITEM_TYPES.includes(itemType)) {
    this.alert.error(`Invalid item type. Allowed: ${this.VALID_ITEM_TYPES.join(', ')}`);
    return;
  }

  const quantity = Number(raw.quantity);
  if (!Number.isInteger(quantity) || quantity <= 0) {
    this.alert.error('Quantity must be a positive integer.');
    return;
  }

  const accountId = this.account?.accountId ?? this.account?.id ?? null;
  if (!accountId) {
    this.alert.error('Unable to determine your account id. Re-login or check session.');
    return;
  }

  const itemId = raw.itemId ? Number(raw.itemId) : null;
  const requesterRoomId = raw.requesterRoomId ? Number(raw.requesterRoomId) : null;

  const note = raw.note && String(raw.note).trim() !== '' ? String(raw.note).trim() : null;

  const payload: any = {
    accountId,
    requesterRoomId,
    itemId,
    itemType,
    quantity,
    note
  };

  console.log('Creating stock request payload:', payload);

  this.submitting = true;
  this.sr.create(payload).pipe(first()).subscribe({
    next: () => {
      this.alert.success('Request created', { keepAfterRouteChange: true });
      this.router.navigate(['/req-stock']);
    },
    error: err => {
      let msg = 'Server error';
      try { msg = err?.error?.message ?? err?.message ?? JSON.stringify(err?.error) ?? String(err); } catch (e) { msg = String(err); }
      console.error('Create stock request failed (full error):', err);
      this.alert.error(msg);
      this.submitting = false;
    }
  });
}
}

================================================================================
File: src\app\requests\stock-request\stock-request.list.component.html
Size: 1.62 kB
================================================================================

<div class="p-3 container">
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Stock Requests</h3>
    <div *ngIf="isStockroom()">
      <button class="btn btn-sm btn-success" (click)="create()">New Request</button>
    </div>
  </div>

  <table class="table table-sm">
    <thead>
      <tr>
        <th>ID</th>
        <th>Room</th>
        <th>Requester</th>
        <th>Item Type</th>
        <th>Qty</th>
        <th>Date</th>
        <th>Status</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let r of requests">
        <td>{{ r.stockRequestId || r.id }}</td>
        <td>{{ r.requesterRoomId }}</td>
        <td>{{ r.acccountId || r.accountId }}</td>
        <td>{{ r.itemType }}</td>
        <td>{{ r.quantity }}</td>
        <td>{{ r.createdAt || r.created_at || r.updatedAt }}</td>
        <td>{{ r.status }}</td>
        <td>
          <button class="btn btn-sm btn-outline-primary" (click)="view(r)">View</button>

          <button *ngIf="isAdmin() && r.status === 'pending'" class="btn btn-sm btn-success ms-1" (click)="approve(r)">Approve</button>
          <button *ngIf="isAdmin() && r.status === 'pending'" class="btn btn-sm btn-warning ms-1" (click)="disapprove(r)">Disapprove</button>

          <button *ngIf="isStockroom() && r.status === 'approved'" class="btn btn-sm btn-danger ms-1" (click)="fulfill(r)">Fulfill</button>
        </td>
      </tr>
    </tbody>
  </table>

  <div *ngIf="loading" class="text-center">
    <span class="spinner-border spinner-border-sm"></span>
  </div>
</div>

================================================================================
File: src\app\requests\stock-request\stock-request.list.component.ts
Size: 3.34 kB
================================================================================

import { Component, OnInit  } from '@angular/core';
import { Router             } from '@angular/router';
import { first              } from 'rxjs/operators';

import { 
  AlertService, 
  AccountService, 
  StockRequestService 
} from '@app/_services';
import { StockRequest } from '@app/_models';
// ============================================================

@Component({
  selector: 'app-stock-request-list',
  templateUrl: './stock-request.list.component.html'
})
export class StockRequestListComponent implements OnInit {
  requests: StockRequest[] = [];
  loading = false;
  account: any = null;

  constructor(
    private router: Router,
    private sr: StockRequestService,
    private alert: AlertService,
    private accountService: AccountService
  ) {
    this.account = this.accountService.accountValue;
  }

  ngOnInit() {
    this.load();
  }

  private _errToString(err: any): string {
    if (!err && err !== 0) return 'Unknown error';
    if (typeof err === 'string') return err;
    if (err?.message) return String(err.message);
    try { return JSON.stringify(err); } catch { return String(err); }
  }

  load() {
    this.loading = true;
    this.sr.list().pipe(first()).subscribe({
      next: (res: StockRequest[]) => { this.requests = res || []; this.loading = false; },
      error: err => { this.alert.error(this._errToString(err)); this.loading = false; }
    });
  }

  view(r: StockRequest) {
    const rawId = r?.stockRequestId ?? r?.id ?? r?.requestId ?? null;
    const id = Number(rawId);
    if (!Number.isFinite(id) || id <= 0) {
      console.warn('Invalid id for stock request', r);
      this.alert.error('Cannot open request â invalid or missing id.');
      return;
    }
    this.router.navigate(['/req-stock', 'view', id]);
  }

  create() { this.router.navigate(['/req-stock', 'create']); }

  approve(r: StockRequest) {
    const id = Number(r?.stockRequestId ?? r?.id);
    if (!Number.isFinite(id)) return this.alert.error('Invalid id');
    if (!confirm('Approve this request?')) return;
    this.sr.approve(id).pipe(first()).subscribe({
      next: () => { this.alert.success('Approved'); this.load(); },
      error: e => this.alert.error(this._errToString(e))
    });
  }

  disapprove(r: StockRequest) {
    const id = Number(r?.stockRequestId ?? r?.id);
    if (!Number.isFinite(id)) return this.alert.error('Invalid id');
    const reason = prompt('Reason for disapproval (optional):') ?? undefined;
    this.sr.disapprove(id, reason).pipe(first()).subscribe({
      next: () => { this.alert.success('Disapproved'); this.load(); },
      error: e => this.alert.error(this._errToString(e))
    });
  }

  fulfill(r: StockRequest) {
    const id = Number(r?.stockRequestId ?? r?.id);
    if (!Number.isFinite(id)) return this.alert.error('Invalid id');
    if (!confirm('Fulfill this request? This will create a release batch.')) return;
    this.sr.fulfill(id).pipe(first()).subscribe({
      next: () => { this.alert.success('Fulfilled'); this.load(); },
      error: e => this.alert.error(this._errToString(e))
    });
  }

  isAdmin() { return this.account?.role === 'superAdmin' && this.account?.role === 'admin'; }
  isStockroom() { return this.account?.role === 'stockroomAdmin' }
}

================================================================================
File: src\app\requests\stock-request\stock-request.module.ts
Size: 781 B
================================================================================

import { NgModule                   } from '@angular/core';
import { CommonModule               } from '@angular/common';
import { ReactiveFormsModule        } from '@angular/forms';
import { StockRequestRoutingModule  } from './stock-request-routing.module';

import { StockRequestListComponent    } from './stock-request.list.component';
import { StockRequestViewComponent    } from './stock-request.view.component';
import { StockRequestCreateComponent  } from './stock-request.create.component';

@NgModule({
  imports: [
    CommonModule,
    ReactiveFormsModule,
    StockRequestRoutingModule
  ],
  declarations: [
    StockRequestListComponent,
    StockRequestViewComponent,
    StockRequestCreateComponent
  ]
})
export class StockRequestModule { }


================================================================================
File: src\app\requests\stock-request\stock-request.view.component.html
Size: 2.08 kB
================================================================================

<div class="container p-3">
    <button class="btn btn-link mb-2" (click)="goBack()">&larr; Back</button>
  
    <div *ngIf="request">
      <h4>Request #{{ request.stockRequestId || request.id }}</h4>
  
      <dl class="row">
        <dt class="col-sm-3">Room</dt><dd class="col-sm-9">{{ request.requesterRoomId }}</dd>
        <dt class="col-sm-3">Requester</dt><dd class="col-sm-9">{{ request.acccountId }}</dd>
        <dt class="col-sm-3">Status</dt><dd class="col-sm-9">{{ request.status }}</dd>
        <dt class="col-sm-3">Qty</dt><dd class="col-sm-9">{{ request.quantity }}</dd>
        <dt class="col-sm-3">Note</dt><dd class="col-sm-9">{{ request.note }}</dd>
        <dt class="col-sm-3">Created</dt><dd class="col-sm-9">{{ request.createdAt | date: 'short' }}</dd>
      </dl>
  
      <hr />
  
      <h5>Requested Item</h5>
  
      <div *ngIf="requestedItemRows && requestedItemRows.length > 0; else noItem">
        <table class="table table-sm table-borderless">
          <tbody>
            <tr *ngFor="let row of requestedItemRows">
              <th class="w-25" style="vertical-align: top;">{{ row.label }}</th>
              <td style="vertical-align: top;">{{ row.value }}</td>
            </tr>
          </tbody>
        </table>
      </div>
  
      <ng-template #noItem>
        <div class="text-muted">No requested item details available. (ItemId: {{ request.itemId }} / Type: {{ request.itemType }})</div>
      </ng-template>
  
      <div class="mt-3">
        <button *ngIf="isAdmin() && request.status === 'pending'" class="btn btn-success me-1" (click)="approve()">Approve</button>
        <button *ngIf="isAdmin() && request.status === 'pending'" class="btn btn-warning me-1" (click)="disapprove()">Disapprove</button>
        <button *ngIf="isStockroom() && request.status === 'approved'" class="btn btn-danger" (click)="fulfill()">Fulfill</button>
      </div>
    </div>
  
    <div *ngIf="loading" class="text-center"><span class="spinner-border spinner-border-sm"></span></div>
  </div>
  

================================================================================
File: src\app\requests\stock-request\stock-request.view.component.ts
Size: 9 kB
================================================================================

import { Component, OnInit      } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { first } from 'rxjs/operators';

import { 
  AlertService, 
  AccountService, 
  StockRequestService 
} from '@app/_services';
import { 
  StockRequest, 
  RequestedItem 
} from '@app/_models/stock-request.model';
// ================================================================

@Component({ 
  templateUrl: './stock-request.view.component.html' 
})
export class StockRequestViewComponent implements OnInit {
  id!: number;
  request: StockRequest | null = null;
  loading = false;
  account: any;
  requestedItemRows: Array<{ label: string; value: string | number | null }> = [];

  constructor(
    private route: ActivatedRoute,
    public router: Router,
    private sr: StockRequestService,
    private alert: AlertService,
    private accountService: AccountService
  ) {
    this.account = this.accountService.accountValue;
  }

  private _errToString(err: any): string {
    if (!err && err !== 0) return 'Unknown error';
    if (typeof err === 'string') return err;
    if (err?.message) return String(err.message);
    try { return JSON.stringify(err); } catch { return String(err); }
  }

  ngOnInit() {
    const paramRaw: string | null = this.route.snapshot.paramMap.get('id');
    const param: string | undefined = paramRaw ?? undefined;
    let id = Number(param);

    if (!Number.isFinite(id) || id <= 0) {
      const nav = this.router.getCurrentNavigation();
      const stateId = nav?.extras?.state?.id ?? (history.state && history.state.id);
      id = Number(stateId);
    }

    if (!Number.isFinite(id) || id <= 0) {
      this.alert.error('Invalid stock request id. Returning to list.');
      this.router.navigate(['/req-stock']);
      return;
    }

    this.id = id;
    this.load();
  }

  load() {
    this.loading = true;
    this.sr.get(this.id).pipe(first()).subscribe({
      next: (res: StockRequest) => {
        this.request = res;
        this.requestedItemRows = this.getRequestedItemDisplayRows(this.request?.requestedItem);
        this.loading = false;
      },
      error: e => { this.alert.error(this._errToString(e)); this.loading = false; this.router.navigate(['/req-stock']); }
    });
  }

  approve() { 
    if (!confirm('Approve?')) return; 
        this.sr.approve(this.id)
        .pipe(first())
        .subscribe(() => { 
            this.alert.success('Approved'); 
            this.load(); 
        }, e => this.alert.error(this._errToString(e))); 
    }

  disapprove() { 
    const r = prompt('Reason?') ?? undefined; 
        this.sr.disapprove(this.id, r)
        .pipe(first())
        .subscribe(() => { 
            this.alert.success('Disapproved'); this.load(); 
        }, e => this.alert.error(this._errToString(e))); 
  }
  
  fulfill() { 
    if (!confirm('Fulfill?')) return; 
        this.sr.fulfill(this.id)
        .pipe(first())
        .subscribe(() => { 
            this.alert.success('Fulfilled'); 
            this.load(); 
        }, e => this.alert.error(this._errToString(e))); 
  }

  isAdmin() { return this.account?.role === 'superAdmin' || this.account?.role === 'admin'; }
  isStockroom() { return this.account?.role === 'stockroomAdmin' || this.account?.role === 'superAdmin'; }

  goBack() { this.router.navigate(['/req-stock']); }

  // ---------------- helpers for displaying requestedItem ----------------

  private _stringify(val: any): string {
    if (val === null || typeof val === 'undefined') return 'â';
    if (typeof val === 'string' || typeof val === 'number' || typeof val === 'boolean') return String(val);
    if (Array.isArray(val)) return val.map(v => this._stringify(v)).join(', ');
    try { return JSON.stringify(val, null, 0); } catch { return String(val); }
  }

  getRequestedItemDisplayRows(ri?: RequestedItem | null): Array<{ label: string; value: string | number | null }> {
    if (!ri) return [];

    const rows: Array<{ label: string; value: any }> = [];

    if (ri.kind === 'inventory' && ri.inventory) {
      const inv: any = ri.inventory;

      // Apparel common fields
      if (ri.type === 'apparel') {
        rows.push({ label: 'Apparel Name', value: inv.apparelName ?? inv.name ?? inv.title ?? this._stringify(inv.id) });
        rows.push({ label: 'Apparel Level', value: inv.apparelLevel ?? 'â' });
        rows.push({ label: 'Apparel Type', value: inv.apparelType ?? 'â' });
        rows.push({ label: 'Apparel For', value: inv.apparelFor ?? 'â' });
        rows.push({ label: 'Apparel Size', value: inv.apparelSize ?? 'â' });
        rows.push({ label: 'Inventory ID', value: inv.apparelInventoryId ?? inv.id ?? 'â' });
      }
      // Supply common fields
      else if (ri.type === 'supply') {
        rows.push({ label: 'Supply Name', value: inv.supplyName ?? inv.name ?? this._stringify(inv.id) });
        rows.push({ label: 'Measure', value: inv.supplyMeasure ?? 'â' });
        rows.push({ label: 'Inventory ID', value: inv.adminSupplyInventoryId ?? inv.id ?? 'â' });
      }
      // GenItem common fields
      else if (ri.type === 'genitem') {
        rows.push({ label: 'GenItem Name', value: inv.genItemName ?? inv.name ?? this._stringify(inv.id) });
        rows.push({ label: 'GenItem Size', value: inv.genItemSize ?? 'â' });
        rows.push({ label: 'GenItem Type', value: inv.genItemType ?? 'â' });
        rows.push({ label: 'Inventory ID', value: inv.genItemInventoryId ?? inv.id ?? 'â' });
      } else {
        // unknown inventory type: show id & name-like fields
        rows.push({ label: 'Inventory ID', value: inv.id ?? 'â' });
        rows.push({ label: 'Name', value: inv.name ?? inv.title ?? 'â' });
      }

      // common inventory fields
      rows.push({ label: 'Room ID', value: inv.roomId ?? inv.room_id ?? 'â' });
      rows.push({ label: 'Total Quantity', value: inv.totalQuantity ?? inv.supplyQuantity ?? inv.quantity ?? 'â' });

      // show any extra keys not already shown
      const shown = new Set(rows.map(r => this._normalizeLabelKey(r.label)));
      Object.keys(inv || {}).forEach(k => {
        const keyLabel = this._niceLabel(k);
        if (!shown.has(this._normalizeLabelKey(keyLabel))) {
          rows.push({ label: keyLabel, value: this._stringify(inv[k]) });
          shown.add(this._normalizeLabelKey(keyLabel));
        }
      });

      return rows;
    }

    // -- unit record --
    if (ri.kind === 'unit' && ri.unit) {
      const unit: any = ri.unit;
      rows.push({ label: 'Unit ID', value: unit.id ?? unit.apparelId ?? 'â' });
      rows.push({ label: 'Status', value: unit.status ?? 'â' });
      rows.push({ label: 'Room ID', value: unit.roomId ?? 'â' });
      rows.push({ label: 'Parent Inventory FK', value:
        unit.apparelInventoryId ?? unit.adminSupplyInventoryId ?? unit.genItemInventoryId ?? 'â' });

      // parent inventory summary (if available)
      if (ri.inventory) {
        rows.push({ label: '--- Parent Inventory ---', value: '---' });
        const inv = ri.inventory as any;
        rows.push({ label: 'Inventory ID', value: inv.id ?? inv.apparelInventoryId ?? inv.adminSupplyInventoryId ?? inv.genItemInventoryId ?? 'â' });
        rows.push({ label: 'Inventory Name', value: inv.apparelName ?? inv.supplyName ?? inv.genItemName ?? inv.name ?? 'â' });
        rows.push({ label: 'Inventory Qty', value: inv.totalQuantity ?? inv.supplyQuantity ?? inv.quantity ?? 'â' });
      }

      // show other unit keys
      const shownU = new Set(['unit id','status','room id','parent inventory fk']);
      Object.keys(unit || {}).forEach(k => {
        const keyLabel = this._niceLabel(k);
        if (!shownU.has(this._normalizeLabelKey(keyLabel))) {
          rows.push({ label: keyLabel, value: this._stringify(unit[k]) });
          shownU.add(this._normalizeLabelKey(keyLabel));
        }
      });

      return rows;
    }

    // unknown kind: show raw fields
    if (ri.inventory || ri.unit) {
      const target = ri.inventory || ri.unit;
      Object.keys(target || {}).forEach(k => {
        rows.push({ label: this._niceLabel(k), value: this._stringify((target as any)[k]) });
      });
      return rows;
    }

    // fallback
    rows.push({ label: 'Type', value: ri.type ?? 'â' });
    rows.push({ label: 'Kind', value: ri.kind ?? 'â' });
    return rows;
  }

  private _normalizeLabelKey(s: string) {
    return String(s || '').toLowerCase().replace(/\s+/g, '');
  }

  private _niceLabel(k: string) {
    if (!k) return k;
    // convert camelCase / snake_case to Title Case
    const spaced = k.replace(/([a-z])([A-Z])/g, '$1 $2').replace(/[_\-]+/g, ' ');
    return spaced.split(' ').map(p => p[0]?.toUpperCase() + p.slice(1)).join(' ');
  }
}


================================================================================
File: src\app\room\add-edit\add-edit-routing.module.ts
Size: 446 B
================================================================================

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { RoomAddEditComponent } from './room.add-edit.component';

const routes: Routes = [
  { path: 'add', component: RoomAddEditComponent },
  { path: 'edit/:id', component: RoomAddEditComponent },
];

@NgModule({
    imports: [RouterModule.forChild(routes)],
    exports: [RouterModule]
})
export class AddEditRoutingModule { }


================================================================================
File: src\app\room\add-edit\list.module.ts
Size: 607 B
================================================================================

import { NgModule } from '@angular/core';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';

import { AddEditRoutingModule } from './add-edit-routing.module';
import { RoomAddEditComponent } from './room.add-edit.component';

@NgModule({
    imports: [
        CommonModule,
        AddEditRoutingModule,
        ReactiveFormsModule,
        FormsModule,
        RouterModule
    ],
    declarations: [
        RoomAddEditComponent,
    ]
})
export class AddEditModule { }


================================================================================
File: src\app\room\add-edit\room.add-edit.component.html
Size: 7.88 kB
================================================================================

<!-- <h1>{{title}}</h1> -->
<!-- <form *ngIf="!loading" [formGroup]="form" (ngSubmit)="onSubmit()">
    <div class="row">
        <div class="mb-3 col-2">
            <label class="form-label">Title</label>
            <select formControlName="title" class="form-select" [ngClass]="{ 'is-invalid': submitted && f.title.errors }">
                <option value=""></option>
                <option value="Mr">Mr</option>
                <option value="Mrs">Mrs</option>
                <option value="Miss">Miss</option>
                <option value="Ms">Ms</option>
            </select>
            <div *ngIf="submitted && f.title.errors" class="invalid-feedback">
                <div *ngIf="f.title.errors.required">Title is required</div>
            </div>
        </div>
        <div class="mb-3 col-5">
            <label class="form-label">First Name</label>
            <input type="text" formControlName="firstName" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.firstName.errors }" />
            <div *ngIf="submitted && f.firstName.errors" class="invalid-feedback">
                <div *ngIf="f.firstName.errors.required">First Name is required</div>
            </div>
        </div>
        <div class="mb-3 col-5">
            <label class="form-label">Last Name</label>
            <input type="text" formControlName="lastName" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.lastName.errors }" />
            <div *ngIf="submitted && f.lastName.errors" class="invalid-feedback">
                <div *ngIf="f.lastName.errors.required">Last Name is required</div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="mb-3 col-7">
            <label class="form-label">Email</label>
            <input type="text" formControlName="email" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.email.errors }" />
            <div *ngIf="submitted && f.email.errors" class="invalid-feedback">
                <div *ngIf="f.email.errors.required">Email is required</div>
                <div *ngIf="f.email.errors.email">Email must be a valid email address</div>
            </div>
        </div>
        <div class="mb-3 col-5">
            <label class="form-label">Role</label>
            <select formControlName="role" class="form-select" [ngClass]="{ 'is-invalid': submitted && f.role.errors }">
                <option value=""></option>
                <option value="User">User</option>
                <option value="Admin">Admin</option>
            </select>
            <div *ngIf="submitted && f.role.errors" class="invalid-feedback">
                <div *ngIf="f.role.errors.required">Role is required</div>
            </div>
        </div>
    </div>
    <!-- <div *ngIf="AccountId">
        <h3 class="pt-3">Change Password</h3>
        <p>Leave blank to keep the same password</p>
    </div> -->
    <!-- <div class="row">
        <div class="mb-3 col">
            <label class="form-label">Password</label>
            <input type="password" formControlName="password" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.password.errors }" />
            <div *ngIf="submitted && f.password.errors" class="invalid-feedback">
                <div *ngIf="f.password.errors.required">Password is required</div>
                <div *ngIf="f.password.errors.minlength">Password must be at least 6 characters</div>
            </div>
        </div>
        <div class="mb-3 col">
            <label class="form-label">Confirm Password</label>
            <input type="password" formControlName="confirmPassword" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.confirmPassword.errors }" />
            <div *ngIf="submitted && f.confirmPassword.errors" class="invalid-feedback">
                <div *ngIf="f.confirmPassword.errors.required">Confirm Password is required</div>
                <div *ngIf="f.confirmPassword.errors.mustMatch">Passwords must match</div>
            </div>
        </div>
    </div>
    <div class="mb-3">
        <button [disabled]="submitting" class="btn btn-primary">
            <span *ngIf="submitting" class="spinner-border spinner-border-sm me-1"></span>
            Save
        </button>
        <a routerLink="/admin/accounts" class="btn btn-link">Cancel</a>
    </div>
</form>  -->
<!-- <div *ngIf="loading" class="text-center m-5">
    <span class="spinner-border spinner-border-lg align-center"></span>
</div> -->

<!-- room.add-edit.component.html (full form skeleton) -->
<h1>{{ title }}</h1>

<!-- IMPORTANT: (ngSubmit) on the form + [formGroup] binding -->
<form *ngIf="!loading" [formGroup]="form" (ngSubmit)="onSubmit()">
  <div class="row">
    <div class="mb-3 col-6">
      <label class="form-label">Room Name</label>
      <input class="form-control" formControlName="roomName" placeholder="e.g. Stockroom A" />
      <div *ngIf="submitted && f.roomName.errors" class="invalid-feedback d-block">
        <div *ngIf="f.roomName.errors.required">Room name is required</div>
      </div>
    </div>

    <div class="mb-3 col-6">
      <label class="form-label">Floor</label>
      <input class="form-control" formControlName="roomFloor" placeholder="e.g. 2nd Floor" />
      <div *ngIf="submitted && f.roomFloor.errors" class="invalid-feedback d-block">
        <div *ngIf="f.roomFloor.errors.required">Floor is required</div>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="mb-3 col-4">
      <label class="form-label">Room Type</label>
      <select class="form-select" formControlName="roomType">
        <option value="classroom">Classroom</option>
        <option value="office">Office</option>
        <option value="stockroom">Stockroom</option>
        <option value="subStockroom">Sub Stockroom</option>
      </select>
    </div>

    <div class="mb-3 col-4" *ngIf="showStockroomType">
      <label class="form-label">Stockroom Type</label>
      <select class="form-select" formControlName="stockroomType">
        <option [ngValue]="null">-- Select stockroom type --</option>
        <option value="apparel">Apparel</option>
        <option value="supply">Supply</option>
        <option value="it">IT</option>
        <option value="maintenance">Maintenance</option>
      </select>
      <div *ngIf="submitted && f.stockroomType.errors" class="invalid-feedback d-block">
        <div *ngIf="f.stockroomType.errors.required">Stockroom type is required when room is a stockroom</div>
      </div>
    </div>

    <div class="mb-3 col-4">
      <label class="form-label">Room In Charge</label>
      <select class="form-select" formControlName="roomInCharge">
        <option [ngValue]="null">-- Select --</option>
        <option *ngFor="let a of inChargeOptions" [ngValue]="a.accountId || a.AccountId || a.id">
          {{ a.firstName ? (a.firstName + ' ' + (a.lastName||'')) : (a.name || a.username) }}
        </option>
      </select>
      <div *ngIf="submitted && f.roomInCharge.errors" class="invalid-feedback d-block">
        <div *ngIf="f.roomInCharge.errors.required">Room in charge is required</div>
      </div>
    </div>
  </div>

  <div class="mb-3">
    <!-- type="submit" is required for ngSubmit to trigger.
         We also add a (click) call as a fallback for debugging -->
    <button type="submit" (click)="onSubmit()" [disabled]="submitting" class="btn btn-primary">
      <span *ngIf="submitting" class="spinner-border spinner-border-sm me-1"></span>
      Save
    </button>
    <a routerLink="/room" class="btn btn-link">Cancel</a>
  </div>
</form>

<div *ngIf="loading" class="text-center m-5">
  <span class="spinner-border spinner-border-lg align-center"></span>
</div>


================================================================================
File: src\app\room\add-edit\room.add-edit.component.ts
Size: 8.71 kB
================================================================================

import { Component, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';
import { Subject } from 'rxjs';
import { first, takeUntil } from 'rxjs/operators';

import { RoomService, AlertService, AccountService }            from '@app/_services';

@Component({ templateUrl: 'room.add-edit.component.html' })
export class RoomAddEditComponent implements OnInit, OnDestroy {
  form!: FormGroup;
  roomId?: number;
  title = 'Create Room';
  loading = false;
  submitting = false;
  submitted = false;
  inChargeOptions: any[] = [];
  showStockroomType = false;

  private destroy$ = new Subject<void>();

  constructor(
    private formBuilder: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private RoomService: RoomService,
    private accountService: AccountService,
    private alertService: AlertService
  ) {}

  ngOnInit() {
    this.roomId = this.route.snapshot.params['id'];

    this.form = this.formBuilder.group({
      roomName:       ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],
      roomFloor:      ['', [Validators.required]],
      roomType:       ['', Validators.required],
      stockroomType:  [null], // will become required conditionally
      roomInCharge:   [null, [Validators.required]]
    });

    // Ensure ngSubmit fires: formGroup exists and controls are set
    this.form.get('roomType')!.valueChanges
      .pipe(takeUntil(this.destroy$))
      .subscribe((val: string) => this.toggleStockroomTypeControl(val));

    // Load in-charge options (optional)
    this.accountService.getAll().pipe(first()).subscribe({
      next: (accounts: any[]) => this.inChargeOptions = accounts || [],
      error: () => this.inChargeOptions = []
    });

    if (this.roomId) {
      this.title = 'Edit Room';
      this.loading = true;
      this.RoomService.getRoomById(this.roomId)
        .pipe(first())
        .subscribe({
          next: (room) => {
            this.form.patchValue({
              roomName: room.roomName,
              roomFloor: room.roomFloor,
              roomType: room.roomType,
              stockroomType: room.stockroomType,
              roomInCharge: room.roomInCharge
            });
            this.toggleStockroomTypeControl(room.roomType);
            this.loading = false;
          },
          error: () => this.loading = false
        });
    } else {
      // initial toggle for default roomType
      this.toggleStockroomTypeControl(this.form.get('roomType')!.value);
    }
  }

  private toggleStockroomTypeControl(roomType: string) {
    const ctrl: AbstractControl | null = this.form.get('stockroomType');
    if (!ctrl) return;
    if (roomType === 'stockroom' || roomType === 'subStockroom') {
      this.showStockroomType = true;
      ctrl.setValidators([Validators.required]);
    } else {
      this.showStockroomType = false;
      ctrl.clearValidators();
      ctrl.setValue(null);
    }
    ctrl.updateValueAndValidity();
  }

  get f() { return this.form.controls; }

  onSubmit() {
    console.log('[RoomAddEdit] onSubmit called, submitting=', this.submitting, 'form.invalid=', this.form.invalid, 'form.value=', this.form.value);
    this.submitted = true;
    this.alertService.clear();

    // if invalid, show errors but don't proceed
    if (this.form.invalid) {
      console.log('[RoomAddEdit] form invalid -> abort submit', this.form.errors, this.form);
      return;
    }

    this.submitting = true;

    const payload = this.form.value;
    const obs$ = this.roomId ? this.RoomService.updateRoom(this.roomId, payload) : this.RoomService.createRoom(payload);

    obs$.pipe(first()).subscribe({
      next: () => {
        this.alertService.success(this.roomId ? 'Room updated' : 'Room created', { keepAfterRouteChange: true });
        this.router.navigateByUrl('/room');
      },
      error: err => {
        console.error('[RoomAddEdit] save error:', err);
        this.alertService.error(err);
        this.submitting = false;
      }
    });
  }

  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
}


================================================================================
File: src\app\room\inventory\admin-supply-inventory-list.component.html
Size: 1.02 kB
================================================================================

<div class="container py-2">
  <h4>Admin Supply Inventory (Room #{{ roomId }})</h4>

  <div *ngIf="loading">Loading...</div>

  <table *ngIf="!loading && inventory?.length" class="table table-sm">
    <thead>
      <button class="btn btn-primary btn-sm me-2" (click)="generateAllQr()">
        <i class="fa fa-qrcode"></i> Generate All (PDF)
      </button>
      <tr>
        <th>Name</th>
        <th>Measure</th>
        <th>Qty</th>
        <th>Status</th>
        <th>Updated</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let i of inventory">
        <td>{{ i.supplyName }}</td>
        <td>{{ i.supplyMeasure || '-' }}</td>
        <td>{{ i.totalQuantity || '-' }}</td>
        <td>{{ i.status || '-' }}</td>
        <td>{{ i.updatedAt ? (i.updatedAt | date:'short') : (i.createdAt | date:'short') }}</td>
      </tr>
    </tbody>
  </table>

  <div *ngIf="!loading && (!inventory || inventory.length === 0)">
    No admin supply inventory found.
  </div>
</div>


================================================================================
File: src\app\room\inventory\admin-supply-inventory-list.component.ts
Size: 3.81 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute }     from '@angular/router';
import { first }              from 'rxjs/operators';
import { RoomService, AlertService, QrService } from '@app/_services';

@Component({
  templateUrl: './admin-supply-inventory-list.component.html'
})
export class AdminSupplyInventoryListComponent implements OnInit {
  roomId = NaN;
  inventory: any[] = [];
  loading = false;

  constructor(
    private route: ActivatedRoute,
    private roomService: RoomService,
    private alert: AlertService,
    private qrService: QrService
  ) {}

  ngOnInit(): void {
    this.roomId = this.findRoomId(this.route);
    if (!Number.isFinite(this.roomId)) { this.alert.error('Invalid room id'); return; }
    this.loadInventory();
  }

  private findRoomId(route: ActivatedRoute): number {
    let r: ActivatedRoute | null = route;
    while (r) {
      const idParam = r.snapshot.paramMap.get('id');
      if (idParam) return +idParam;
      r = r.parent;
    }
    return NaN;
  }

  loadInventory() {
    this.loading = true;
    this.roomService.getAdminSupplyInventory(this.roomId).pipe(first()).subscribe({
      next: (res: any[]) => { this.inventory = res || []; this.loading = false; },
      error: (e) => { this.loading = false; this.alert.error(e); }
    });
  }

  // Small display helpers to keep the template clean
  qtyOf(item: any) {
    return item.totalQuantity ?? item.quantity ?? 0;
  }

  measureOf(item: any) {
    return item.supplyMeasure ?? item.measure ?? '';
  }

  generateAllQr() {
    if (!Number.isFinite(this.roomId)) { this.alert.error('Invalid room'); return; }
    // stockroomType for this list is 'supply' (example). Adjust for other inventory views.
    const stockroomType = 'supply'; // change to 'apparel' or 'genitem' where appropriate
  
    this.qrService.downloadAllPdf(stockroomType, this.roomId).pipe(first()).subscribe({
      next: (blob: Blob) => {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `qrcodes-${stockroomType}-room-${this.roomId}.pdf`;
        document.body.appendChild(a);
        a.click();
        a.remove();
        window.URL.revokeObjectURL(url);
        this.alert.success('PDF downloaded');
      },
      error: (err) => {
        console.error('generateAllQr error', err);
        const msg = err?.error?.message || err?.message || 'Failed to generate PDF';
        this.alert.error(msg);
      }
    });
  }

  downloadItemQr(i: any) {
    // determine correct stockroomType and id field for this view
    const stockroomType = 'supply'; // change as appropriate per list
    const inventoryId = i.adminSupplyInventoryId;
  
    this.qrService.getBatchQr(stockroomType, inventoryId).pipe(first()).subscribe({
      next: (blob: Blob) => {
        // download the blob
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `qr-${stockroomType}-${inventoryId}.png`;
        document.body.appendChild(a);
        a.click();
        a.remove();
        URL.revokeObjectURL(url);
  
        // Mark item as generated in UI
        i.qrStatus = true;
  
        // Optional: show confirmation and/or refresh from server to sync state
        this.alert.success('QR downloaded and marked generated');
  
        // OPTIONAL: if you prefer to get canonical value from server:
        // this.load(); // reload items from API
      },
      error: err => {
        const msg = err?.error?.message || err?.message || 'Failed to download QR';
        this.alert.error(msg);
      }
    });
  }
}


================================================================================
File: src\app\room\inventory\apparel-inventory-list.component.html
Size: 1.77 kB
================================================================================

<!-- src/app/room/inventory/apparel-inventory-list.component.html -->
<div class="container py-2">
  <h4>Apparel Inventory (Room #{{ roomId }})</h4>
  <div *ngIf="loading">Loading...</div>
  <table *ngIf="!loading && inventory?.length" class="table table-sm">
    <thead>
      <button class="btn btn-primary btn-sm me-2" (click)="generateAllQr()">
        <i class="fa fa-qrcode"></i> Generate All (PDF)
      </button>
      <tr>
        <th>Name</th>
        <th>Level</th>
        <th>Type</th>
        <th>For</th>
        <th>Size</th>
        <th>Qty</th>
        <th>Stock Status</th>
        <th>Date</th>
        <th>Generate Status</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let i of inventory">
        <td>{{ i.apparelName }}</td>
        <td>{{ i.apparelLevel || '-' }}</td>
        <td>{{ i.apparelType || '-' }}</td>
        <td>{{ i.apparelFor || '-' }}</td>
        <td>{{ i.apparelSize || '-' }}</td>
        <td>{{ i.totalQuantity || i.quantity || '-' }}</td>
        <td>{{ i.status || '-' }}</td>
        <td>{{ i.createdAt }}</td>
        <td *ngIf="i.qrStatus">generated</td>
        <td *ngIf="!i.qrStatus">-</td>
        <td>
        
          <!-- Generate button: hide or change text if already generated -->
          <button class="btn btn-outline-secondary btn-sm"
                  (click)="downloadItemQr(i)"
                  [disabled]="i.qrStatus">
            <ng-container *ngIf="!i.qrStatus">Generate QR</ng-container>
            <ng-container *ngIf="i.qrStatus">Downloaded</ng-container>
          </button>
        </td>
      </tr>
    </tbody>
  </table>

  <div *ngIf="!loading && (!inventory || inventory.length === 0)">No inventory found.</div>
</div>


================================================================================
File: src\app\room\inventory\apparel-inventory-list.component.ts
Size: 3.57 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute }     from '@angular/router';
import { first }              from 'rxjs/operators';
import { RoomService, AlertService, QrService  } from '@app/_services';

@Component({
  templateUrl: './apparel-inventory-list.component.html'
})
export class ApparelInventoryListComponent implements OnInit {
  roomId = NaN;
  inventory: any[] = [];
  loading = false;

  constructor(
    private route: ActivatedRoute,
    private roomService: RoomService,
    private alert: AlertService,
    private qrService: QrService
  ) {}

  ngOnInit(): void {
    this.roomId = this.findRoomId(this.route);
    if (!Number.isFinite(this.roomId)) { this.alert.error('Invalid room id'); return; }
    this.loadInventory();
  }

  private findRoomId(route: ActivatedRoute): number {
    let r: ActivatedRoute | null = route;
    while (r) {
      const idParam = r.snapshot.paramMap.get('id');
      if (idParam) return +idParam;
      r = r.parent;
    }
    return NaN;
  }

  loadInventory() {
    this.loading = true;
    this.roomService.getApparelInventory(this.roomId).pipe(first()).subscribe({
      next: (res: any[]) => { this.inventory = res || []; this.loading = false; },
      error: (e) => { this.loading = false; this.alert.error(e); }
    });
  }

  generateAllQr() {
    if (!Number.isFinite(this.roomId)) { this.alert.error('Invalid room'); return; }
    // stockroomType for this list is 'supply' (example). Adjust for other inventory views.
    const stockroomType = 'apparel'; // change to 'apparel' or 'genitem' where appropriate
  
    this.qrService.downloadAllPdf(stockroomType, this.roomId).pipe(first()).subscribe({
      next: (blob: Blob) => {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `qrcodes-${stockroomType}-room-${this.roomId}.pdf`;
        document.body.appendChild(a);
        a.click();
        a.remove();
        window.URL.revokeObjectURL(url);
        this.alert.success('PDF downloaded');
      },
      error: (err) => {
        console.error('generateAllQr error', err);
        const msg = err?.error?.message || err?.message || 'Failed to generate PDF';
        this.alert.error(msg);
      }
    });
  }

  downloadItemQr(i: any) {
    // determine correct stockroomType and id field for this view
    const stockroomType = 'apparel'; // change as appropriate per list
    const inventoryId = i.apparelInventoryId;
  
    this.qrService.getBatchQr(stockroomType, inventoryId).pipe(first()).subscribe({
      next: (blob: Blob) => {
        // download the blob
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `qr-${stockroomType}-${inventoryId}.png`;
        document.body.appendChild(a);
        a.click();
        a.remove();
        URL.revokeObjectURL(url);
  
        // Mark item as generated in UI
        i.qrStatus = true;
  
        // Optional: show confirmation and/or refresh from server to sync state
        this.alert.success('QR downloaded and marked generated');
  
        // OPTIONAL: if you prefer to get canonical value from server:
        // this.load(); // reload items from API
      },
      error: err => {
        const msg = err?.error?.message || err?.message || 'Failed to download QR';
        this.alert.error(msg);
      }
    });
  }
}

================================================================================
File: src\app\room\inventory\gen-item-inventory-list.component.html
Size: 1.13 kB
================================================================================

<div class="container py-2">
    <h4>General Items Inventory (Room #{{ roomId }})</h4>
  
    <div *ngIf="loading">Loading...</div>
  
    <table *ngIf="!loading && inventory?.length" class="table table-sm">
      <thead>
        <button class="btn btn-primary btn-sm me-2" (click)="generateAllQr()">
          <i class="fa fa-qrcode"></i> Generate All (PDF)
        </button>
        <tr>
          <th>Name</th>
          <th>Type</th>
          <th>Size</th>
          <th>Qty</th>
          <th>Status</th>
          <th>Added</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let i of inventory">
          <td>{{ i.genItemName || i.name }}</td>
          <td>{{ i.genItemType || i.type || '-' }}</td>
          <td>{{ i.genItemSize || i.size || '-' }}</td>
          <td>{{ displayQty(i) }}</td>
          <td>{{ i.status || '-' }}</td>
          <td>{{ i.createdAt ? (i.createdAt | date:'short') : '-' }}</td>
        </tr>
      </tbody>
    </table>
  
    <div *ngIf="!loading && (!inventory || inventory.length === 0)">
      No general items found.
    </div>
  </div>

================================================================================
File: src\app\room\inventory\gen-item-inventory-list.component.ts
Size: 3.66 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute }     from '@angular/router';
import { first }              from 'rxjs/operators';
import { RoomService, AlertService, QrService } from '@app/_services';

@Component({
  templateUrl: './gen-item-inventory-list.component.html'
})
export class GenItemInventoryListComponent implements OnInit {
  roomId = NaN;
  inventory: any[] = [];
  loading = false;

  constructor(
    private route: ActivatedRoute,
    private roomService: RoomService,
    private alert: AlertService,
    private qrService: QrService
  ) {}

  ngOnInit(): void {
    this.roomId = this.findRoomId(this.route);
    if (!Number.isFinite(this.roomId)) { this.alert.error('Invalid room id'); return; }
    this.loadInventory();
  }

  private findRoomId(route: ActivatedRoute): number {
    let r: ActivatedRoute | null = route;
    while (r) {
      const idParam = r.snapshot.paramMap.get('id');
      if (idParam) return +idParam;
      r = r.parent;
    }
    return NaN;
  }

  loadInventory() {
    this.loading = true;
    this.roomService.getGenItemInventory(this.roomId).pipe(first()).subscribe({
      next: (res: any[]) => { this.inventory = res || []; this.loading = false; },
      error: (e) => { this.loading = false; this.alert.error(e); }
    });
  }

  displayQty(it: any) {
    return it.totalQuantity ?? it.quantity ?? '-';
  }

  generateAllQr() {
    if (!Number.isFinite(this.roomId)) { this.alert.error('Invalid room'); return; }
    // stockroomType for this list is 'supply' (example). Adjust for other inventory views.
    const stockroomType = 'it' || 'maintenance'; // change to 'apparel' or 'genitem' where appropriate
  
    this.qrService.downloadAllPdf(stockroomType, this.roomId).pipe(first()).subscribe({
      next: (blob: Blob) => {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `qrcodes-${stockroomType}-room-${this.roomId}.pdf`;
        document.body.appendChild(a);
        a.click();
        a.remove();
        window.URL.revokeObjectURL(url);
        this.alert.success('PDF downloaded');
      },
      error: (err) => {
        console.error('generateAllQr error', err);
        const msg = err?.error?.message || err?.message || 'Failed to generate PDF';
        this.alert.error(msg);
      }
    });
  }

  downloadItemQr(i: any) {
    // determine correct stockroomType and id field for this view
    const stockroomType = 'general'; // change as appropriate per list
    const inventoryId = i.genItemInventoryId;
  
    this.qrService.getBatchQr(stockroomType, inventoryId).pipe(first()).subscribe({
      next: (blob: Blob) => {
        // download the blob
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `qr-${stockroomType}-${inventoryId}.png`;
        document.body.appendChild(a);
        a.click();
        a.remove();
        URL.revokeObjectURL(url);
  
        // Mark item as generated in UI
        i.qrStatus = true;
  
        // Optional: show confirmation and/or refresh from server to sync state
        this.alert.success('QR downloaded and marked generated');
  
        // OPTIONAL: if you prefer to get canonical value from server:
        // this.load(); // reload items from API
      },
      error: err => {
        const msg = err?.error?.message || err?.message || 'Failed to download QR';
        this.alert.error(msg);
      }
    });
  }
}


================================================================================
File: src\app\room\inventory\inventory-routing.module.ts
Size: 1.94 kB
================================================================================

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

import { LayoutComponent } from './layout.component';
import { ApparelInventoryListComponent } from './apparel-inventory-list.component';
import { AdminSupplyInventoryListComponent } from './admin-supply-inventory-list.component';
import { GenItemInventoryListComponent } from './gen-item-inventory-list.component';

const routes: Routes = [
  {
    path: '',
    component: LayoutComponent,
    children: [
      { path: 'apparel', component: ApparelInventoryListComponent },
      { path: 'supply',  component: AdminSupplyInventoryListComponent },
      { path: 'general', component: GenItemInventoryListComponent },
    ]
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class InventoryRoutingModule {}

================================================================================
File: src\app\room\inventory\inventory.module.ts
Size: 987 B
================================================================================

// src/app/room/inventory/inventory.module.ts
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';

import { InventoryRoutingModule } from './inventory-routing.module';
import { LayoutComponent } from './layout.component';
import { ApparelInventoryListComponent } from './apparel-inventory-list.component';
import { AdminSupplyInventoryListComponent } from './admin-supply-inventory-list.component';
import { GenItemInventoryListComponent } from './gen-item-inventory-list.component';

@NgModule({
  imports: [
    CommonModule,
    InventoryRoutingModule,
    ReactiveFormsModule,
    FormsModule,
    RouterModule
  ],
  declarations: [
    LayoutComponent,
    ApparelInventoryListComponent,
    AdminSupplyInventoryListComponent,
    GenItemInventoryListComponent
  ]
})
export class InventoryModule {}


================================================================================
File: src\app\room\inventory\layout.component.html
Size: 122 B
================================================================================

<div class="receives-feature p-2">
  <!-- child route content appears here -->
  <router-outlet></router-outlet>
</div>

================================================================================
File: src\app\room\inventory\layout.component.ts
Size: 176 B
================================================================================

import { Component } from '@angular/core';
@Component({ 
    selector: 'app-inventory-layout',
    templateUrl: 'layout.component.html' 
})
export class LayoutComponent {}

================================================================================
File: src\app\room\layout.component.html
Size: 124 B
================================================================================

ï»¿<div class="p-4">
    <!-- <div class="container"> -->
        <router-outlet></router-outlet>
    <!-- </div> -->
</div>

================================================================================
File: src\app\room\layout.component.ts
Size: 132 B
================================================================================

ï»¿import { Component } from '@angular/core';

@Component({ templateUrl: 'layout.component.html' })
export class LayoutComponent { }

================================================================================
File: src\app\room\receive\admin-supply\receive.component.html
Size: 2.18 kB
================================================================================

<!-- src/app/room/receive/apparel-receive.component.html -->
<div class="container py-2">
  <h4>Receive Admin Supply (Room #{{ roomId }})</h4>

  <form [formGroup]="receiveForm" (ngSubmit)="submit()">
    <div class="mb-2">
      <label class="form-label">Name</label>
      <input class="form-control" formControlName="supplyName" />
      <div *ngIf="receiveForm.get('supplyName')?.touched && receiveForm.get('supplyName')?.invalid" class="text-danger small">Name is required</div>
    </div>

    <div class="row">
      <div class="col-md-3">
        <label class="form-label">Quantity</label>
        <input type="number" class="form-control" formControlName="supplyQuantity" />
      </div>

      <div class="col-md-3 mb-2">
        <label class="form-label">Measure</label>
        <select class="form-select" formControlName="apparelType">
          <option *ngFor="let o of supplyMeasures" [value]="o.value">{{ o.label }}</option>
        </select>
      </div>
    </div>
    <div class="mb-2 row">
      <div class="col-md-4">
        <label class="form-label">Received From</label>
        <input class="form-control" formControlName="receivedFrom" />
      </div>

      <!-- <div class="col-md-4">
        <label class="form-label">Received By (accountId)</label>
        <input type="number" class="form-control" formControlName="receivedBy" />
      </div> -->
      <div class="mb-2">
        <label class="form-label">Received By</label>
        <!-- <input type="number" formControlName="receivedBy" class="form-control" readonly /> -->
        <ng-container *ngIf="currentUserName">
          <input class="form-control" [value]="currentUserName" readonly />
          <!-- Hidden field: still binds numeric id into the form -->
          <input type="hidden" formControlName="receivedBy" />
        </ng-container>
      </div>
    </div>

    <div class="mb-2">
      <label class="form-label">Notes</label>
      <textarea class="form-control" formControlName="notes"></textarea>
    </div>

    <button class="btn btn-primary" type="submit" [disabled]="submitting">Receive</button>
  </form>
</div>


================================================================================
File: src\app\room\receive\admin-supply\receive.component.ts
Size: 4.54 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { first } from 'rxjs/operators';
import { RoomService, AlertService } from '@app/_services';
import { AccountService } from '@app/_services';

type Option = { value: string, label: string };

@Component({
  templateUrl: './receive.component.html'
})
export class AdminSupplyReceiveComponent implements OnInit {
  roomId = NaN;
  receiveForm!: FormGroup;
  submitting = false;

  currentUserName: string | null = null;
  currentUserId: number | null = null;

  // ENUM-like option lists â replace values with the exact enum values backend expects

  supplyMeasures: Option[] = [
    { value: 'pc',      label: 'pc/s' },
    { value: 'box',     label: 'box/s' },
    { value: 'bottle',  label: 'bottle/s' },
    { value: 'pack',    label: 'pack/s' },
    { value: 'ream',    label: 'ream/s' },
    { value: 'meter',   label: 'meter/s' },
    { value: 'roll',    label: 'roll/s' },
    { value: 'gallon',  label: 'gallon/s' },
    { value: 'unit',    label: 'unit/s' }
  ];

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private roomService: RoomService,
    private alert: AlertService,
    private accountService: AccountService
  ) {}

  ngOnInit(): void {
    this.roomId = this.findRoomId(this.route);
    this.buildForm();
    this.tryFillCurrentUser();
  }

  private findRoomId(route: ActivatedRoute): number {
    let r: ActivatedRoute | null = route;
    while (r) {
      const idParam = r.snapshot.paramMap.get('id');
      if (idParam) return +idParam;
      r = r.parent;
    }
    return NaN;
  }

  private tryFillCurrentUser() {
    let user: any = null;

    // 1) Try to get user from injected accountService (if provided)
    if (this.accountService) {
      const svc: any = this.accountService as any;
      // try several common property names used by different templates
      user = svc?.currentUserValue || svc?.userValue || svc?.value || svc?.getValue?.();
      // also support an observable getter (less likely in this simple snippet)
      if (!user && typeof svc?.getCurrentUser === 'function') {
        user = svc.getCurrentUser();
      }
    }

    // 2) Fallback: try localStorage (older/simple auth implementations)
    if (!user) {
      try {
        const raw = localStorage.getItem('user') || localStorage.getItem('currentUser') || localStorage.getItem('account');
        if (raw) user = JSON.parse(raw);
      } catch (err) {
        // silent fallback
      }
    }

    // If we found a user, normalize id & name
    if (user) {
      // customize these property names if your user object uses different keys
      const id = user?.id ?? user?.accountId ?? user?.userId ?? user?.uid;
      const name =
        user?.fullName ??
        (user?.firstName && user?.lastName ? `${user.firstName} ${user.lastName}` : null) ??
        user?.name ??
        user?.username ??
        user?.email ??
        null;

      if (id) {
        this.currentUserId = +id;
        // patch the numeric id into the form control so backend gets it
        this.receiveForm.patchValue({ receivedBy: this.currentUserId });
      }
      if (name) {
        this.currentUserName = name;
      }
    }
  }

  private buildForm() {
    //const currentUserId = this.getCurrentUserId;
    this.receiveForm = this.fb.group({
      supplyName:       ['', Validators.required],
      supplyQuantity:   [1, [Validators.required, Validators.min(1)]],
      supplyMeasure:    [this.supplyMeasures[0].value, Validators.required],
      receivedFrom:     ['', Validators.required],
      receivedBy:       [null, Validators.required],
      notes:            ['']
    });
  }

  submit() {
    if (this.receiveForm.invalid) { this.alert.error('Please fill required fields'); return; }
    this.submitting = true;
    const payload = this.receiveForm.value;

    this.roomService.receiveItem(this.roomId, payload).pipe(first()).subscribe({
      next: () => {
        this.alert.success('Received admin supply successfully');
        this.submitting = false;
        this.router.navigate(['../', '..', 'inventory', 'supply'], { relativeTo: this.route });
      },
      error: (e) => { this.alert.error(e); this.submitting = false; }
    });
  }
}


================================================================================
File: src\app\room\receive\admin-supply\received-list.component.html
Size: 1.26 kB
================================================================================

<div class="container py-2">
    <h4>Received Apparel Batches (Room #{{ roomId }})</h4>
  
    <div *ngIf="loading">Loading...</div>
  
    <table *ngIf="!loading && batches?.length" class="table table-sm">
      <thead>
        <tr>
          <th>Batch ID</th>
          <th>Item</th>
          <th>Qty</th>
          <th>Measure</th>
          <th>From</th>
          <th>Received By</th>
          <th>Date</th>
          <th>Notes</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let b of batches">
          <td>{{ b.receiveAdminSupplyId ?? '-' }}</td>
          <td>{{ b.supplyName || '-' }}</td>
          <td>{{ b.supplyQuantity ?? '-' }}</td>
          <td>{{ b.supplyMeasure ?? '-' }}/s</td>
          <td>{{ b.receivedFrom || '-' }}</td>
          <td>
            <!-- show name when available, otherwise id -->
            {{ b.receivedBy }}
          </td>
          <td>{{ b.createdAt ? (b.createdAt | date:'short') : (b.receivedAt ? (b.receivedAt | date:'short') : '-') }}</td>
          <td>{{ b.notes || '-' }}</td>
        </tr>
      </tbody>
    </table>
  
    <div *ngIf="!loading && (!batches || batches.length === 0)">
      No received apparel batches found.
    </div>
  </div>

================================================================================
File: src\app\room\receive\admin-supply\received-list.component.ts
Size: 1.29 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { first } from 'rxjs/operators';
import { RoomService, AlertService } from '@app/_services';

@Component({
  templateUrl: './received-list.component.html'
})
export class AdminSupplyReceivedListComponent implements OnInit {
  roomId = NaN;
  batches: any[] = [];
  loading = false;

  constructor(
    private route: ActivatedRoute,
    private roomService: RoomService,
    private alert: AlertService
  ) {}

  ngOnInit(): void {
    this.roomId = this.findRoomId(this.route);
    if (!Number.isFinite(this.roomId)) { this.alert.error('Invalid room id'); return; }
    this.loadBatches();
  }

  private findRoomId(route: ActivatedRoute): number {
    let r: ActivatedRoute | null = route;
    while (r) {
      const idParam = r.snapshot.paramMap.get('id');
      if (idParam) return +idParam;
      r = r.parent;
    }
    return NaN;
  }

  loadBatches() {
    this.loading = true;
    this.roomService.getReceivedBatchAdminSupply(this.roomId).pipe(first()).subscribe({
      next: (res: any[]) => { this.batches = res || []; this.loading = false; },
      error: (err) => { this.loading = false; this.alert.error(err); }
    });
  }
}

================================================================================
File: src\app\room\receive\apparel\receive.component.html
Size: 3.01 kB
================================================================================

<!-- src/app/room/receive/apparel-receive.component.html -->
<div class="container py-2">
  <h4>Receive Apparel (Room #{{ roomId }})</h4>

  <form [formGroup]="receiveForm" (ngSubmit)="submit()">
    <div class="mb-2">
      <label class="form-label">Name</label>
      <input class="form-control" formControlName="apparelName" />
      <div *ngIf="receiveForm.get('apparelName')?.touched && receiveForm.get('apparelName')?.invalid" class="text-danger small">Name is required</div>
    </div>

    <div class="row">
      <div class="col-md-3 mb-2">
        <label class="form-label">Level</label>
        <select class="form-select" formControlName="apparelLevel">
          <option *ngFor="let o of apparelLevels" [value]="o.value">{{ o.label }}</option>
        </select>
      </div>

      <div class="col-md-3 mb-2">
        <label class="form-label">Type</label>
        <select class="form-select" formControlName="apparelType">
          <option *ngFor="let o of apparelTypes" [value]="o.value">{{ o.label }}</option>
        </select>
      </div>

      <div class="col-md-3 mb-2">
        <label class="form-label">For</label>
        <select class="form-select" formControlName="apparelFor">
          <option *ngFor="let o of apparelForOptions" [value]="o.value">{{ o.label }}</option>
        </select>
      </div>

      <div class="col-md-3 mb-2">
        <label class="form-label">Size</label>
        <select class="form-select" formControlName="apparelSize">
          <option *ngFor="let o of apparelSizes" [value]="o.value">{{ o.label }}</option>
        </select>
      </div>
    </div>

    <div class="mb-2 row">
      <div class="col-md-3">
        <label class="form-label">Quantity</label>
        <input type="number" class="form-control" formControlName="apparelQuantity" />
      </div>

      <div class="col-md-4">
        <label class="form-label">Received From</label>
        <input class="form-control" formControlName="receivedFrom" />
      </div>

      <!-- <div class="col-md-4">
        <label class="form-label">Received By (accountId)</label>
        <input type="number" class="form-control" formControlName="receivedBy" />
      </div> -->
      <div class="mb-2">
        <label class="form-label">Received By</label>
        <!-- <input type="number" formControlName="receivedBy" class="form-control" readonly /> -->
        <ng-container *ngIf="currentUserName">
          <input class="form-control" [value]="currentUserName" readonly />
          <!-- Hidden field: still binds numeric id into the form -->
          <input type="hidden" formControlName="receivedBy" />
        </ng-container>
      </div>
    </div>

    <div class="mb-2">
      <label class="form-label">Notes</label>
      <textarea class="form-control" formControlName="notes"></textarea>
    </div>

    <button class="btn btn-primary" type="submit" [disabled]="submitting">Receive</button>
  </form>
</div>


================================================================================
File: src\app\room\receive\apparel\receive.component.ts
Size: 5.85 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { first } from 'rxjs/operators';
import { RoomService, AlertService } from '@app/_services';
import { AccountService } from '@app/_services';

type Option = { value: string, label: string };

@Component({
  templateUrl: './receive.component.html'
})
export class ApparelReceiveComponent implements OnInit {
  roomId = NaN;
  receiveForm!: FormGroup;
  submitting = false;

  currentUserName: string | null = null;
  currentUserId: number | null = null;

  // ENUM-like option lists â replace values with the exact enum values backend expects

  apparelLevels: Option[] = [
    { value: 'pre',       label: 'Pre-School' },
    { value: 'elem',      label: 'Elementary' },
    { value: '7',         label: 'Grade 7' },
    { value: '8',         label: 'Grade 8' },
    { value: '9',         label: 'Grade 9' },
    { value: '10',        label: 'Grade 10' },
    { value: 'hs',        label: 'Junior High Shool' },
    { value: 'sh',        label: 'Senior High School' },
    { value: 'it',        label: 'BSIT' },
    { value: 'educ',      label: 'EDUC' },
    { value: 'teachers',  label: 'Teachers' }
  ];

  apparelTypes: Option[] = [
    { value: 'uniform', label: 'Uniform' },
    { value: 'pe',      label: 'PE' }
  ];

  apparelForOptions: Option[] = [
    { value: 'boys',  label: 'Boys' },
    { value: 'girls', label: 'Girls' }
  ];

  apparelSizes: Option[] = [
    { value: '2',   label: '2' },
    { value: '4',   label: '4' },
    { value: '6',   label: '6' },
    { value: '8',   label: '8' },
    { value: '10',  label: '10' },
    { value: '12',  label: '12' },
    { value: '14',  label: '14' },
    { value: '16',  label: '16' },
    { value: '18',  label: '18' },
    { value: '20',  label: '20' },
    { value: 'xs',  label: 'XS' },
    { value: 's',   label: 'S' },
    { value: 'm',   label: 'M' },
    { value: 'l',   label: 'L' },
    { value: 'xl',  label: 'XL' },
    { value: '2xl', label: '2XL' },
    { value: '3xl', label: '3XL' }
  ];

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private roomService: RoomService,
    private alert: AlertService,
    private accountService: AccountService
  ) {}

  ngOnInit(): void {
    this.roomId = this.findRoomId(this.route);
    this.buildForm();
    this.tryFillCurrentUser();
  }

  private findRoomId(route: ActivatedRoute): number {
    let r: ActivatedRoute | null = route;
    while (r) {
      const idParam = r.snapshot.paramMap.get('id');
      if (idParam) return +idParam;
      r = r.parent;
    }
    return NaN;
  }

  private tryFillCurrentUser() {
    let user: any = null;

    // 1) Try to get user from injected accountService (if provided)
    if (this.accountService) {
      const svc: any = this.accountService as any;
      // try several common property names used by different templates
      user = svc?.currentUserValue || svc?.userValue || svc?.value || svc?.getValue?.();
      // also support an observable getter (less likely in this simple snippet)
      if (!user && typeof svc?.getCurrentUser === 'function') {
        user = svc.getCurrentUser();
      }
    }

    // 2) Fallback: try localStorage (older/simple auth implementations)
    if (!user) {
      try {
        const raw = localStorage.getItem('user') || localStorage.getItem('currentUser') || localStorage.getItem('account');
        if (raw) user = JSON.parse(raw);
      } catch (err) {
        // silent fallback
      }
    }

    // If we found a user, normalize id & name
    if (user) {
      // customize these property names if your user object uses different keys
      const id = user?.id ?? user?.accountId ?? user?.userId ?? user?.uid;
      const name =
        user?.fullName ??
        (user?.firstName && user?.lastName ? `${user.firstName} ${user.lastName}` : null) ??
        user?.name ??
        user?.username ??
        user?.email ??
        null;

      if (id) {
        this.currentUserId = +id;
        // patch the numeric id into the form control so backend gets it
        this.receiveForm.patchValue({ receivedBy: this.currentUserId });
      }
      if (name) {
        this.currentUserName = name;
      }
    }
  }

  private buildForm() {
    //const currentUserId = this.getCurrentUserId;
    this.receiveForm = this.fb.group({
      apparelName:      ['', Validators.required],
      apparelLevel:     [this.apparelLevels[0].value, Validators.required], // default to first
      apparelType:      [this.apparelTypes[0].value, Validators.required],
      apparelFor:       [this.apparelForOptions[0].value, Validators.required], // default 'unisex'
      apparelSize:      [this.apparelSizes[0].value, Validators.required], // default 'M'
      apparelQuantity:  [1, [Validators.required, Validators.min(1)]],
      receivedFrom:     ['', Validators.required],
      receivedBy:       [null, Validators.required],
      notes:            ['']
    });
  }

  submit() {
    if (this.receiveForm.invalid) { this.alert.error('Please fill required fields'); return; }
    this.submitting = true;
    const payload = this.receiveForm.value;

    this.roomService.receiveItem(this.roomId, payload).pipe(first()).subscribe({
      next: () => {
        this.alert.success('Received apparel successfully');
        this.submitting = false;
        this.router.navigate(['../', '..', 'inventory', 'apparel'], { relativeTo: this.route });
      },
      error: (e) => { this.alert.error(e); this.submitting = false; }
    });
  }
}


================================================================================
File: src\app\room\receive\apparel\received-list.component.html
Size: 1.53 kB
================================================================================

<div class="container py-2">
    <h4>Received Apparel Batches (Room #{{ roomId }})</h4>
  
    <div *ngIf="loading">Loading...</div>
  
    <table *ngIf="!loading && batches?.length" class="table table-sm">
      <thead>
        <tr>
          <th>Batch ID</th>
          <th>Item</th>
          <th>Level</th>
          <th>Type</th>
          <th>For</th>
          <th>Size</th>
          <th>Qty</th>
          <th>From</th>
          <th>Received By</th>
          <th>Date</th>
          <th>Notes</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let b of batches">
          <td>{{ b.receiveApparelId ?? '-' }}</td>
          <td>{{ b.apparelName      ?? '-' }}</td>
          <td>{{ b.apparelLevel     ?? '-' }}</td>
          <td>{{ b.apparelType      ?? '-' }}</td>
          <td>{{ b.apparelFor       ?? '-' }}</td>
          <td>{{ b.apparelSize      ?? '-' }}</td>
          <td>{{ b.apparelQuantity  ?? '-' }}</td>
          <td>{{ b.receivedFrom     ?? '-' }}</td>
          <td>
            <!-- show name when available, otherwise id -->
            {{ b.receivedByName ?? (b.receivedBy ?? '-') }}
          </td>
          <td>{{ b.createdAt ? (b.createdAt | date:'short') : (b.receivedAt ? (b.receivedAt | date:'short') : '-') }}</td>
          <td>{{ b.notes || '-' }}</td>
        </tr>
      </tbody>
    </table>
  
    <div *ngIf="!loading && (!batches || batches.length === 0)">
      No received apparel batches found.
    </div>
  </div>

================================================================================
File: src\app\room\receive\apparel\received-list.component.ts
Size: 1.28 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { first } from 'rxjs/operators';
import { RoomService, AlertService } from '@app/_services';

@Component({
  templateUrl: './received-list.component.html'
})
export class ApparelReceivedListComponent implements OnInit {
  roomId = NaN;
  batches: any[] = [];
  loading = false;

  constructor(
    private route: ActivatedRoute,
    private roomService: RoomService,
    private alert: AlertService
  ) {}

  ngOnInit(): void {
    this.roomId = this.findRoomId(this.route);
    if (!Number.isFinite(this.roomId)) { this.alert.error('Invalid room id'); return; }
    this.loadBatches();
  }

  private findRoomId(route: ActivatedRoute): number {
    let r: ActivatedRoute | null = route;
    while (r) {
      const idParam = r.snapshot.paramMap.get('id');
      if (idParam) return +idParam;
      r = r.parent;
    }
    return NaN;
  }

  loadBatches() {
    this.loading = true;
    this.roomService.getReceivedBatchApparels(this.roomId).pipe(first()).subscribe({
      next: (res: any[]) => { this.batches = res || []; this.loading = false; },
      error: (err) => { this.loading = false; this.alert.error(err); }
    });
  }
}

================================================================================
File: src\app\room\receive\gen-item\receive.component.html
Size: 2.48 kB
================================================================================

<!-- src/app/room/receive/apparel-receive.component.html -->
<div class="container py-2">
  <h4>Receive Admin Supply (Room #{{ roomId }})</h4>

  <form [formGroup]="receiveForm" (ngSubmit)="submit()">
    <div class="mb-2">
      <label class="form-label">Name</label>
      <input class="form-control" formControlName="genItemName" />
      <div *ngIf="receiveForm.get('genItemName')?.touched && receiveForm.get('genItemName')?.invalid" class="text-danger small">Name is required</div>
    </div>

    <div class="mb-2">
      <label class="form-label">Size</label>
      <input class="form-control" formControlName="genItemSize" />
      <div *ngIf="receiveForm.get('genItemSize')?.touched && receiveForm.get('genItemSize')?.invalid" class="text-danger small">Size is required</div>
    </div>

    <div class="row">
      <div class="col-md-3">
        <label class="form-label">Quantity</label>
        <input type="number" class="form-control" formControlName="genItemQuantity" />
      </div>

      <div class="col-md-3 mb-2">
        <label class="form-label">Type</label>
        <select class="form-select" formControlName="genItemType">
          <option *ngFor="let o of genItemTypes" [value]="o.value">{{ o.label }}</option>
        </select>
      </div>
    </div>
    <div class="mb-2 row">
      <div class="col-md-4">
        <label class="form-label">Received From</label>
        <input class="form-control" formControlName="receivedFrom" />
      </div>

      <!-- <div class="col-md-4">
        <label class="form-label">Received By (accountId)</label>
        <input type="number" class="form-control" formControlName="receivedBy" />
      </div> -->
      <div class="mb-2">
        <label class="form-label">Received By</label>
        <!-- <input type="number" formControlName="receivedBy" class="form-control" readonly /> -->
        <ng-container *ngIf="currentUserName">
          <input class="form-control" [value]="currentUserName" readonly />
          <!-- Hidden field: still binds numeric id into the form -->
          <input type="hidden" formControlName="receivedBy" />
        </ng-container>
      </div>
    </div>

    <div class="mb-2">
      <label class="form-label">Notes</label>
      <textarea class="form-control" formControlName="notes"></textarea>
    </div>

    <button class="btn btn-primary" type="submit" [disabled]="submitting">Receive</button>
  </form>
</div>


================================================================================
File: src\app\room\receive\gen-item\receive.component.ts
Size: 4.35 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { first } from 'rxjs/operators';
import { RoomService, AlertService } from '@app/_services';
import { AccountService } from '@app/_services';

type Option = { value: string, label: string };

@Component({
  templateUrl: './receive.component.html'
})
export class GenItemReceiveComponent implements OnInit {
  roomId = NaN;
  receiveForm!: FormGroup;
  submitting = false;

  currentUserName: string | null = null;
  currentUserId: number | null = null;

  // ENUM-like option lists â replace values with the exact enum values backend expects

  genItemTypes: Option[] = [
    { value: 'it',          label: 'IT Dept.' },
    { value: 'maintenance', label: 'Maintenance Dept.' },
    { value: 'unknownType', label: 'Unknown' },
  ];

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private roomService: RoomService,
    private alert: AlertService,
    private accountService: AccountService
  ) {}

  ngOnInit(): void {
    this.roomId = this.findRoomId(this.route);
    this.buildForm();
    this.tryFillCurrentUser();
  }

  private findRoomId(route: ActivatedRoute): number {
    let r: ActivatedRoute | null = route;
    while (r) {
      const idParam = r.snapshot.paramMap.get('id');
      if (idParam) return +idParam;
      r = r.parent;
    }
    return NaN;
  }

  private tryFillCurrentUser() {
    let user: any = null;

    // 1) Try to get user from injected accountService (if provided)
    if (this.accountService) {
      const svc: any = this.accountService as any;
      // try several common property names used by different templates
      user = svc?.currentUserValue || svc?.userValue || svc?.value || svc?.getValue?.();
      // also support an observable getter (less likely in this simple snippet)
      if (!user && typeof svc?.getCurrentUser === 'function') {
        user = svc.getCurrentUser();
      }
    }

    // 2) Fallback: try localStorage (older/simple auth implementations)
    if (!user) {
      try {
        const raw = localStorage.getItem('user') || localStorage.getItem('currentUser') || localStorage.getItem('account');
        if (raw) user = JSON.parse(raw);
      } catch (err) {
        // silent fallback
      }
    }

    // If we found a user, normalize id & name
    if (user) {
      // customize these property names if your user object uses different keys
      const id = user?.id ?? user?.accountId ?? user?.userId ?? user?.uid;
      const name =
        user?.fullName ??
        (user?.firstName && user?.lastName ? `${user.firstName} ${user.lastName}` : null) ??
        user?.name ??
        user?.username ??
        user?.email ??
        null;

      if (id) {
        this.currentUserId = +id;
        // patch the numeric id into the form control so backend gets it
        this.receiveForm.patchValue({ receivedBy: this.currentUserId });
      }
      if (name) {
        this.currentUserName = name;
      }
    }
  }

  private buildForm() {
    //const currentUserId = this.getCurrentUserId;
    this.receiveForm = this.fb.group({
      genItemName:      ['', Validators.required],
      genItemSize:      ['', Validators.required],
      genItemQuantity:  [1, [Validators.required, Validators.min(1)]],
      genItemType:      [this.genItemTypes[0].value, Validators.required],
      receivedFrom:     ['', Validators.required],
      receivedBy:       [null, Validators.required],
      notes:            ['']
    });
  }

  submit() {
    if (this.receiveForm.invalid) { this.alert.error('Please fill required fields'); return; }
    this.submitting = true;
    const payload = this.receiveForm.value;

    this.roomService.receiveItem(this.roomId, payload).pipe(first()).subscribe({
      next: () => {
        this.alert.success('Received general items successfully');
        this.submitting = false;
        this.router.navigate(['../', '..', 'inventory', 'general'], { relativeTo: this.route });
      },
      error: (e) => { this.alert.error(e); this.submitting = false; }
    });
  }
}


================================================================================
File: src\app\room\receive\gen-item\received-list.component.html
Size: 1.38 kB
================================================================================

<div class="container py-2">
    <h4>Received genItem Batches (Room #{{ roomId }})</h4>
  
    <div *ngIf="loading">Loading...</div>
  
    <table *ngIf="!loading && batches?.length" class="table table-sm">
      <thead>
        <tr>
          <th>Batch ID</th>
          <th>Item</th>
          <th>Size</th>
          <th>Qty</th>
          <th>Type</th>
          <th>From</th>
          <th>Received By</th>
          <th>Date</th>
          <th>Notes</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let b of batches">
          <td>{{ b.receiveGenItemId ?? '-' }}</td>
          <td>{{ b.genItemName      ?? '-' }}</td>
          <td>{{ b.genItemSize     ?? '-' }}</td>
          <td>{{ b.genItemQuantity     ?? '-' }}</td>
          <td>{{ b.genItemType       ?? '-' }}</td>
          <td>{{ b.receivedFrom     ?? '-' }}</td>
          <td>
            <!-- show name when available, otherwise id -->
            {{ b.receivedByName ?? (b.receivedBy ?? '-') }}
          </td>
          <td>{{ b.createdAt ? (b.createdAt | date:'short') : (b.receivedAt ? (b.receivedAt | date:'short') : '-') }}</td>
          <td>{{ b.notes || '-' }}</td>
        </tr>
      </tbody>
    </table>
  
    <div *ngIf="!loading && (!batches || batches.length === 0)">
      No received genItem batches found.
    </div>
  </div>

================================================================================
File: src\app\room\receive\gen-item\received-list.component.ts
Size: 1.28 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { first } from 'rxjs/operators';
import { RoomService, AlertService } from '@app/_services';

@Component({
  templateUrl: './received-list.component.html'
})
export class GenItemReceivedListComponent implements OnInit {
  roomId = NaN;
  batches: any[] = [];
  loading = false;

  constructor(
    private route: ActivatedRoute,
    private roomService: RoomService,
    private alert: AlertService
  ) {}

  ngOnInit(): void {
    this.roomId = this.findRoomId(this.route);
    if (!Number.isFinite(this.roomId)) { this.alert.error('Invalid room id'); return; }
    this.loadBatches();
  }

  private findRoomId(route: ActivatedRoute): number {
    let r: ActivatedRoute | null = route;
    while (r) {
      const idParam = r.snapshot.paramMap.get('id');
      if (idParam) return +idParam;
      r = r.parent;
    }
    return NaN;
  }

  loadBatches() {
    this.loading = true;
    this.roomService.getReceivedBatchGenItem(this.roomId).pipe(first()).subscribe({
      next: (res: any[]) => { this.batches = res || []; this.loading = false; },
      error: (err) => { this.loading = false; this.alert.error(err); }
    });
  }
}

================================================================================
File: src\app\room\receive\layout.component.html
Size: 123 B
================================================================================

<div class="inventory-feature p-2">
  <!-- child route content appears here -->
  <router-outlet></router-outlet>
</div>

================================================================================
File: src\app\room\receive\layout.component.ts
Size: 174 B
================================================================================

import { Component } from '@angular/core';
@Component({ 
    selector: 'app-receive-layout',
    templateUrl: 'layout.component.html' 
})
export class LayoutComponent {}

================================================================================
File: src\app\room\receive\receive-routing.module.ts
Size: 1.41 kB
================================================================================

// src/app/room/receive/receive-routing.module.ts
import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { LayoutComponent } from './layout.component';
import { ApparelReceiveComponent } from './apparel/receive.component';
import { AdminSupplyReceiveComponent } from './admin-supply/receive.component';
import { GenItemReceiveComponent } from './gen-item/receive.component';
import { ApparelReceivedListComponent } from './apparel/received-list.component';
import { AdminSupplyReceivedListComponent } from './admin-supply/received-list.component';
import { GenItemReceivedListComponent } from './gen-item/received-list.component';

const routes: Routes = [
  { path: '', component: LayoutComponent,
    children: [
      { path: '', redirectTo: 'apparel', pathMatch: 'full' },
      { path: 'apparel', component: ApparelReceiveComponent },
      { path: 'apparel/list', component: ApparelReceivedListComponent },
      { path: 'supply',  component: AdminSupplyReceiveComponent },
      { path: 'supply/list',  component: AdminSupplyReceivedListComponent },
      { path: 'general', component: GenItemReceiveComponent },
      { path: 'general/list',  component: GenItemReceivedListComponent },
    ]
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class ReceiveRoutingModule {}


================================================================================
File: src\app\room\receive\receive.module.ts
Size: 1.19 kB
================================================================================

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';

import { ReceiveRoutingModule } from './receive-routing.module';
import { LayoutComponent } from './layout.component';

import { ApparelReceiveComponent } from './apparel/receive.component';
import { AdminSupplyReceiveComponent } from './admin-supply/receive.component';
import { GenItemReceiveComponent } from './gen-item/receive.component';

import { ApparelReceivedListComponent } from './apparel/received-list.component';
import { AdminSupplyReceivedListComponent } from './admin-supply/received-list.component';
import { GenItemReceivedListComponent } from './gen-item/received-list.component';


@NgModule({
  imports: [
    CommonModule, 
    FormsModule, 
    ReactiveFormsModule, 
    ReceiveRoutingModule
  ],
  declarations: [
    LayoutComponent,

    ApparelReceiveComponent,
    AdminSupplyReceiveComponent,
    GenItemReceiveComponent,

    ApparelReceivedListComponent,
    AdminSupplyReceivedListComponent,
    GenItemReceivedListComponent
  ]
})
export class ReceiveModule {}


================================================================================
File: src\app\room\release\admin-supply\release-list.component.html
Size: 1.86 kB
================================================================================

<div class="container py-2">
    <h4>Released Apparel Batches (Room #{{ roomId }})</h4>
  
    <div *ngIf="loading">Loading...</div>
  
    <table *ngIf="!loading && batches?.length" class="table table-sm">
      <thead>
        <tr>
          <th>Batch ID</th>
          <th>Item</th>
          <th>Qty</th>
          <th>Claimed By</th>
          <th>Released By</th>
          <th>Date</th>
          <th>Remarks</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let b of batches">
          <td>{{ b.releaseAdminSupplyId }}</td>
          <td>{{ b.adminSupplyInventoryId }}</td>
          <td>{{ b.releaseAdminSupplyQuantity }}</td>
          <td>{{ b.claimedBy }}</td>
          <td>{{ b.releasedBy }}</td>
          <td>{{ b.createdAt ? (b.createdAt | date:'short') : (b.releasedAt ? (b.releasedAt | date:'short') : '-') }}</td>
          <td>{{ b.remarks ?? '-' }}</td>
        </tr>
      </tbody>
    </table>
  
    <div *ngIf="!loading && (!batches || batches.length === 0)">
      No released apparel batches found.
    </div>
  </div>
  <!-- Quick inventory view (kept per your request) -->
  <div *ngIf="inventory?.length" class="mt-4">
    <h6>Inventory (quick view)</h6>
    <table class="table table-sm">
      <thead>
        <tr>
          <th>Inv. ID</th>
          <th>Name</th>
          <th>Measure</th>
          <th>Qty</th>
          <th>Added</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let it of inventory">
          <td>{{ it.adminSupplyInventoryId }}</td>
          <td>{{ it.supplyName }}</td>
          <td>{{ it.supplyMeasure }}</td>
          <td>{{ it.totalQuantity ?? it.quantity ?? 0 }}</td>
          <td>{{ it.createdAt ? (it.createdAt | date:'short') : '-' }}</td>
        </tr>
      </tbody>
    </table>
  </div>

================================================================================
File: src\app\room\release\admin-supply\release-list.component.ts
Size: 1.56 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { first } from 'rxjs/operators';
import { RoomService, AlertService } from '@app/_services';

@Component({
  templateUrl: './release-list.component.html'
})
export class AdminSupplyReleasedListComponent implements OnInit {
  roomId = NaN;
  batches: any[] = [];
  loading = false;
  inventory: any[] = [];

  constructor(
    private route: ActivatedRoute,
    private roomService: RoomService,
    private alert: AlertService
  ) {}

  ngOnInit(): void {
    this.roomId = this.findRoomId(this.route);
    if (!Number.isFinite(this.roomId)) { this.alert.error('Invalid room id'); return; }
    this.loadBatches();
    this.loadInventory();
  }

  private findRoomId(route: ActivatedRoute): number {
    let r: ActivatedRoute | null = route;
    while (r) {
      const idParam = r.snapshot.paramMap.get('id');
      if (idParam) return +idParam;
      r = r.parent;
    }
    return NaN;
  }

  loadBatches() {
    this.loading = true;
    this.roomService.getReleasedBatchAdminSupply(this.roomId).pipe(first()).subscribe({
      next: (res: any[]) => { this.batches = res || []; this.loading = false; },
      error: (err) => { this.loading = false; this.alert.error(err); }
    });
  }

  loadInventory() {
    this.roomService.getAdminSupplyInventory(this.roomId).pipe(first()).subscribe({
      next: (res: any[]) => this.inventory = res || [],
      error: (e) => this.alert.error(e)
    });
  }
}

================================================================================
File: src\app\room\release\admin-supply\release.component.html
Size: 3.43 kB
================================================================================

<!-- src/app/room/release/apparel-release.component.html -->
<div class="container py-2">
  <h4>Release Admin Supply (Room #{{ roomId }})</h4>

  <form [formGroup]="releaseForm" (ngSubmit)="submit()">
    <div class="mb-2">
      <label class="form-label">Item</label>
      <select class="form-select" formControlName="adminSupplyInventoryId">
        <option value="" disabled>Select item to release</option>
        <option *ngFor="let it of inventory" [value]="(it.adminSupplyInventoryId)">
          {{ it.supplyName }} 
          <span *ngIf="it.supplyMeasure"> ({{ it.supplyMeasure }})</span>
          - Qty: {{ it.totalQuantity ??  0 }}
        </option>
      </select>
      <div *ngIf="releaseForm.get('adminSupplyInventoryId')?.touched && releaseForm.get('adminSupplyInventoryId')?.invalid" class="text-danger small">
        Please choose an item.
      </div>
    </div>

    <div class="row">
      <div class="col-md-3 mb-2">
        <label class="form-label">Quantity</label>
        <input type="number" class="form-control" formControlName="releaseQuantity" min="1" />
        <div *ngIf="releaseForm.get('releaseQuantity')?.touched && releaseForm.get('releaseQuantity')?.invalid" class="text-danger small">
          Enter a valid quantity (min 1).
        </div>
      </div>

      <div class="col-md-4 mb-2">
        <label class="form-label">Claimed By</label>
        <input class="form-control" formControlName="claimedBy" placeholder="Name of claimant" />
        <div *ngIf="releaseForm.get('claimedBy')?.touched && releaseForm.get('claimedBy')?.invalid" class="text-danger small">
          Claimed by is required.
        </div>
      </div>

      <div class="col-md-5 mb-2">
        <label class="form-label">Released By</label>
        <input class="form-control" formControlName="releasedBy" placeholder="Your name or account id" />
        <div *ngIf="releaseForm.get('releasedBy')?.touched && releaseForm.get('releasedBy')?.invalid" class="text-danger small">
          Released by is required.
        </div>
      </div>
    </div>

    <div class="mb-2">
      <label class="form-label">Remarks</label>
      <input class="form-control" formControlName="remarks" placeholder="Optional remarks" />
    </div>

    <div class="mb-3">
      <button type="submit" class="btn btn-danger" [disabled]="submitting || releaseForm.invalid">
        <span *ngIf="!submitting">Release</span>
        <span *ngIf="submitting">Releasing...</span>
      </button>

      <button type="button" class="btn btn-secondary ms-2" (click)="router.navigate(['../', '..', 'inventory', 'supply'])" [disabled]="submitting">
        Cancel
      </button>
    </div>
  </form>

  <!-- Quick inventory view (kept per your request) -->
  <div *ngIf="inventory?.length" class="mt-4">
    <h6>Inventory (quick view)</h6>
    <table class="table table-sm">
      <thead>
        <tr>
          <th>Name</th>
          <th>Measure</th>
          <th>Qty</th>
          <th>Added</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let it of inventory">
          <td>{{ it.supplyName  }}</td>
          <td>{{ it.supplyMeasure || '-' }}</td>
          <td>{{ it.totalQuantity ??  0 }}</td>
          <td>{{ it.createdAt ? (it.createdAt | date:'short') : '-' }}</td>
        </tr>
      </tbody>
    </table>
  </div>
</div>


================================================================================
File: src\app\room\release\admin-supply\release.component.ts
Size: 2.18 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { RoomService, AlertService } from '@app/_services';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { first } from 'rxjs/operators';

@Component({
  templateUrl: './release.component.html'
})
export class AdminSupplyReleaseComponent implements OnInit {
  roomId = NaN;
  inventory: any[] = [];
  releaseForm!: FormGroup;
  submitting = false;

  constructor(
    private route: ActivatedRoute,
    public router: Router,
    private fb: FormBuilder,
    private roomService: RoomService,
    private alert: AlertService
  ) {}

  ngOnInit(): void {
    this.roomId = this.findRoomId(this.route);
    this.releaseForm = this.fb.group({
      adminSupplyInventoryId: [null, Validators.required],
      releaseQuantity:    [1, [Validators.required, Validators.min(1)]],
      claimedBy:          ['', Validators.required],
      releasedBy:         ['', Validators.required],
      remarks:            ['']
    });

    this.loadInventory();
  }

  private findRoomId(route: ActivatedRoute): number {
    let r: ActivatedRoute | null = route;
    while (r) {
      const idParam = r.snapshot.paramMap.get('id');
      if (idParam) return +idParam;
      r = r.parent;
    }
    return NaN;
  }

  loadInventory() {
    this.roomService.getAdminSupplyInventory(this.roomId).pipe(first()).subscribe({
      next: (res: any[]) => this.inventory = res || [],
      error: (e) => this.alert.error(e)
    });
  }

  submit() {
    if (this.releaseForm.invalid) { this.alert.error('Please complete the form'); return; }
    this.submitting = true;
    const payload = this.releaseForm.value;

    this.roomService.releaseAdminSupply(this.roomId, payload).pipe(first()).subscribe({
      next: () => {
        this.alert.success('Released successfully');
        this.submitting = false;
        this.router.navigate(['../', '..', 'inventory', 'supply'], { relativeTo: this.route });
      },
      error: (e) => { this.alert.error(e); this.submitting = false; }
    });
  }
}

================================================================================
File: src\app\room\release\apparel\release-list.component.html
Size: 2.07 kB
================================================================================

<div class="container py-2">
    <h4>Released Apparel Batches (Room #{{ roomId }})</h4>
  
    <div *ngIf="loading">Loading...</div>
  
    <table *ngIf="!loading && batches?.length" class="table table-sm">
      <thead>
        <tr>
          <th>Batch ID</th>
          <th>Item</th>
          <th>Qty</th>
          <th>Claimed By</th>
          <th>Released By</th>
          <th>Date</th>
          <th>Remarks</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let b of batches">
          <td>{{ b.releaseApparelId ?? '-' }}</td>
          <td>{{ b.apparelInventoryId ?? '-' }}</td>
          <td>{{ b.releaseApparelQuantity ?? '-' }}</td>
          <td>{{ b.claimedBy ?? '-' }}</td>
          <td>{{ b.releasedBy ?? '-' }}</td>
          <td>{{ b.createdAt ? (b.createdAt | date:'short') : (b.releasedAt ? (b.releasedAt | date:'short') : '-') }}</td>
          <td>{{ b.remarks ?? '-' }}</td>
        </tr>
      </tbody>
    </table>
  
    <div *ngIf="!loading && (!batches || batches.length === 0)">
      No released apparel batches found.
    </div>
  </div>
  <!-- Quick inventory view (kept per your request) -->
  <div *ngIf="inventory?.length" class="mt-4">
    <h6>Inventory (quick view)</h6>
    <table class="table table-sm">
      <thead>
        <tr>
          <th>Inv. ID</th>
          <th>Name</th>
          <th>Level</th>
          <th>Type</th>
          <th>For</th>
          <th>Size</th>
          <th>Qty</th>
          <th>Added</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let it of inventory">
          <td>{{ it.apparelInventoryId }}</td>
          <td>{{ it.apparelName }}</td>
          <td>{{ it.apparelLevel }}</td>
          <td>{{ it.apparelType }}</td>
          <td>{{ it.apparelFor }}</td>
          <td>{{ it.apparelSize }}</td>
          <td>{{ it.totalQuantity ?? it.quantity ?? 0 }}</td>
          <td>{{ it.createdAt ? (it.createdAt | date:'short') : '-' }}</td>
        </tr>
      </tbody>
    </table>
  </div>

================================================================================
File: src\app\room\release\apparel\release-list.component.ts
Size: 1.55 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { first } from 'rxjs/operators';
import { RoomService, AlertService } from '@app/_services';

@Component({
  templateUrl: './release-list.component.html'
})
export class ApparelReleasedListComponent implements OnInit {
  roomId = NaN;
  batches: any[] = [];
  loading = false;
  inventory: any[] = [];

  constructor(
    private route: ActivatedRoute,
    private roomService: RoomService,
    private alert: AlertService
  ) {}

  ngOnInit(): void {
    this.roomId = this.findRoomId(this.route);
    if (!Number.isFinite(this.roomId)) { this.alert.error('Invalid room id'); return; }
    this.loadBatches();
    this.loadInventory();
  }

  private findRoomId(route: ActivatedRoute): number {
    let r: ActivatedRoute | null = route;
    while (r) {
      const idParam = r.snapshot.paramMap.get('id');
      if (idParam) return +idParam;
      r = r.parent;
    }
    return NaN;
  }

  loadBatches() {
    this.loading = true;
    this.roomService.getReleasedBatchApparels(this.roomId).pipe(first()).subscribe({
      next: (res: any[]) => { this.batches = res || []; this.loading = false; },
      error: (err) => { this.loading = false; this.alert.error(err); }
    });
  }

  loadInventory() {
    this.roomService.getApparelInventory(this.roomId).pipe(first()).subscribe({
      next: (res: any[]) => this.inventory = res || [],
      error: (e) => this.alert.error(e)
    });
  }
}

================================================================================
File: src\app\room\release\apparel\release.component.html
Size: 3.48 kB
================================================================================

<!-- src/app/room/release/apparel-release.component.html -->
<div class="container py-2">
  <h4>Release Apparel (Room #{{ roomId }})</h4>

  <form [formGroup]="releaseForm" (ngSubmit)="submit()">
    <div class="mb-2">
      <label class="form-label">Item</label>
      <select class="form-select" formControlName="apparelInventoryId">
        <option value="" disabled>Select item to release</option>
        <option *ngFor="let it of inventory" [value]="(it.apparelInventoryId ?? it.id)">
          {{ it.apparelName || it.name }} 
          <span *ngIf="it.apparelSize"> ({{ it.apparelSize }})</span>
          - Qty: {{ it.totalQuantity ?? it.quantity ?? 0 }}
        </option>
      </select>
      <div *ngIf="releaseForm.get('apparelInventoryId')?.touched && releaseForm.get('apparelInventoryId')?.invalid" class="text-danger small">
        Please choose an item.
      </div>
    </div>

    <div class="row">
      <div class="col-md-3 mb-2">
        <label class="form-label">Quantity</label>
        <input type="number" class="form-control" formControlName="releaseQuantity" min="1" />
        <div *ngIf="releaseForm.get('releaseQuantity')?.touched && releaseForm.get('releaseQuantity')?.invalid" class="text-danger small">
          Enter a valid quantity (min 1).
        </div>
      </div>

      <div class="col-md-4 mb-2">
        <label class="form-label">Claimed By</label>
        <input class="form-control" formControlName="claimedBy" placeholder="Name of claimant" />
        <div *ngIf="releaseForm.get('claimedBy')?.touched && releaseForm.get('claimedBy')?.invalid" class="text-danger small">
          Claimed by is required.
        </div>
      </div>

      <div class="col-md-5 mb-2">
        <label class="form-label">Released By</label>
        <input class="form-control" formControlName="releasedBy" placeholder="Your name or account id" />
        <div *ngIf="releaseForm.get('releasedBy')?.touched && releaseForm.get('releasedBy')?.invalid" class="text-danger small">
          Released by is required.
        </div>
      </div>
    </div>

    <div class="mb-2">
      <label class="form-label">Remarks</label>
      <input class="form-control" formControlName="remarks" placeholder="Optional remarks" />
    </div>

    <div class="mb-3">
      <button type="submit" class="btn btn-danger" [disabled]="submitting || releaseForm.invalid">
        <span *ngIf="!submitting">Release</span>
        <span *ngIf="submitting">Releasing...</span>
      </button>

      <button type="button" class="btn btn-secondary ms-2" (click)="router.navigate(['../', '..', 'inventory', 'apparel'])" [disabled]="submitting">
        Cancel
      </button>
    </div>
  </form>

  <!-- Quick inventory view (kept per your request) -->
  <div *ngIf="inventory?.length" class="mt-4">
    <h6>Inventory (quick view)</h6>
    <table class="table table-sm">
      <thead>
        <tr>
          <th>Name</th>
          <th>Size</th>
          <th>Qty</th>
          <th>Added</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let it of inventory">
          <td>{{ it.apparelName || it.name }}</td>
          <td>{{ it.apparelSize || it.size || '-' }}</td>
          <td>{{ it.totalQuantity ?? it.quantity ?? 0 }}</td>
          <td>{{ it.createdAt ? (it.createdAt | date:'short') : '-' }}</td>
        </tr>
      </tbody>
    </table>
  </div>
</div>


================================================================================
File: src\app\room\release\apparel\release.component.ts
Size: 2.13 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { RoomService, AlertService } from '@app/_services';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { first } from 'rxjs/operators';

@Component({
  templateUrl: './release.component.html'
})
export class ApparelReleaseComponent implements OnInit {
  roomId = NaN;
  inventory: any[] = [];
  releaseForm!: FormGroup;
  submitting = false;

  constructor(
    private route: ActivatedRoute,
    public router: Router,
    private fb: FormBuilder,
    private roomService: RoomService,
    private alert: AlertService
  ) {}

  ngOnInit(): void {
    this.roomId = this.findRoomId(this.route);
    this.releaseForm = this.fb.group({
      apparelInventoryId: [null, Validators.required],
      releaseQuantity: [1, [Validators.required, Validators.min(1)]],
      claimedBy: ['', Validators.required],
      releasedBy: ['', Validators.required],
      remarks: ['']
    });

    this.loadInventory();
  }

  private findRoomId(route: ActivatedRoute): number {
    let r: ActivatedRoute | null = route;
    while (r) {
      const idParam = r.snapshot.paramMap.get('id');
      if (idParam) return +idParam;
      r = r.parent;
    }
    return NaN;
  }

  loadInventory() {
    this.roomService.getApparelInventory(this.roomId).pipe(first()).subscribe({
      next: (res: any[]) => this.inventory = res || [],
      error: (e) => this.alert.error(e)
    });
  }

  submit() {
    if (this.releaseForm.invalid) { this.alert.error('Please complete the form'); return; }
    this.submitting = true;
    const payload = this.releaseForm.value;

    this.roomService.releaseApparel(this.roomId, payload).pipe(first()).subscribe({
      next: () => {
        this.alert.success('Released successfully');
        this.submitting = false;
        this.router.navigate(['../', '..', 'inventory', 'apparel'], { relativeTo: this.route });
      },
      error: (e) => { this.alert.error(e); this.submitting = false; }
    });
  }
}

================================================================================
File: src\app\room\release\gen-item\release-list.component.html
Size: 1.9 kB
================================================================================

<div class="container py-2">
    <h4>Released genItem Batches (Room #{{ roomId }})</h4>
  
    <div *ngIf="loading">Loading...</div>
  
    <table *ngIf="!loading && batches?.length" class="table table-sm">
      <thead>
        <tr>
          <th>Batch ID</th>
          <th>Item</th>
          <th>Qty</th>
          <th>Claimed By</th>
          <th>Released By</th>
          <th>Date</th>
          <th>Remarks</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let b of batches">
          <td>{{ b.releaseGenItemId }}</td>
          <td>{{ b.genItemInventoryId }}</td>
          <td>{{ b.releaseItemQuantity }}</td>
          <td>{{ b.claimedBy }}</td>
          <td>{{ b.releasedBy }}</td>
          <td>{{ b.createdAt ? (b.createdAt | date:'short') : (b.releasedAt ? (b.releasedAt | date:'short') : '-') }}</td>
          <td>{{ b.remarks ?? '-' }}</td>
        </tr>
      </tbody>
    </table>
  
    <div *ngIf="!loading && (!batches || batches.length === 0)">
      No released genItem batches found.
    </div>
  </div>
  <!-- Quick inventory view (kept per your request) -->
  <div *ngIf="inventory?.length" class="mt-4">
    <h6>Inventory (quick view)</h6>
    <table class="table table-sm">
      <thead>
        <tr>
          <th>Inv. ID</th>
          <th>Name</th>
          <th>Size</th>
          <th>Type</th>
          <th>Qty</th>
          <th>Added</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let it of inventory">
          <td>{{ it.genItemInventoryId }}</td>
          <td>{{ it.genItemName }}</td>
          <td>{{ it.genItemSize }}</td>
          <td>{{ it.genItemType }}</td>
          <td>{{ it.totalQuantity ?? it.quantity ?? 0 }}</td>
          <td>{{ it.createdAt ? (it.createdAt | date:'short') : '-' }}</td>
        </tr>
      </tbody>
    </table>
  </div>

================================================================================
File: src\app\room\release\gen-item\release-list.component.ts
Size: 1.55 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { first } from 'rxjs/operators';
import { RoomService, AlertService } from '@app/_services';

@Component({
  templateUrl: './release-list.component.html'
})
export class GenItemReleasedListComponent implements OnInit {
  roomId = NaN;
  batches: any[] = [];
  loading = false;
  inventory: any[] = [];

  constructor(
    private route: ActivatedRoute,
    private roomService: RoomService,
    private alert: AlertService
  ) {}

  ngOnInit(): void {
    this.roomId = this.findRoomId(this.route);
    if (!Number.isFinite(this.roomId)) { this.alert.error('Invalid room id'); return; }
    this.loadBatches();
    this.loadInventory();
  }

  private findRoomId(route: ActivatedRoute): number {
    let r: ActivatedRoute | null = route;
    while (r) {
      const idParam = r.snapshot.paramMap.get('id');
      if (idParam) return +idParam;
      r = r.parent;
    }
    return NaN;
  }

  loadBatches() {
    this.loading = true;
    this.roomService.getReleasedBatchGenItem(this.roomId).pipe(first()).subscribe({
      next: (res: any[]) => { this.batches = res || []; this.loading = false; },
      error: (err) => { this.loading = false; this.alert.error(err); }
    });
  }

  loadInventory() {
    this.roomService.getGenItemInventory(this.roomId).pipe(first()).subscribe({
      next: (res: any[]) => this.inventory = res || [],
      error: (e) => this.alert.error(e)
    });
  }
}

================================================================================
File: src\app\room\release\gen-item\release.component.html
Size: 3.39 kB
================================================================================

<div class="container py-2">
  <h4>Release General Item (Room #{{ roomId }})</h4>

  <form [formGroup]="releaseForm" (ngSubmit)="submit()">
    <div class="mb-2">
      <label class="form-label">Item</label>
      <select class="form-select" formControlName="genItemInventoryId">
        <option value="" disabled>Select item to release</option>
        <option *ngFor="let it of inventory" [value]="(it.genItemInventoryId ?? it.id)">
          {{ it.supplyName }} 
          <span *ngIf="it.itemSize"> ({{ it.itemSize }})</span>
          - Qty: {{ it.totalQuantity ?? 0 }}
        </option>
      </select>
      <div *ngIf="releaseForm.get('genItemInventoryId')?.touched && releaseForm.get('genItemInventoryId')?.invalid" class="text-danger small">
        Please choose an item.
      </div>
    </div>

    <div class="row">
      <div class="col-md-3 mb-2">
        <label class="form-label">Quantity</label>
        <input type="number" class="form-control" formControlName="releaseQuantity" min="1" />
        <div *ngIf="releaseForm.get('releaseQuantity')?.touched && releaseForm.get('releaseQuantity')?.invalid" class="text-danger small">
          Enter a valid quantity (min 1).
        </div>
      </div>

      <div class="col-md-4 mb-2">
        <label class="form-label">Claimed By</label>
        <input class="form-control" formControlName="claimedBy" placeholder="Name of claimant" />
        <div *ngIf="releaseForm.get('claimedBy')?.touched && releaseForm.get('claimedBy')?.invalid" class="text-danger small">
          Claimed by is required.
        </div>
      </div>

      <div class="col-md-5 mb-2">
        <label class="form-label">Released By</label>
        <input class="form-control" formControlName="releasedBy" placeholder="Your name or account id" />
        <div *ngIf="releaseForm.get('releasedBy')?.touched && releaseForm.get('releasedBy')?.invalid" class="text-danger small">
          Released by is required.
        </div>
      </div>
    </div>

    <div class="mb-2">
      <label class="form-label">Remarks</label>
      <input class="form-control" formControlName="remarks" placeholder="Optional remarks" />
    </div>

    <div class="mb-3">
      <button type="submit" class="btn btn-danger" [disabled]="submitting || releaseForm.invalid">
        <span *ngIf="!submitting">Release</span>
        <span *ngIf="submitting">Releasing...</span>
      </button>

      <button type="button" class="btn btn-secondary ms-2" (click)="router.navigate(['../', '..', 'inventory', 'apparel'])" [disabled]="submitting">
        Cancel
      </button>
    </div>
  </form>

  <!-- Quick inventory view (kept per your request) -->
  <div *ngIf="inventory?.length" class="mt-4">
    <h6>Inventory (quick view)</h6>
    <table class="table table-sm">
      <thead>
        <tr>
          <th>Name</th>
          <th>Size</th>
          <th>Qty</th>
          <th>Added</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let it of inventory">
          <td>{{ it.apparelName || it.name }}</td>
          <td>{{ it.apparelSize || it.size || '-' }}</td>
          <td>{{ it.totalQuantity ?? it.quantity ?? 0 }}</td>
          <td>{{ it.createdAt ? (it.createdAt | date:'short') : '-' }}</td>
        </tr>
      </tbody>
    </table>
  </div>
</div>


================================================================================
File: src\app\room\release\gen-item\release.component.ts
Size: 2.13 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { RoomService, AlertService } from '@app/_services';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { first } from 'rxjs/operators';

@Component({
  templateUrl: './release.component.html'
})
export class GenItemReleaseComponent implements OnInit {
  roomId = NaN;
  inventory: any[] = [];
  releaseForm!: FormGroup;
  submitting = false;

  constructor(
    private route: ActivatedRoute,
    public router: Router,
    private fb: FormBuilder,
    private roomService: RoomService,
    private alert: AlertService
  ) {}

  ngOnInit(): void {
    this.roomId = this.findRoomId(this.route);
    this.releaseForm = this.fb.group({
      genItemInventoryId: [null, Validators.required],
      releaseQuantity: [1, [Validators.required, Validators.min(1)]],
      claimedBy: ['', Validators.required],
      releasedBy: ['', Validators.required],
      remarks: ['']
    });

    this.loadInventory();
  }

  private findRoomId(route: ActivatedRoute): number {
    let r: ActivatedRoute | null = route;
    while (r) {
      const idParam = r.snapshot.paramMap.get('id');
      if (idParam) return +idParam;
      r = r.parent;
    }
    return NaN;
  }

  loadInventory() {
    this.roomService.getGenItemInventory(this.roomId).pipe(first()).subscribe({
      next: (res: any[]) => this.inventory = res || [],
      error: (e) => this.alert.error(e)
    });
  }

  submit() {
    if (this.releaseForm.invalid) { this.alert.error('Please complete the form'); return; }
    this.submitting = true;
    const payload = this.releaseForm.value;

    this.roomService.releaseGenItem(this.roomId, payload).pipe(first()).subscribe({
      next: () => {
        this.alert.success('Released successfully');
        this.submitting = false;
        this.router.navigate(['../', '..', 'inventory', 'general'], { relativeTo: this.route });
      },
      error: (e) => { this.alert.error(e); this.submitting = false; }
    });
  }
}

================================================================================
File: src\app\room\release\layout.component.html
Size: 121 B
================================================================================

<div class="release-feature p-2">
  <!-- child route content appears here -->
  <router-outlet></router-outlet>
</div>

================================================================================
File: src\app\room\release\layout.component.ts
Size: 174 B
================================================================================

import { Component } from '@angular/core';
@Component({ 
    selector: 'app-release-layout',
    templateUrl: 'layout.component.html' 
})
export class LayoutComponent {}

================================================================================
File: src\app\room\release\release-routing.module.ts
Size: 1.36 kB
================================================================================

import { NgModule } from '@angular/core';
import { 
  RouterModule, 
  Routes 
} from '@angular/router';

import { LayoutComponent } from './layout.component';

import { ApparelReleaseComponent      } from './apparel/release.component';
import { AdminSupplyReleaseComponent  } from './admin-supply/release.component';
import { GenItemReleaseComponent      } from './gen-item/release.component';

import { ApparelReleasedListComponent     } from './apparel/release-list.component';
import { AdminSupplyReleasedListComponent } from './admin-supply/release-list.component';
import { GenItemReleasedListComponent } from './gen-item/release-list.component';

const routes: Routes = [
  { path: '', component: LayoutComponent,
    children: [
      { path: 'apparel',      component: ApparelReleaseComponent }, // /room/:id/release
      { path: 'apparel/list', component: ApparelReleasedListComponent },
      { path: 'supply',       component: AdminSupplyReleaseComponent },
      { path: 'supply/list',  component: AdminSupplyReleasedListComponent },
      { path: 'general',      component: GenItemReleaseComponent },
      { path: 'general/list', component: GenItemReleasedListComponent },
    ]
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class ReleaseRoutingModule {}


================================================================================
File: src\app\room\release\release.module.ts
Size: 1.22 kB
================================================================================

import { NgModule     } from '@angular/core';
import { CommonModule } from '@angular/common';
import { 
  ReactiveFormsModule, 
  FormsModule 
} from '@angular/forms';

import { ReleaseRoutingModule } from './release-routing.module';
import { LayoutComponent      } from './layout.component';

import { ApparelReleaseComponent      } from './apparel/release.component';
import { AdminSupplyReleaseComponent  } from './admin-supply/release.component';
import { GenItemReleaseComponent      } from './gen-item/release.component';

import { ApparelReleasedListComponent     } from './apparel/release-list.component';
import { AdminSupplyReleasedListComponent } from './admin-supply/release-list.component';
import { GenItemReleasedListComponent } from './gen-item/release-list.component';

@NgModule({
  imports: [
    CommonModule, 
    FormsModule, 
    ReactiveFormsModule, 
    ReleaseRoutingModule
  ],
  declarations: [
    LayoutComponent,

    ApparelReleaseComponent,
    AdminSupplyReleaseComponent,
    GenItemReleaseComponent,

    ApparelReleasedListComponent,
    AdminSupplyReleasedListComponent,
    GenItemReleasedListComponent
  ]
})
export class ReleaseModule {}


================================================================================
File: src\app\room\room-list.component.html
Size: 1.01 kB
================================================================================

<div>
  <h3>Rooms</h3>
  <a class="btn btn-sm btn-success" routerLink="add">Create Room</a>

  <div class="row">
    <div class="col-md-3 mb-3" *ngFor="let r of rooms">
      <div class="card h-100 shadow-sm">
        <div class="card-body">
          <h5 class="card-title">{{ r.roomName }}</h5>
          <h6 class="card-subtitle mb-2 text-muted">Floor: {{ r.roomFloor }}</h6>
          
          <p class="card-text">
            <strong>Type:</strong> {{ r.roomType }}
            <span *ngIf="r.stockroomType"> / {{ r.stockroomType }}</span>
            <br>
            <strong>In Charge:</strong> {{ r.Account.firstName }} {{ r.Account.lastName }}
          </p>
        </div>
        <div class="card-footer d-flex justify-content-end">
          <button class="btn btn-primary btn-sm" [routerLink]="['/room', r.roomId]">View</button>
          <button class="btn btn-secondary btn-sm" (click)="updateRoom(r)">Edit</button>
        </div>
      </div>
    </div>
  </div>
</div>

================================================================================
File: src\app\room\room-list.component.ts
Size: 1.07 kB
================================================================================

import { Component, OnInit,}  from '@angular/core';
import { Router }             from '@angular/router';
import { first }              from 'rxjs/operators';

import { 
  RoomService, 
  QrService, 
  AlertService 
} from '@app/_services';

@Component({ templateUrl: 'room-list.component.html' })
export class RoomListComponent implements OnInit {
  rooms: any[] = [];
  loading = false;

  constructor(
    private roomService:  RoomService,
    private qrService:    QrService,
    private alert:        AlertService,

    private router:       Router
  ) {}

  ngOnInit() {
    this.load();
  }

  load() {
    this.loading = true;
    this.roomService.getRooms()
      .pipe(first())
      .subscribe({
        next: rooms => { this.rooms = rooms; this.loading = false; },
        error: err => { this.alert.error(err); this.loading = false; }
      });
  }

  view(room: any) {
    this.router.navigate(['/room', room.roomId]);
  }

  updateRoom(room: any) {
    this.router.navigate(['/room/edit', room.roomId]);
  }
}

================================================================================
File: src\app\room\room-routing.module.ts
Size: 2.49 kB
================================================================================

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { LayoutComponent } from './layout.component';
import { RoomListComponent } from './room-list.component';
import { RoomViewComponent } from './room-view.component';

const unitModule = () => import('./units/unit.module').then(x => x.UnitModule);
const addEditModule = () => import('./add-edit/list.module').then(x => x.AddEditModule);

// new feature modules (lazy)
const inventoryModule = () => import('./inventory/inventory.module').then(x => x.InventoryModule);
const receiveModule   = () => import('./receive/receive.module').then(x => x.ReceiveModule);
const releaseModule   = () => import('./release/release.module').then(x => x.ReleaseModule);

const routes: Routes = [
  { path: '', component: LayoutComponent,
    children: [
      { path: '', component: RoomListComponent},
      { path: '', loadChildren: addEditModule },
      {
        path: ':id', component: RoomViewComponent,
        children: [
          { path: 'units',   loadChildren: unitModule },
          { path: 'inventory', loadChildren: inventoryModule },
          { path: 'receive',   loadChildren: receiveModule },
          { path: 'release',   loadChildren: releaseModule },
        ]
      },
    ]
  },
];

@NgModule({
    imports: [RouterModule.forChild(routes)],
    exports: [RouterModule]
})
export class RoomRoutingModule { }

================================================================================
File: src\app\room\room-view.component.html
Size: 1.26 kB
================================================================================

<div class="p-1 container">
  <h2>Room: {{ room?.roomName }}</h2>

  <p class="mb-3">
    Floor: {{ room?.roomFloor }} â¢
    Type: {{ room?.roomType }} â¢
    <span *ngIf="room?.stockroomType">Stock: {{ room?.stockroomType }} â¢</span>
    In charge: {{ room?.roomInCharge }}
  </p>

  <div *ngIf="room?.roomType === 'stockroom' || room?.roomType === 'subStockroom'" class="mb-3">
    <button class="btn btn-sm btn-outline-primary ms-3" [routerLink]="['units', stockPath]">
      Unit List
    </button>
    <button class="btn btn-sm btn-outline-secondary ms-1" [routerLink]="['inventory', stockPath]">
      Inventory List
    </button>
    <button class="btn btn-sm btn-outline-secondary ms-1"
        [routerLink]="['receive', stockPath, 'list']">
      Receive List
    </button>
    <button class="btn btn-sm btn-outline-secondary ms-1"
        [routerLink]="['release', stockPath, 'list']">
      Release List
    </button>
  </div>
  <a class="btn btn-success me-2" [routerLink]="['receive', stockPath]">Receive</a>
  <a class="btn btn-danger me-2" [routerLink]="['release', stockPath]">Release</a>

  <!-- children (inventory / receive / release / units) will render here -->
  <router-outlet></router-outlet>
</div>


================================================================================
File: src\app\room\room-view.component.ts
Size: 38.99 kB
================================================================================

// src/app/room/room-view.component.ts
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute }     from '@angular/router';
import { first }              from 'rxjs/operators';

import { RoomService, AlertService } from '@app/_services';

@Component({
  templateUrl: './room-view.component.html'
})
export class RoomViewComponent implements OnInit {
  roomId!: number;
  room: any = {};
  stockPath: string = 'general';
  isStockroom = false;

  constructor(
    private route: ActivatedRoute,
    private roomService: RoomService,
    private alert: AlertService
  ) {}

  ngOnInit(): void {
    this.roomId = +this.route.snapshot.params['id'];
    if (!this.roomId) {
      this.alert.error('Room id is missing in route');
      return;
    }

    this.loadRoom();
  }

  private loadRoom() {
    this.roomService.getRoomById(this.roomId).pipe(first()).subscribe({
      next: (r: any) => {
        this.room = r || {};
        this.stockPath = this.computeStockPath(this.room);
        this.isStockroom = this.room.roomType === 'stockroom' || this.room.roomType === 'subStockroom';
      },
      error: (e) => this.alert.error(e)
    });
  }

  private computeStockPath(room: any): string {
    if (!room || !room.stockroomType) return 'general';
    const t = (room.stockroomType || '').toLowerCase();
    if (t === 'apparel') return 'apparel';
    if (t === 'supply') return 'supply';
    return 'general';
  }
}



================================================================================
File: src\app\room\room.module.ts
Size: 753 B
================================================================================

import { NgModule } from '@angular/core';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';

import { RoomRoutingModule } from './room-routing.module';
import { LayoutComponent } from './layout.component';
import { RoomListComponent } from './room-list.component';
import { RoomViewComponent } from './room-view.component';

@NgModule({
    imports: [
        CommonModule,
        RoomRoutingModule,
        ReactiveFormsModule,
        FormsModule,
        RouterModule
    ],
    declarations: [ 
        LayoutComponent,
        RoomListComponent,
        RoomViewComponent
    ]
})
export class RoomModule { }


================================================================================
File: src\app\room\units\admin-supply.list.component.html
Size: 960 B
================================================================================

<div class="container py-2">
  <h4>Apparel Units (Room #{{ roomId }})</h4>

  <div *ngIf="loading">Loading...</div>

  <table *ngIf="!loading && units?.length" class="table table-sm">
    <thead>
      <tr>
        <th>Unit ID</th>
        <th>Unit Name</th>
        <th>Status</th>
        <th>Assigned To</th>
        <th>Qty</th>
        <th>Last Updated</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let u of units">
        <td>{{ u.adminSupplyId}}</td>
        <td>{{ u.receiveAdminSupplyId}}</td>
        <td>{{ u.status }}</td>
        <td>{{ u.assignedToName || u.assignedTo || '-' }}</td>
        <td>{{ u.quantity ?? u.totalQuantity ?? 0 }}</td>
        <td>{{ u.updatedAt ? (u.updatedAt | date:'short') : (u.createdAt ? (u.createdAt | date:'short') : '-') }}</td>
      </tr>
    </tbody>
  </table>

  <div *ngIf="!loading && (!units || units.length === 0)">
    No apparel units found.
  </div>
</div>

================================================================================
File: src\app\room\units\admin-supply.list.component.ts
Size: 1.27 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { first } from 'rxjs/operators';
import { RoomService, AlertService } from '@app/_services';

@Component({
  templateUrl: './admin-supply.list.component.html'
})
export class AdminSupplyUnitListComponent implements OnInit {
  roomId = NaN;
  units: any[] = [];
  loading = false;

  constructor(
    private route: ActivatedRoute,
    private roomService: RoomService,
    private alert: AlertService
  ) {}

  ngOnInit(): void {
    this.roomId = this.findRoomId(this.route);
    if (!Number.isFinite(this.roomId)) { this.alert.error('Invalid room id'); return; }
    this.loadUnits();
  }

  private findRoomId(route: ActivatedRoute): number {
    let r: ActivatedRoute | null = route;
    while (r) {
      const idParam = r.snapshot.paramMap.get('id');
      if (idParam) return +idParam;
      r = r.parent;
    }
    return NaN;
  }

  loadUnits() {
    this.loading = true;
    this.roomService.getAdminSupplyUnits(this.roomId).pipe(first()).subscribe({
      next: (res: any[]) => { this.units = res || []; this.loading = false; },
      error: (err) => { this.loading = false; this.alert.error(err); }
    });
  }
}

================================================================================
File: src\app\room\units\apparel.list.component.html
Size: 952 B
================================================================================

<div class="container py-2">
  <h4>Apparel Units (Room #{{ roomId }})</h4>

  <div *ngIf="loading">Loading...</div>

  <table *ngIf="!loading && units?.length" class="table table-sm">
    <thead>
      <tr>
        <th>Unit ID</th>
        <th>Unit Name</th>
        <th>Status</th>
        <th>Assigned To</th>
        <th>Qty</th>
        <th>Last Updated</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let u of units">
        <td>{{ u.apparelId}}</td>
        <td>{{ u.receiveApparelId}}</td>
        <td>{{ u.status }}</td>
        <td>{{ u.assignedToName || u.assignedTo || '-' }}</td>
        <td>{{ u.quantity ?? u.totalQuantity ?? 0 }}</td>
        <td>{{ u.updatedAt ? (u.updatedAt | date:'short') : (u.createdAt ? (u.createdAt | date:'short') : '-') }}</td>
      </tr>
    </tbody>
  </table>

  <div *ngIf="!loading && (!units || units.length === 0)">
    No apparel units found.
  </div>
</div>

================================================================================
File: src\app\room\units\apparel.list.component.ts
Size: 1.26 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { first } from 'rxjs/operators';
import { RoomService, AlertService } from '@app/_services';

@Component({
  templateUrl: './apparel.list.component.html'
})
export class ApparelUnitListComponent implements OnInit {
  roomId = NaN;
  units: any[] = [];
  loading = false;

  constructor(
    private route: ActivatedRoute,
    private roomService: RoomService,
    private alert: AlertService
  ) {}

  ngOnInit(): void {
    this.roomId = this.findRoomId(this.route);
    if (!Number.isFinite(this.roomId)) { this.alert.error('Invalid room id'); return; }
    this.loadUnits();
  }

  private findRoomId(route: ActivatedRoute): number {
    let r: ActivatedRoute | null = route;
    while (r) {
      const idParam = r.snapshot.paramMap.get('id');
      if (idParam) return +idParam;
      r = r.parent;
    }
    return NaN;
  }

  loadUnits() {
    this.loading = true;
    this.roomService.getApparelUnits(this.roomId).pipe(first()).subscribe({
      next: (res: any[]) => { this.units = res || []; this.loading = false; },
      error: (err) => { this.loading = false; this.alert.error(err); }
    });
  }
}

================================================================================
File: src\app\room\units\gen-item.list.component.html
Size: 952 B
================================================================================

<div class="container py-2">
  <h4>Apparel Units (Room #{{ roomId }})</h4>

  <div *ngIf="loading">Loading...</div>

  <table *ngIf="!loading && units?.length" class="table table-sm">
    <thead>
      <tr>
        <th>Unit ID</th>
        <th>Unit Name</th>
        <th>Status</th>
        <th>Assigned To</th>
        <th>Qty</th>
        <th>Last Updated</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let u of units">
        <td>{{ u.genItemId}}</td>
        <td>{{ u.receiveGenItemId}}</td>
        <td>{{ u.status }}</td>
        <td>{{ u.assignedToName || u.assignedTo || '-' }}</td>
        <td>{{ u.quantity ?? u.totalQuantity ?? 0 }}</td>
        <td>{{ u.updatedAt ? (u.updatedAt | date:'short') : (u.createdAt ? (u.createdAt | date:'short') : '-') }}</td>
      </tr>
    </tbody>
  </table>

  <div *ngIf="!loading && (!units || units.length === 0)">
    No apparel units found.
  </div>
</div>

================================================================================
File: src\app\room\units\gen-item.list.component.ts
Size: 1.26 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { first } from 'rxjs/operators';
import { RoomService, AlertService } from '@app/_services';

@Component({
  templateUrl: './gen-item.list.component.html'
})
export class GenItemUnitListComponent implements OnInit {
  roomId = NaN;
  units: any[] = [];
  loading = false;

  constructor(
    private route: ActivatedRoute,
    private roomService: RoomService,
    private alert: AlertService
  ) {}

  ngOnInit(): void {
    this.roomId = this.findRoomId(this.route);
    if (!Number.isFinite(this.roomId)) { this.alert.error('Invalid room id'); return; }
    this.loadUnits();
  }

  private findRoomId(route: ActivatedRoute): number {
    let r: ActivatedRoute | null = route;
    while (r) {
      const idParam = r.snapshot.paramMap.get('id');
      if (idParam) return +idParam;
      r = r.parent;
    }
    return NaN;
  }

  loadUnits() {
    this.loading = true;
    this.roomService.getGenItemUnits(this.roomId).pipe(first()).subscribe({
      next: (res: any[]) => { this.units = res || []; this.loading = false; },
      error: (err) => { this.loading = false; this.alert.error(err); }
    });
  }
}

================================================================================
File: src\app\room\units\layout.component.html
Size: 121 B
================================================================================

<div class="release-feature p-2">
  <!-- child route content appears here -->
  <router-outlet></router-outlet>
</div>

================================================================================
File: src\app\room\units\layout.component.ts
Size: 174 B
================================================================================

import { Component } from '@angular/core';
@Component({ 
    selector: 'app-release-layout',
    templateUrl: 'layout.component.html' 
})
export class LayoutComponent {}

================================================================================
File: src\app\room\units\unit-routing.module.ts
Size: 822 B
================================================================================

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { LayoutComponent } from './layout.component';
import { ApparelUnitListComponent } from './apparel.list.component';
import { AdminSupplyUnitListComponent } from './admin-supply.list.component';
import { GenItemUnitListComponent } from './gen-item.list.component';

const routes: Routes = [
    { path: '', component: LayoutComponent,
      children: [
        { path: 'apparel', component: ApparelUnitListComponent },
        { path: 'supply', component: AdminSupplyUnitListComponent },
        { path: 'general', component: GenItemUnitListComponent },
      ]
  }
];

@NgModule({
    imports: [RouterModule.forChild(routes)],
    exports: [RouterModule]
})
export class UnitRoutingModule { }


================================================================================
File: src\app\room\units\unit.module.ts
Size: 932 B
================================================================================

import { NgModule } from '@angular/core';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';

import { UnitRoutingModule } from './unit-routing.module';
import { LayoutComponent } from './layout.component';

// unit list components
import { ApparelUnitListComponent } from './apparel.list.component';
import { AdminSupplyUnitListComponent } from './admin-supply.list.component';
import { GenItemUnitListComponent } from './gen-item.list.component';

@NgModule({
    imports: [
        CommonModule,
        UnitRoutingModule,
        ReactiveFormsModule,
        FormsModule,
        RouterModule
    ],
    declarations: [
        LayoutComponent,
        ApparelUnitListComponent,
        AdminSupplyUnitListComponent,
        GenItemUnitListComponent
    ]
})
export class UnitModule { }


================================================================================
File: src\app\scan\scan-routing.module.ts
Size: 349 B
================================================================================

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { ScanComponent } from './scan.component';

const routes: Routes = [
  { path: '', component: ScanComponent }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class ScanRoutingModule {}

================================================================================
File: src\app\scan\scan.component.html
Size: 4 kB
================================================================================

<div class="scan-modal container-fluid p-0">
  <div class="scan-header p-2 bg-dark text-white d-flex justify-content-between align-items-center">
    <div><strong>Scan QR</strong></div>
    <div>
      <button class="btn btn-sm btn-light me-2" (click)="stopScanner()" [disabled]="!scanning">Stop</button>
      <button class="btn btn-sm btn-primary" (click)="startScanner()" [disabled]="scanning">Start</button>
    </div>
  </div>

  <div class="scan-body d-flex justify-content-center align-items-center">
    <div class="scanner-wrapper">
      <video #video autoplay muted playsinline></video>

      <div #overlay class="scan-square">
        <div class="corner top-left"></div>
        <div class="corner top-right"></div>
        <div class="corner bottom-left"></div>
        <div class="corner bottom-right"></div>
      </div>
    </div>
  </div>

  <div class="scan-footer p-3">
  <div *ngIf="errorMsg" class="alert alert-danger">{{ errorMsg }}</div>

  <div *ngIf="lastResult && !showBatchQtyInput" class="card">
    <div class="card-body">
      <h5 class="card-title">Scanned item</h5>
  
      <div *ngIf="lastScannedItem; else rawView">
        <!-- Friendly table for common fields returned by backend -->
        <table class="table table-sm">
          <tr><th>Kind</th><td>{{ lastScannedItem.kind || (lastScannedItem.payload?.unitId ? 'unit' : 'batch') || '-' }}</td></tr>
          <tr><th>Item type</th><td>{{ lastScannedItem.payload?.itemType || lastScannedItem.type || '-' }}</td></tr>
          <tr><th>Unit ID</th><td>{{ lastScannedItem.unit?.id || lastScannedItem.payload?.unitId || '-' }}</td></tr>
          <tr><th>Inventory / Batch ID</th><td>{{ lastScannedItem.inventory?.id || lastScannedItem.payload?.id || lastScannedItem.payload?.inventoryId || '-' }}</td></tr>
          <tr><th>Name / Label</th><td>
            {{ lastScannedItem.unit?.apparelName || lastScannedItem.inventory?.apparelName || lastScannedItem.payload?.name || lastScannedItem.payload?.sku || '-' }}
          </td></tr>
          <tr><th>Qty (live)</th><td>{{ getDisplayedQuantity() }}</td></tr>
          <tr><th>Status</th><td>{{ lastScannedItem.unit?.status || lastScannedItem.inventory?.status || lastScannedItem.payload?.status || '-' }}</td></tr>
          <tr><th>Raw payload</th><td style="word-break:break-all;font-size:12px">{{ lastResult }}</td></tr>
        </table>
      </div>
  
      <ng-template #rawView>
        <!-- fallback: show raw text + parsed JSON if any -->
        <p><strong>Scanned text</strong></p>
        <pre style="max-height:120px;overflow:auto">{{ lastResult }}</pre>
        <div *ngIf="lastParsed">
          <p><strong>Parsed JSON</strong></p>
          <pre style="max-height:120px;overflow:auto">{{ lastParsed | json }}</pre>
        </div>
      </ng-template>
  
      <div class="mt-2">
        <button class="btn btn-danger me-2" (click)="onReleaseClicked()">Release</button>
        <button class="btn btn-secondary me-2" (click)="scanAgain()">Scan again</button>
  
      </div>
    </div>
  </div>
  

  <div *ngIf="showBatchQtyInput" class="card">
    <div class="card-body">
      <h5 class="card-title">Batch release</h5>
      <p *ngIf="lastParsed?.name"><strong>{{ lastParsed?.name }}</strong></p>

      <div class="mb-2">
        <label>Quantity to release</label>
        <input type="number" class="form-control" [(ngModel)]="batchQty" min="1" />
      </div>

      <div class="mb-2" *ngIf="!lastParsed?.roomId">
        <label>Room ID (required)</label>
        <input type="number" class="form-control" [(ngModel)]="batchRoomIdInput" />
      </div>

      <div class="d-flex">
        <button type="button" class="btn btn-danger me-2" (click)="confirmBatchRelease()">Confirm release</button>
        <button type="button" class="btn btn-secondary" (click)="cancelBatchRelease()">Cancel</button>
      </div>
    </div>
  </div>
</div>









================================================================================
File: src\app\scan\scan.component.scss
Size: 1.6 kB
================================================================================

/* src/app/scan/scan.component.scss */
.scan-modal {
    height: 100vh;
    display: flex;
    flex-direction: column;
  }
  
  .scan-body {
    flex: 1;
    background: #111;
  }
  
  .scanner-wrapper {
    position: relative;
    width: min(720px, 90vw);
    max-width: 720px;
    aspect-ratio: 1 / 1; /* keep it square */
    background: #000;
    overflow: hidden;
    border-radius: 8px;
  }
  
  .scanner-wrapper video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  /* square overlay - transparent center, subtle border corners */
  .scan-square {
    position: absolute;
    top: 0; left: 0; right: 0; bottom: 0;
    pointer-events: none;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  /* center area hint (transparent) */
  .scan-square::before {
    content: "";
    width: 80%;
    height: 80%;
    border-radius: 6px;
    box-shadow: 0 0 0 9999px rgba(0,0,0,0.25) inset;
  }
  
  /* corner marks */
  .corner {
    width: 28px;
    height: 28px;
    position: absolute;
    border: 3px solid #19f;
    box-sizing: border-box;
  }
  .corner.top-left { top: 6%; left: 6%; border-right: none; border-bottom: none; }
  .corner.top-right { top: 6%; right: 6%; border-left: none; border-bottom: none; }
  .corner.bottom-left { bottom: 6%; left: 6%; border-right: none; border-top: none; }
  .corner.bottom-right { bottom: 6%; right: 6%; border-left: none; border-top: none; }
  
  .scan-footer {
    background: #fff;
  }
  

================================================================================
File: src\app\scan\scan.component.ts
Size: 9.11 kB
================================================================================

import { Component, OnDestroy, AfterViewInit, ViewChild, ElementRef, ChangeDetectorRef  } from '@angular/core';
import { BrowserQRCodeReader } from '@zxing/library';
import { first } from 'rxjs/operators';

import { QrService, RoomService, AlertService } from '@app/_services';

@Component({
  selector: 'app-scan',
  templateUrl: './scan.component.html',
  styleUrls: ['./scan.component.scss']
})
export class ScanComponent implements AfterViewInit, OnDestroy {
  @ViewChild('video') videoRef!: ElementRef<HTMLVideoElement>;

  private codeReader = new BrowserQRCodeReader();
  scanning = false;
  lastResult: string | null = null;        // raw scanned text
  lastParsed: any = null;                 // parsed JSON (if any)
  lastScannedItem: any = null;            // enriched object returned by backend
  errorMsg: string | null = null;

  // batch-release UI state
  showBatchQtyInput = false;
  batchQty = 1;
  batchRoomIdInput: number | null = null;

  // update-status UI state
  openUpdateMenu = false;
  updating = false;
  statuses: string[] = ['in_stock', 'active', 'released', 'lost', 'damaged', 'repair'];

  constructor(
    private qrService: QrService,
    private roomService: RoomService,
    private alert: AlertService,
    private cd: ChangeDetectorRef
  ) {}

  async ngAfterViewInit() {
    // start after initial detection
    setTimeout(() => this.startScanner(), 0);
  }

  async startScanner() {
    this.errorMsg = null;
    try {
      this.scanning = true;
      // decodeFromVideoDevice calls our callback each time a result or error occurs
      await this.codeReader.decodeFromVideoDevice(null, this.videoRef.nativeElement, (result, err) => {
        if (result) {
          this.lastResult = result.getText();
          this.lastParsed = tryParseJson(this.lastResult);
          // stop live scanning and fetch canonical/enriched data from backend
          this.stopScanner();
          this.fetchScannedDetails(this.lastResult);
        }
      });
    } catch (err: any) {
      this.errorMsg = err?.message || String(err);
      this.scanning = false;
    }
  }

  stopScanner() {
    try { this.codeReader.reset(); } catch (e) {}
    this.scanning = false;
    this.cd.detectChanges();
  }

  ngOnDestroy() {
    this.stopScanner();
  }

  // New: ask backend to verify the scanned text and return canonical item/unit/inventory
  fetchScannedDetails(qrText: string) {
    this.lastScannedItem = null;
    this.errorMsg = null;
    if (!qrText) { this.errorMsg = 'Empty QR payload'; return; }

    // match backend API signature: verifyQr expects payload object (qrId)
    this.qrService.verifyQr({ qrId: qrText }).pipe(first()).subscribe({
      next: (res: any) => {
        // backend returns { item } â but some implementations might return item directly
        this.lastScannedItem = res?.item || res;
        // keep parsed JSON handy
        this.lastParsed = this.lastParsed || tryParseJson(this.lastResult);
        this.cd.detectChanges();
      },
      error: (err: any) => {
        this.lastScannedItem = null;
        this.errorMsg = err?.error?.message || err?.message || 'Item not found';
        this.cd.detectChanges();
      }
    });
  }

  // Keep Release logic but prefer lastScannedItem for canonical fields
  onReleaseClicked() {
    const payload = this.lastScannedItem?.payload || this.lastParsed || tryParseJson(this.lastResult) || { raw: this.lastResult };

    // unit-level QR
    if (payload.unitId) {
      this.releaseUnit(payload);
      return;
    }

    // batch-level QR (inventory id)
    const inventoryId = payload.id || payload.inventoryId || payload.apparelInventoryId;
    if (inventoryId) {
      this.batchRoomIdInput = payload.roomId || null;
      this.showBatchQtyInput = true;
      this.batchQty = 1;
      return;
    }

    this.alert.error('Scanned QR is not a recognizable unit or batch payload.');
  }

  // existing releaseUnit kept (uses roomService or qrService as before)
  private releaseUnit(payload: any) {
    const stockroomType = payload.itemType || 'apparel';
    const unitId = payload.unitId;
    if (!unitId) { this.alert.error('Unit ID not found in QR payload.'); return; }

    // prefer roomService call when roomId exists
    const roomId = payload.roomId || this.batchRoomIdInput || null;
    if (stockroomType === 'apparel' && roomId) {
      const roomIdNum = Number(roomId);
      const releasePayload = { unitId: Number(unitId) };
      this.roomService.releaseApparel(Number(roomIdNum), releasePayload).pipe(first()).subscribe({
        next: () => { this.alert.success('Unit released successfully.'); this.resetAfterRelease(); setTimeout(()=>this.startScanner(), 300); },
        error: (err) => { const msg = err?.error?.message || err?.message || String(err); this.alert.error(`Failed to release: ${msg}`); }
      });
      return;
    }

    // fallback to qrService.releaseUnit (if implemented)
    if (typeof this.qrService.releaseUnit === 'function') {
      this.qrService.releaseUnit(stockroomType, unitId).pipe(first()).subscribe({
        next: () => { this.alert.success('Unit released successfully.'); this.resetAfterRelease(); setTimeout(()=>this.startScanner(), 300); },
        error: (err) => { const msg = err?.error?.message || err?.message || String(err); this.alert.error(`Failed to release: ${msg}`); }
      });
      return;
    }

    this.alert.error('Release not implemented for this payload (adapt releaseUnit to call your API).');
  }

  confirmBatchRelease() {
    if (!this.lastParsed && !this.lastResult) {
      this.alert.error('No scanned payload available.');
      return;
    }
  
    const payload = this.lastParsed || tryParseJson(this.lastResult) || { raw: this.lastResult };
  
    // prefer the inventory id names used across backend
    const inventoryId = payload.id || payload.inventoryId || payload.apparelInventoryId;
    if (!inventoryId) {
      this.alert.error('Inventory id not found in scanned QR payload.');
      return;
    }
  
    const roomId = payload.roomId || this.batchRoomIdInput;
    if (!roomId) {
      this.alert.error('Room id required for batch release.');
      return;
    }
  
    // Build payload with the exact field names backend expects
    const releasePayload: any = {
      apparelInventoryId: Number(inventoryId),
      releaseApparelQuantity: Number(this.batchQty)
    };
  
    // Call the room service (subscribe is important)
    this.roomService.releaseApparel(Number(roomId), releasePayload).pipe(first()).subscribe({
      next: (res: any) => {
        this.alert.success('Batch released successfully.');
        this.resetAfterRelease();
        // Restart scanning after a short delay so camera restarts cleanly
        setTimeout(() => this.startScanner(), 300);
      },
      error: (err: any) => {
        const msg = err?.error?.message || err?.message || String(err);
        this.alert.error(`Failed to release: ${msg}`);
      }
    });
  }

  cancelBatchRelease() {
    this.showBatchQtyInput = false;
    this.batchQty = 1;
    this.batchRoomIdInput = null;
  }

  resetAfterRelease() {
    this.lastResult = null;
    this.lastParsed = null;
    this.lastScannedItem = null;
    this.showBatchQtyInput = false;
    this.batchQty = 1;
    this.batchRoomIdInput = null;
    this.openUpdateMenu = false;
    this.updating = false;
    this.cd.detectChanges();
  }

  // New user action: restart scanning without leaving the view
  scanAgain() {
    this.resetAfterRelease();
    setTimeout(()=> this.startScanner(), 100);
  }

  // Friendly quantity extractor (defensive: many possible shapes)
  getDisplayedQuantity(): number | string {
    const it = this.lastScannedItem;
    if (!it) return '-';

    // If backend returned a "unit" with a parent inventory
    const unit = it.unit || (it.payload && it.payload.unit) || null;
    const inv = it.inventory || it.batch || it.inventoryRecord || null;

    const cand = [
      unit?.totalQuantity, unit?.quantity, unit?.qty,
      inv?.totalQuantity, inv?.quantity, inv?.qty,
      it?.totalQuantity, it?.quantity, it?.qty
    ];
    for (const c of cand) if (c !== undefined && c !== null) return c;
    return '-';
  }

  // helpers used by update/status UI (left unchanged)
  extractUnitId() {
    const p = this.lastScannedItem?.payload || this.lastParsed || tryParseJson(this.lastResult);
    return p?.unitId || null;
  }
  extractItemType() {
    const p = this.lastScannedItem?.payload || this.lastParsed || tryParseJson(this.lastResult);
    return p?.itemType || p?.type || null;
  }
  extractRoomId() {
    const p = this.lastScannedItem?.payload || this.lastParsed || tryParseJson(this.lastResult);
    return p?.roomId || null;
  }
}

/** small helper (kept from original file) */
function tryParseJson(s: any) {
  try { return JSON.parse(s); } catch (e) { return null; }
}

================================================================================
File: src\app\scan\scan.module.ts
Size: 416 B
================================================================================

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ScanRoutingModule } from './scan-routing.module';
import { ScanComponent } from './scan.component';
import { FormsModule } from '@angular/forms';

@NgModule({
  declarations: [
    ScanComponent
],
  imports: [
    CommonModule,
    FormsModule,
    ScanRoutingModule
  ]
})
export class ScanModule {}

================================================================================
File: src\app\transfer\transfer-create.component.html
Size: 1.56 kB
================================================================================

<form [formGroup]="form" (ngSubmit)="submit()">
    <div class="mb-2">
      <label>From Room ID</label>
      <input formControlName="fromRoomId" class="form-control" />
      <div *ngIf="form.controls.fromRoomId.touched && form.controls.fromRoomId.invalid" class="text-danger small">
        Required
      </div>
    </div>
  
    <div class="mb-2">
      <label>To Room ID</label>
      <input formControlName="toRoomId" class="form-control" />
    </div>
  
    <div class="row">
      <div class="col-md-4 mb-2">
        <label>Item Type</label>
        <select formControlName="itemType" class="form-select">
          <option value="apparel">Apparel</option>
          <option value="supply">Admin Supply</option>
          <option value="genItem">General Item</option>
        </select>
      </div>
  
      <div class="col-md-4 mb-2">
        <label>Item ID</label>
        <input formControlName="itemId" class="form-control" />
      </div>
  
      <div class="col-md-4 mb-2">
        <label>Quantity</label>
        <input type="number" formControlName="quantity" class="form-control" min="1" />
      </div>
    </div>
  
    <div class="mb-2">
      <label>Note</label>
      <textarea formControlName="note" class="form-control" rows="2"></textarea>
    </div>
  
    <div class="d-flex gap-2">
      <button class="btn btn-primary" type="submit" [disabled]="submitting">Create</button>
      <button type="button" class="btn btn-secondary" (click)="cancel()">Cancel</button>
    </div>
  </form>
  

================================================================================
File: src\app\transfer\transfer-create.component.ts
Size: 1.64 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { TransferService } from '@app/_services';
import { AlertService } from '@app/_services';
import { first } from 'rxjs/operators';

@Component({
  selector: 'app-transfer-create',
  templateUrl: './transfer-create.component.html'
})
export class TransferCreateComponent implements OnInit {
  form!: FormGroup;
  submitting = false;

  constructor(
    private fb: FormBuilder,
    private transferService: TransferService,
    private alert: AlertService,
    private router: Router
  ) {}

  ngOnInit() {
    this.form = this.fb.group({
      fromRoomId: [null, [Validators.required]],
      toRoomId:   [null, [Validators.required]],
      itemType:   ['apparel', [Validators.required]],
      itemId:     [null, [Validators.required]],
      quantity:   [1, [Validators.required, Validators.min(1)]],
      note:       ['']
    });
  }

  submit() {
    if (this.form.invalid) {
      this.form.markAllAsTouched();
      return this.alert.error('Please fill required fields');
    }

    const payload = this.form.value;
    this.submitting = true;
    this.transferService.create(payload).pipe(first()).subscribe({
      next: () => {
        this.alert.success('Transfer created');
        this.submitting = false;
        this.router.navigate(['/transfers']);
      },
      error: err => { this.alert.error(err); this.submitting = false; }
    });
  }

  cancel() { this.router.navigate(['/transfers']); }
}


================================================================================
File: src\app\transfer\transfer-list.component.html
Size: 2.39 kB
================================================================================

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h5 class="mb-0">Transfers</h5>
      <div>
        <button class="btn btn-primary btn-sm" (click)="goCreate()">
          <i class="fa fa-plus"></i> Create Transfer
        </button>
      </div>
    </div>
  
    <div class="card-body">
      <div class="mb-3 d-flex gap-2 align-items-center">
        <select (change)="load()" class="form-select form-select-sm w-auto">
          <option value="">All statuses</option>
          <option value="in_transfer">In Transfer</option>
          <option value="transfer_accepted">Transfer Accepted</option>
          <option value="returning">Returning</option>
          <option value="return_accepted">Return Accepted</option>
        </select>
        <button class="btn btn-outline-secondary btn-sm" (click)="load()">Refresh</button>
      </div>
  
      <table class="table table-sm table-hover">
        <thead>
          <tr>
            <th>ID</th>
            <th>From â To</th>
            <th>Item</th>
            <th>Qty</th>
            <th>Status</th>
            <th>Created</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <tr *ngFor="let t of transfers">
            <td>{{ t.transferId }}</td>
            <td>{{ t.fromRoomId }} â {{ t.toRoomId }}</td>
            <td>
              {{ t.itemType }}<span *ngIf="t.itemId"> #{{ t.itemId }}</span>
            </td>
            <td>{{ t.quantity }}</td>
            <td><span class="badge bg-secondary text-light">{{ t.status }}</span></td>
            <td>{{ t.createdAt | date:'short' }}</td>
            <td>
              <button class="btn btn-sm btn-light" (click)="view(t)">View</button>
  
              <button *ngIf="canAccept(t)" class="btn btn-sm btn-success" (click)="accept(t)">Accept</button>
  
              <button *ngIf="canReturn(t)" class="btn btn-sm btn-warning" (click)="initiateReturn(t)">Return</button>
  
              <button *ngIf="canAcceptReturned(t)" class="btn btn-sm btn-primary" (click)="acceptReturned(t)">Accept Returned</button>
            </td>
          </tr>
        </tbody>
      </table>
  
      <div *ngIf="!transfers || transfers.length === 0" class="text-center text-muted">No transfers yet.</div>
    </div>
  </div>

================================================================================
File: src\app\transfer\transfer-list.component.ts
Size: 2.91 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { TransferService } from '@app/_services';
import { AlertService } from '@app/_services';
import { first } from 'rxjs/operators';
import { Transfer } from '@app/_models/transfer.model';

@Component({
  selector: 'app-transfer-list',
  templateUrl: './transfer-list.component.html'
})
export class TransferListComponent implements OnInit {
  transfers: Transfer[] = [];
  loading = false;
  filterStatus = '';
  roomId: number | null = null; // optionally filter by current room
  account: any;

  constructor(
    private transferService: TransferService,
    private alert: AlertService,
    private router: Router
  ) {}

  ngOnInit() {
    // optional: if you have account service, get current account
    // this.account = this.accountService.accountValue;
    this.load();
  }

  load() {
    this.loading = true;
    const params: any = {};
    if (this.filterStatus) params.status = this.filterStatus;
    // if you want to limit to this room (received or sent) add to params like toRoomId or fromRoomId
    this.transferService.list(params).pipe(first()).subscribe({
      next: (rows: any) => { this.transfers = rows; this.loading = false; },
      error: err => { this.alert.error(err); this.loading = false; }
    });
  }

  goCreate() {
    this.router.navigate(['/transfers/create']);
  }

  view(transfer: Transfer) {
    // navigate to view page if you make one, or show modal
    // example: this.router.navigate(['/transfers', transfer.transferId]);
    this.alert.info(JSON.stringify(transfer, null, 2));
  }

  accept(transfer: Transfer) {
    if (!confirm('Accept this transfer?')) return;
    this.transferService.accept(transfer.transferId).pipe(first()).subscribe({
      next: () => { this.alert.success('Transfer accepted'); this.load(); },
      error: e => this.alert.error(e)
    });
  }

  initiateReturn(transfer: Transfer) {
    if (!confirm('Start return to sender?')) return;
    this.transferService.return(transfer.transferId).pipe(first()).subscribe({
      next: () => { this.alert.success('Return initiated'); this.load(); },
      error: e => this.alert.error(e)
    });
  }

  acceptReturned(transfer: Transfer) {
    if (!confirm('Accept returned items?')) return;
    this.transferService.acceptReturn(transfer.transferId).pipe(first()).subscribe({
      next: () => { this.alert.success('Return accepted'); this.load(); },
      error: e => this.alert.error(e)
    });
  }

  // simple helper to show which actions are visible depending on status + role
  canAccept(t: Transfer): boolean { return t.status === 'in_transfer'; }
  canReturn(t: Transfer): boolean { return t.status === 'transfer_accepted'; }
  canAcceptReturned(t: Transfer): boolean { return t.status === 'returning'; }
}

================================================================================
File: src\app\transfer\transfer-routing.module.ts
Size: 550 B
================================================================================

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { TransferListComponent } from './transfer-list.component';
import { TransferCreateComponent } from './transfer-create.component';

const routes: Routes = [
  { path: '', component: TransferListComponent },       // /transfers
  { path: 'create', component: TransferCreateComponent } // /transfers/create
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class TransferRoutingModule {}

================================================================================
File: src\app\transfer\transfer.module.ts
Size: 610 B
================================================================================

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { TransferRoutingModule } from './transfer-routing.module';

import { TransferListComponent } from './transfer-list.component';
import { TransferCreateComponent } from './transfer-create.component';

@NgModule({
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    TransferRoutingModule
  ],
  declarations: [
    TransferListComponent,
    TransferCreateComponent
  ]
})
export class TransferModule {}

================================================================================
File: src\app\_components\alert.component.html
Size: 307 B
================================================================================

ï»¿<div *ngIf="alerts.length" class="container">
    <div class="m-3">
        <div *ngFor="let alert of alerts" class="{{cssClasses(alert)}}">
            <span [innerHTML]="alert.message"></span>
            <button class="btn-close" (click)="removeAlert(alert)"></button>
        </div>
    </div>
</div>

================================================================================
File: src\app\_components\alert.component.ts
Size: 2.51 kB
================================================================================

ï»¿import { Component, OnInit, OnDestroy, Input }  from '@angular/core';
import { Router, NavigationStart }              from '@angular/router';
import { Subscription }                         from 'rxjs';

import { Alert, AlertType } from '@app/_models';
import { AlertService }     from '@app/_services';

@Component({ selector: 'alert', templateUrl: 'alert.component.html' })
export class AlertComponent implements OnInit, OnDestroy {
    @Input() id = 'default-alert';
    @Input() fade = true;

    alerts: Alert[] = [];
    alertSubscription!: Subscription;
    routeSubscription!: Subscription;

    constructor(private router: Router, private alertService: AlertService) { }

    ngOnInit() {
        this.alertSubscription = this.alertService.onAlert(this.id)
            .subscribe(alert => {
                if (!alert.message) {
                    this.alerts = this.alerts.filter(x => x.keepAfterRouteChange);

                    this.alerts.forEach(x => delete x.keepAfterRouteChange);
                    return;
                }

                this.alerts.push(alert);

                if (alert.autoClose) {
                    setTimeout(() => this.removeAlert(alert), 3000);
                }
            });

        this.routeSubscription = this.router.events.subscribe(event => {
            if (event instanceof NavigationStart) {
                this.alertService.clear(this.id);
            }
        });
    }

    ngOnDestroy() {
        this.alertSubscription.unsubscribe();
        this.routeSubscription.unsubscribe();
    }

    removeAlert(alert: Alert) {
        if (!this.alerts.includes(alert)) return;

        if (this.fade) {
            alert.fade = true;

            setTimeout(() => {
                this.alerts = this.alerts.filter(x => x !== alert);
            }, 250);
        } else {
            this.alerts = this.alerts.filter(x => x !== alert);
        }
    }

    cssClasses(alert: Alert) {
        if (!alert) return;

        const classes = ['alert', 'alert-dismissible', 'mt-4', 'container'];

        const alertTypeClass = {
            [AlertType.Success]: 'alert-success',
            [AlertType.Error]: 'alert-danger',
            [AlertType.Info]: 'alert-info',
            [AlertType.Warning]: 'alert-warning'
        }

        if (alert.type !== undefined) {
            classes.push(alertTypeClass[alert.type]);
        }

        if (alert.fade) {
            classes.push('fade');
        }

        return classes.join(' ');
    }
}

================================================================================
File: src\app\_components\index.ts
Size: 35 B
================================================================================

export * from './alert.component';


================================================================================
File: src\app\_helpers\app.initializer.ts
Size: 871 B
================================================================================

import { APP_INITIALIZER }  from '@angular/core';
import { of }               from 'rxjs';
import { catchError }       from 'rxjs/operators';
import { AccountService }   from '@app/_services';

export function appInitializer(accountService: AccountService) {
  return () => {
    try {
      const hasAccount = !!localStorage.getItem('account');
      const hasRefreshCookie = typeof document !== 'undefined' && document.cookie && document.cookie.includes('refreshToken=');

      if (!hasAccount && !hasRefreshCookie) {
        return Promise.resolve();
      }

      return accountService.refreshToken().pipe(
        catchError(() => of(null))
      ).toPromise();
    } catch (e) {
      return Promise.resolve();
    }
  };
}

export const appInitializerProvider = [
  { provide: APP_INITIALIZER, useFactory: appInitializer, deps: [AccountService], multi: true }
];

================================================================================
File: src\app\_helpers\auth.guard.ts
Size: 895 B
================================================================================

ï»¿import { Injectable } from '@angular/core';
import { 
    Router, 
    CanActivate, 
    ActivatedRouteSnapshot, 
    RouterStateSnapshot 
} from '@angular/router';

import { AccountService } from '@app/_services';

@Injectable({ providedIn: 'root' })
export class AuthGuard implements CanActivate {
    constructor(
        private router: Router,
        private accountService: AccountService
    ) { }

    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
        const account = this.accountService.accountValue;
        if (account) {
            if (route.data.roles && !route.data.roles.includes(account.role)) {
                this.router.navigate(['/']);
                return false;
            }
            return true;
        }

        this.router.navigate(['/account/login'], { queryParams: { returnUrl: state.url } });
        return false;
    }
}

================================================================================
File: src\app\_helpers\error.interceptor.ts
Size: 1.31 kB
================================================================================

import { Injectable } from '@angular/core';
import { catchError } from 'rxjs/operators';
import { 
  Observable, 
  throwError 
} from 'rxjs';
import { 
  HttpRequest, 
  HttpHandler, 
  HttpEvent, 
  HttpInterceptor 
} from '@angular/common/http';

import { AccountService, AlertService } from '@app/_services';

@Injectable()
export class ErrorInterceptor implements HttpInterceptor {
  constructor(private accountService: AccountService, private alertService: AlertService) {}

  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    return next.handle(request).pipe(catchError(err => {
      const url = (err && err.url) || request?.url || '';

      if (typeof url === 'string' && url.includes('/accounts/refresh-token')) {
        return throwError(() => new Error('refresh-failed'));
      }

      if (err.status === 401 && this.accountService.accountValue) {
        console.warn('Unauthorized - logging out', err);
        this.accountService.logout();
      }

      if (err.status === 403) {
        this.alertService?.error('You do not have permission to perform this action.');
      }

      const error = (err && err.error && err.error.message) || err.statusText || 'Server error';
      console.error(err);
      return throwError(() => (error));
    }));
  }
}

================================================================================
File: src\app\_helpers\fake-backend.ts
Size: 15.91 kB
================================================================================

ï»¿import { Injectable } from '@angular/core';
import { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS } from '@angular/common/http';
import { Observable, of, throwError } from 'rxjs';
import { delay, materialize, dematerialize } from 'rxjs/operators';

import { AlertService } from '@app/_services';
import { Role } from '@app/_models';



// array in local storage for accounts
const accountsKey = 'angular-15-signup-verification-boilerplate-accounts';
let accounts: any[] = JSON.parse(localStorage.getItem(accountsKey)!) || [];


@Injectable()
export class FakeBackendInterceptor implements HttpInterceptor {
    constructor(private alertService: AlertService) { }

    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
        const { url, method, headers, body } = request;
        const alertService = this.alertService;

        return handleRoute();

        function handleRoute() {
            switch (true) {
                case url.endsWith('/accounts/authenticate') && method === 'POST':
                    return authenticate();
                case url.endsWith('/accounts/refresh-token') && method === 'POST':
                    return refreshToken();
                case url.endsWith('/accounts/revoke-token') && method === 'POST':
                    return revokeToken();
                case url.endsWith('/accounts/register') && method === 'POST':
                    return register();
                case url.endsWith('/accounts/verify-email') && method === 'POST':
                    return verifyEmail();
                case url.endsWith('/accounts/forgot-password') && method === 'POST':
                    return forgotPassword();
                case url.endsWith('/accounts/validate-reset-token') && method === 'POST':
                    return validateResetToken();
                case url.endsWith('/accounts/reset-password') && method === 'POST':
                    return resetPassword();
                case url.endsWith('/accounts') && method === 'GET':
                    return getAccounts();
                case url.match(/\/accounts\/\d+$/) && method === 'GET':
                    return getAccountById();
                case url.endsWith('/accounts') && method === 'POST':
                    return createAccount();
                case url.match(/\/accounts\/\d+$/) && method === 'PUT':
                    return updateAccount();
                case url.match(/\/accounts\/\d+$/) && method === 'DELETE':
                    return deleteAccount();
                default:
                    // pass through any requests not handled above
                    return next.handle(request);
            }    
        }

        // route functions

        function authenticate() {
            const { email, password } = body;
            const account = accounts.find(x => x.email === email && x.password === password && x.isVerified);
            
            if (!account) return error('Email or password is incorrect');

            // add refresh token to account
            account.refreshTokens.push(generateRefreshToken());
            localStorage.setItem(accountsKey, JSON.stringify(accounts));

            return ok({
                ...basicDetails(account),
                jwtToken: generateJwtToken(account)
            });
        }

        function refreshToken() {
            const refreshToken = getRefreshToken();
            
            if (!refreshToken) return unauthorized();

            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));
            
            if (!account) return unauthorized();

            // replace old refresh token with a new one and save
            account.refreshTokens = account.refreshTokens.filter((x: any) => x !== refreshToken);
            account.refreshTokens.push(generateRefreshToken());
            localStorage.setItem(accountsKey, JSON.stringify(accounts));

            return ok({
                ...basicDetails(account),
                jwtToken: generateJwtToken(account)
            });
        }

        function revokeToken() {
            if (!isAuthenticated()) return unauthorized();
            
            const refreshToken = getRefreshToken();
            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));
            
            // revoke token and save
            account.refreshTokens = account.refreshTokens.filter((x: any) => x !== refreshToken);
            localStorage.setItem(accountsKey, JSON.stringify(accounts));

            return ok();
        }

        function register() {
            const account = body;

            if (accounts.find(x => x.email === account.email)) {
                // display email already registered "email" in alert
                setTimeout(() => {
                    alertService.info(`
                        <h4>Email Already Registered</h4>
                        <p>Your email ${account.email} is already registered.</p>
                        <p>If you don't know your password please visit the <a href="${location.origin}/account/forgot-password">forgot password</a> page.</p>
                        <div><strong>NOTE:</strong> The fake backend displayed this "email" so you can test without an api. A real backend would send a real email.</div>
                    `, { autoClose: false });
                }, 1000);

                // always return ok() response to prevent email enumeration
                return ok();
            }

            // assign account id and a few other properties then save
            account.id = newAccountId();
            if (account.id === 1) {
                // first registered account is an admin
                account.role = Role.Admin;
            } else {
                account.role = Role.User;
            }
            account.dateCreated = new Date().toISOString();
            account.verificationToken = new Date().getTime().toString();
            account.isVerified = false;
            account.refreshTokens = [];
            delete account.confirmPassword;
            accounts.push(account);
            localStorage.setItem(accountsKey, JSON.stringify(accounts));

            // display verification email in alert
            setTimeout(() => {
                const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;
                alertService.info(`
                    <h4>Verification Email</h4>
                    <p>Thanks for registering!</p>
                    <p>Please click the below link to verify your email address:</p>
                    <p><a href="${verifyUrl}">${verifyUrl}</a></p>
                    <div><strong>NOTE:</strong> The fake backend displayed this "email" so you can test without an api. A real backend would send a real email.</div>
                `, { autoClose: false });
            }, 1000);

            return ok();
        }
        
        function verifyEmail() {
            const { token } = body;
            const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);
            
            if (!account) return error('Verification failed');
            
            // set is verified flag to true if token is valid
            account.isVerified = true;
            localStorage.setItem(accountsKey, JSON.stringify(accounts));

            return ok();
        }

        function forgotPassword() {
            const { email } = body;
            const account = accounts.find(x => x.email === email);
            
            // always return ok() response to prevent email enumeration
            if (!account) return ok();
            
            // create reset token that expires after 24 hours
            account.resetToken = new Date().getTime().toString();
            account.resetTokenExpires = new Date(Date.now() + 24*60*60*1000).toISOString();
            localStorage.setItem(accountsKey, JSON.stringify(accounts));

            // display password reset email in alert
            setTimeout(() => {
                const resetUrl = `${location.origin}/account/reset-password?token=${account.resetToken}`;
                alertService.info(`
                    <h4>Reset Password Email</h4>
                    <p>Please click the below link to reset your password, the link will be valid for 1 day:</p>
                    <p><a href="${resetUrl}">${resetUrl}</a></p>
                    <div><strong>NOTE:</strong> The fake backend displayed this "email" so you can test without an api. A real backend would send a real email.</div>
                `, { autoClose: false });
            }, 1000);

            return ok();
        }
        
        function validateResetToken() {
            const { token } = body;
            const account = accounts.find(x =>
                !!x.resetToken && x.resetToken === token &&
                new Date() < new Date(x.resetTokenExpires)
            );
            
            if (!account) return error('Invalid token');
            
            return ok();
        }

        function resetPassword() {
            const { token, password } = body;
            const account = accounts.find(x =>
                !!x.resetToken && x.resetToken === token &&
                new Date() < new Date(x.resetTokenExpires)
            );
            
            if (!account) return error('Invalid token');
            
            // update password and remove reset token
            account.password = password;
            account.isVerified = true;
            delete account.resetToken;
            delete account.resetTokenExpires;
            localStorage.setItem(accountsKey, JSON.stringify(accounts));

            return ok();
        }

        function getAccounts() {
            if (!isAuthenticated()) return unauthorized();
            return ok(accounts.map(x => basicDetails(x)));
        }

        function getAccountById() {
            if (!isAuthenticated()) return unauthorized();

            let account = accounts.find(x => x.id === idFromUrl());

            // user accounts can get own profile and admin accounts can get all profiles
            if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {
                return unauthorized();
            }

            return ok(basicDetails(account));
        }

        function createAccount() {
            if (!isAuthorized(Role.Admin)) return unauthorized();

            const account = body;
            if (accounts.find(x => x.email === account.email)) {
                return error(`Email ${account.email} is already registered`);
            }

            // assign account id and a few other properties then save
            account.id = newAccountId();
            account.dateCreated = new Date().toISOString();
            account.isVerified = true;
            account.refreshTokens = [];
            delete account.confirmPassword;
            accounts.push(account);
            localStorage.setItem(accountsKey, JSON.stringify(accounts));

            return ok();
        }

        function updateAccount() {
            if (!isAuthenticated()) return unauthorized();

            let params = body;
            let account = accounts.find(x => x.id === idFromUrl());

            // user accounts can update own profile and admin accounts can update all profiles
            if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {
                return unauthorized();
            }

            // only update password if included
            if (!params.password) {
                delete params.password;
            }
            // don't save confirm password
            delete params.confirmPassword;

            // update and save account
            Object.assign(account, params);
            localStorage.setItem(accountsKey, JSON.stringify(accounts));

            return ok(basicDetails(account));
        }

        function deleteAccount() {
            if (!isAuthenticated()) return unauthorized();

            let account = accounts.find(x => x.id === idFromUrl());

            // user accounts can delete own account and admin accounts can delete any account
            if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {
                return unauthorized();
            }

            // delete account then save
            accounts = accounts.filter(x => x.id !== idFromUrl());
            localStorage.setItem(accountsKey, JSON.stringify(accounts));
            return ok();
        }
        
        // helper functions

        function ok(body?: any) {
            return of(new HttpResponse({ status: 200, body }))
                .pipe(delay(500)); // delay observable to simulate server api call
        }

        function error(message: string) {
            return throwError(() => ({ error: { message } }))
                .pipe(materialize(), delay(500), dematerialize()); // call materialize and dematerialize to ensure delay even if an error is thrown (https://github.com/Reactive-Extensions/RxJS/issues/648);
        }

        function unauthorized() {
            return throwError(() => ({ status: 401, error: { message: 'Unauthorized' } }))
                .pipe(materialize(), delay(500), dematerialize());
        }

        function basicDetails(account: any) {
            const { id, title, firstName, lastName, email, role, dateCreated, isVerified } = account;
            return { id, title, firstName, lastName, email, role, dateCreated, isVerified };
        }

        function isAuthenticated() {
            return !!currentAccount();
        }

        function isAuthorized(role: any) {
            const account = currentAccount();
            if (!account) return false;
            return account.role === role;
        }

        function idFromUrl() {
            const urlParts = url.split('/');
            return parseInt(urlParts[urlParts.length - 1]);
        }

        function newAccountId() {
            return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;
        }

        function currentAccount() {
            // check if jwt token is in auth header
            const authHeader = headers.get('Authorization');
            if (!authHeader?.startsWith('Bearer fake-jwt-token')) return;

            // check if token is expired
            const jwtToken = JSON.parse(atob(authHeader.split('.')[1]));
            const tokenExpired = Date.now() > (jwtToken.exp * 1000);
            if (tokenExpired) return;

            const account = accounts.find(x => x.id === jwtToken.id);
            return account;
        }

        function generateJwtToken(account: any) {
            // create token that expires in 15 minutes
            const tokenPayload = { 
                exp: Math.round(new Date(Date.now() + 15*60*1000).getTime() / 1000),
                id: account.id
            }
            return `fake-jwt-token.${btoa(JSON.stringify(tokenPayload))}`;
        }

        function generateRefreshToken() {
            const token = new Date().getTime().toString();

            // add token cookie that expires in 7 days
            const expires = new Date(Date.now() + 7*24*60*60*1000).toUTCString();
            document.cookie = `fakeRefreshToken=${token}; expires=${expires}; path=/`;

            return token;
        }

        function getRefreshToken() {
            // get refresh token from cookie
            return (document.cookie.split(';').find(x => x.includes('fakeRefreshToken')) || '=').split('=')[1];
        }
    }
}

export let fakeBackendProvider = {
    // use fake backend in place of Http service for backend-less development
    provide: HTTP_INTERCEPTORS,
    useClass: FakeBackendInterceptor,
    multi: true   
};



================================================================================
File: src\app\_helpers\index.ts
Size: 211 B
================================================================================

ï»¿export * from './app.initializer';
export * from './auth.guard';
export * from './error.interceptor';
export * from './fake-backend';
export * from './jwt.interceptor';
export * from './must-match.validator';

================================================================================
File: src\app\_helpers\jwt.interceptor.ts
Size: 1.02 kB
================================================================================

import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { 
    HttpRequest, 
    HttpHandler, 
    HttpEvent, 
    HttpInterceptor 
} from '@angular/common/http';

import { environment }    from '@environments/environment';
import { AccountService } from '@app/_services';

@Injectable()
export class JwtInterceptor implements HttpInterceptor {
    constructor(private accountService: AccountService) { }

    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
        // add auth header with jwt if account is logged in and request is to the api url
        const account = this.accountService.accountValue;
        const isLoggedIn = account && account.jwtToken;
        const isApiUrl = request.url.startsWith(environment.apiUrl);
        if (isLoggedIn && isApiUrl) {
            request = request.clone({
                setHeaders: { Authorization: `Bearer ${account.jwtToken}` }
            });
        }

        return next.handle(request);
    }
}

================================================================================
File: src\app\_helpers\must-match.validator.ts
Size: 689 B
================================================================================

import { AbstractControl } from '@angular/forms';

export function MustMatch(controlName: string, matchingControlName: string) {
    return (group: AbstractControl) => {
        const control = group.get(controlName);
        const matchingControl = group.get(matchingControlName);

        if (!control || !matchingControl) {
            return null;
        }

        if (matchingControl.errors && !matchingControl.errors.mustMatch) {
            return null;
        }

        if (control.value !== matchingControl.value) {
            matchingControl.setErrors({ mustMatch: true });
        } else {
            matchingControl.setErrors(null);
        }
        return null;
    }
}

================================================================================
File: src\app\_models\account.ts
Size: 225 B
================================================================================

ï»¿import { Role } from './role';

export class Account {
    AccountId?: number;
    title?:     string;
    firstName?: string;
    lastName?:  string;
    email?:     string;
    role?:      Role;
    jwtToken?:  string;
}

================================================================================
File: src\app\_models\alert.ts
Size: 541 B
================================================================================

export class Alert {
    id?:                    string;
    type?:                  AlertType;
    message?:               string;
    autoClose?:             boolean;
    keepAfterRouteChange?:  boolean;
    fade?:                  boolean;

    constructor(init?: Partial<Alert>) {
        Object.assign(this, init);
    }
}

export enum AlertType {
    Success,
    Error,
    Info,
    Warning
}

export class AlertOptions {
    id?:                    string;
    autoClose?:             boolean;
    keepAfterRouteChange?:  boolean;
}

================================================================================
File: src\app\_models\index.ts
Size: 248 B
================================================================================

ï»¿export * from './account';
export * from './alert';
export * from './role';
export * from './room';
export * from './stock-request.model';
export * from './item-request.model';
export * from './transfer.model';
export * from './inventory.model';

================================================================================
File: src\app\_models\inventory.model.ts
Size: 949 B
================================================================================

export interface BaseReceivePayload {
    receivedFrom?:  string;
    receivedBy?:    number;
    notes?:         string;
  }
  
  export interface ApparelReceivePayload extends BaseReceivePayload {
    apparelName:      string;
    apparelLevel:     string;
    apparelType:      string;
    apparelFor:       string;
    apparelSize:      string;
    apparelQuantity:  number;
  }
  
  export interface SupplyReceivePayload extends BaseReceivePayload {
    supplyName:     string;
    supplyType?:    string;
    supplyMeasure?: string;
    supplyQuantity: number;
  }
  
  export interface GenItemReceivePayload extends BaseReceivePayload {
    genItemName:      string;
    genItemType?:     string;
    genItemSize?:     string;
    genItemQuantity:  number;
  }
  
  // Optional: API response type
  export interface ReceiveResult {
    success:    boolean;
    message?:   string;
    createdId?: number;
  }

================================================================================
File: src\app\_models\item-request.model.ts
Size: 897 B
================================================================================

export interface ItemRequestedEntry {
    id?:        number;  
    itemId?:    number | null;
    itemType?:  string | null;
    quantity?:  number;
    note?:      string | null;
    [key: string]: any;
  }
  
  export interface ItemRequestedInfo {
    kind?:      'inventory' | 'unit' | 'unknown' | null;
    type?:      string | null;
    inventory?: any | null;
    unit?:      any | null;
  }
  
  export interface ItemRequest {
    itemRequestId?:       number;
    id?:                  number;
    acccountId?:          number;
    requesterRoomId?:     number | null;
    items?:               ItemRequestedEntry[];
    status?:              string; 
    note?:                string | null;
    createdAt?:           string | Date;
    updatedAt?:           string | Date;
    requestedItemsInfo?:  ItemRequestedInfo[] | null;
    [key: string]: any;
  }
  

================================================================================
File: src\app\_models\receive-apparel.ts
Size: 445 B
================================================================================

import { Account} from '@app/_models';

export interface ReceiveApparel {
    ReceiveApparelId:   number;
    receivedFrom:       Account[];
    receivedBy:         string;
    releasedBy:         string;
    apparelName:        string;
    apparelLevel:       string;
    apparelType:        string;
    apparelFor:         string;
    apparelSize:        string;
    apparelQuantity:    string;
}

export default ReceiveApparel;

================================================================================
File: src\app\_models\role.ts
Size: 199 B
================================================================================

export enum Role {
    SuperAdmin =        'superAdmin',
    Admin =             'admin',
    User =              'user',
    StockroomAdmin =    'stockroomAdmin',
    Teacher =           'teacher'
}

================================================================================
File: src\app\_models\room.ts
Size: 243 B
================================================================================

import { Account} from '@app/_models';

export interface Room {
    roomId:         number;
    roomName:       string;
    roomFloor:      string;
    roomType:       string;
    stockroomType:  string;
    roomInCharge:   Account;
}

================================================================================
File: src\app\_models\stock-request.model.ts
Size: 1.43 kB
================================================================================

export interface InventoryModel {
  id?:                      number;
  apparelInventoryId?:      number;
  adminSupplyInventoryId?:  number;
  genItemInventoryId?:      number;
  apparelName?:             string;
  supplyName?:              string;
  genItemName?:             string;
  roomId?:                  number;
  totalQuantity?:           number;
  supplyQuantity?:          number;
  quantity?:                number;
  [key: string]: any;
}

export interface UnitModel {
  id?:                      number;
  apparelInventoryId?:      number;
  adminSupplyInventoryId?:  number;
  genItemInventoryId?:      number;
  status?:                  string;
  roomId?:                  number;
  [key: string]: any;
}

export interface RequestedItem {
  kind:   'inventory' | 'unit' | 'unknown' | null;
  type?:  'apparel' | 'supply' | 'genitem' | string | null;
  inventory?: InventoryModel | null;
  unit?:      UnitModel | null;
}

export interface StockRequest {
  stockRequestId?:  number;
  id?:              number;
  acccountId?:      number;
  requesterRoomId?: number | string;
  itemId?:          number | null;
  itemType?:        string | null;
  quantity?:        number;
  note?:            string;
  status?:          string;
  createdAt?:       string | Date;
  updatedAt?:       string | Date;
  requestedItem?:   RequestedItem | null;
  [key: string]: any;
}


================================================================================
File: src\app\_models\transfer.model.ts
Size: 511 B
================================================================================

export interface TransferItem {
    itemType?:  'apparel' | 'supply' | 'genItem' | string;
    itemId?:    number | null;
    quantity?:  number;
    note?:      string | null;
    [key: string]: any;
  }
  
  export interface Transfer {
    transferId?:  number;
    fromRoomId?:  number;
    toRoomId?:    number;
    createdBy?:   number;
    createdAt?:   string;
    status?:      string; 
    items?:       TransferItem[];
    note?:        string | null;
    [key: string]: any;
  }
  

================================================================================
File: src\app\_services\account.service.ts
Size: 5.36 kB
================================================================================

ï»¿import { Injectable }                       from '@angular/core';
import { Router }                           from '@angular/router';
import { HttpClient }                       from '@angular/common/http';
import { BehaviorSubject, Observable, of }  from 'rxjs';
import { map, finalize, catchError  }       from 'rxjs/operators';

import { environment }  from '@environments/environment';
import { Account }      from '@app/_models';

const baseUrl = `${environment.apiUrl}/accounts`;

@Injectable({ providedIn: 'root' })
export class AccountService {
    private accountSubject: BehaviorSubject<Account | null>;
    public account: Observable<Account | null>;

    constructor(
        private router: Router,
        private http: HttpClient,
    ) {
        const stored = localStorage.getItem('account');
        const initialAccount = stored ? JSON.parse(stored) : null;
        this.accountSubject = new BehaviorSubject<Account | null>(initialAccount);
        this.account = this.accountSubject.asObservable();

        if (initialAccount) {
            this.startRefreshTokenTimer();
        }
    }

    public get accountValue() {
        return this.accountSubject.value;
    }
    login(email: string, password: string) {
        return this.http.post<any>(`${baseUrl}/authenticate`, { email, password }, { withCredentials: true })
            .pipe(map(account => {
                // persist to localStorage
                localStorage.setItem('account', JSON.stringify(account));
                this.accountSubject.next(account);
                this.startRefreshTokenTimer();
                return account;
            }));
    }
    logout() {
        this.http.post<any>(`${baseUrl}/revoke-token`, {}, { withCredentials: true }).subscribe();
        this.stopRefreshTokenTimer();
        this.accountSubject.next(null);
        localStorage.removeItem('account');
        this.router.navigate(['/account/login']);
    }
    refreshToken() {
        return this.http.post<any>(`${baseUrl}/refresh-token`, {}, { withCredentials: true })
            .pipe(map((account) => {
                localStorage.setItem('account', JSON.stringify(account));
                this.accountSubject.next(account);
                this.startRefreshTokenTimer();
                return account;
            }));
    }
    revokeToken() {
        const refreshToken = localStorage.getItem('refreshToken');
        if (!refreshToken) {
          return of(null);
        }
    
        return this.http.post(`${environment.apiUrl}/accounts/revoke-token`, { token: refreshToken })
          .pipe(
            // If revoke fails (401, 404, ...), swallow the error and return null so caller doesn't loop
            catchError(err => {
              console.warn('revokeToken failed (ignored)', err);
              return of(null);
            })
          );
    }
    register(account: Account) {
        return this.http.post(`${baseUrl}/register`, account);
    }
    verifyEmail(token: string) {
        return this.http.post(`${baseUrl}/verify-email`, { token });
    }
    forgotPassword(email: string) {
        return this.http.post(`${baseUrl}/forgot-password`, { email });
    }
    validateResetToken(token: string) {
        return this.http.post(`${baseUrl}/validate-reset-token`, { token });
    }
    resetPassword(token: string, password: string, confirmPassword: string) {
        return this.http.post(`${baseUrl}/reset-password`, { token, password, confirmPassword });
    }
    getAll() {
        return this.http.get<Account[]>(baseUrl, { withCredentials: true });
    }
    getById(AccountId: number) {
        return this.http.get<Account>(`${baseUrl}/${AccountId}`);
    }
    create(params: any) {
        return this.http.post(`${baseUrl}/create-user`, params, { withCredentials: true });
    }
    update(AccountId: number, params: any) {
        return this.http.put(`${baseUrl}/${AccountId}`, params)
            .pipe(map((account: any) => {
                if (account.AccountId === this.accountValue?.AccountId) {
                    account = { ...this.accountValue, ...account };
                    this.accountSubject.next(account);
                    localStorage.setItem('account', JSON.stringify(account));
                }
                return account;
            }));
    }
    delete(AccountId: number) {
        return this.http.delete(`${baseUrl}/${AccountId}`)
            .pipe(finalize(() => {
                if (AccountId === this.accountValue?.AccountId)
                    this.logout();
            }));
    }

    // helper methods
    private refreshTokenTimeout?: any;
    private startRefreshTokenTimer() {
        const jwtBase64 = this.accountValue!.jwtToken!.split('.')[1];
        const jwtToken = JSON.parse(atob(jwtBase64));

        const expires = new Date(jwtToken.exp * 1000);
        const timeout = expires.getTime() - Date.now() - (60 * 1000);
        this.refreshTokenTimeout = setTimeout(() => this.refreshToken().subscribe(), timeout);
    }
    private stopRefreshTokenTimer() {
        clearTimeout(this.refreshTokenTimeout);
    }

    hasAnyAccount() {
        return this.http.get<{ exists: boolean }>(`${baseUrl}/exists`);
      }
      hasAnyAccountFlag() {
        return this.hasAnyAccount().pipe(
          map(resp => !!(resp && resp.exists))
        );
      }
}


================================================================================
File: src\app\_services\alert.service.ts
Size: 1.53 kB
================================================================================

ï»¿import { Injectable }           from '@angular/core';
import { Observable, Subject }  from 'rxjs';
import { filter }               from 'rxjs/operators';

import { Alert, AlertOptions, AlertType } from '@app/_models';

@Injectable({ providedIn: 'root' })
export class AlertService {
    private subject = new Subject<Alert>();
    private defaultId = 'default-alert';

    onAlert(id = this.defaultId): Observable<Alert> {
        return this.subject.asObservable().pipe(filter(x => x && x.id === id));
    }
    success(message: string, options?: AlertOptions) {
        this.alert(new Alert({ ...options, type: AlertType.Success, message }));
    }
    error(message: any) {
        const readable =
          message?.error?.message ??
          (typeof message === 'string'
            ? message
            : message?.message ??
              JSON.stringify(message?.error ?? message));
      
        this.subject.next({ type: AlertType.Error, message });
    }
    info(message: string, options?: AlertOptions) {
        this.alert(new Alert({ ...options, type: AlertType.Info, message }));
    }
    warn(message: string, options?: AlertOptions) {
        this.alert(new Alert({ ...options, type: AlertType.Warning, message }));
    }
    alert(alert: Alert) {
        alert.id = alert.id || this.defaultId;
        alert.autoClose = (alert.autoClose === undefined ? true : alert.autoClose);
        this.subject.next(alert);
    }
    clear(id = this.defaultId) {
        this.subject.next(new Alert({ id }));
    }
}

================================================================================
File: src\app\_services\index.ts
Size: 249 B
================================================================================

ï»¿export * from './account.service';
export * from './alert.service';
export * from './room.service';
export * from './qr.service';
export * from './stock-request.service';
export * from './item-request.service';
export * from './transfer.service';

================================================================================
File: src\app\_services\item-request.service.ts
Size: 1.95 kB
================================================================================

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { environment } from '@environments/environment';
import { Observable, throwError } from 'rxjs';
import { map } from 'rxjs/operators';
import { ItemRequest } from '@app/_models';

@Injectable({ providedIn: 'root' })
export class ItemRequestService {
  private base = `${environment.apiUrl}/req-item`;

  constructor(private http: HttpClient) {}

  list(params: any = {}): Observable<ItemRequest[]> {
    return this.http.get<any>(this.base, { params }).pipe(map(res => (res?.data || res) as ItemRequest[]));
  }

  get(id: any): Observable<ItemRequest> {
    const n = Number(id);
    if (!Number.isFinite(n) || n <= 0) return throwError(() => new Error('Invalid id'));
    return this.http.get<any>(`${this.base}/${n}`).pipe(map(res => (res?.data || res) as ItemRequest));
  }

  create(payload: any): Observable<any> {
    return this.http.post<any>(this.base, payload);
  }

  accept(id: any): Observable<any> {
    const n = Number(id);
    if (!Number.isFinite(n) || n <= 0) return throwError(() => new Error('Invalid id'));
    return this.http.post<any>(`${this.base}/${n}/accept`, {});
  }

  decline(id: any, reason?: string): Observable<any> {
    const n = Number(id);
    if (!Number.isFinite(n) || n <= 0) return throwError(() => new Error('Invalid id'));
    return this.http.post<any>(`${this.base}/${n}/decline`, { reason });
  }

  release(id: any): Observable<any> {
    const n = Number(id);
    if (!Number.isFinite(n) || n <= 0) return throwError(() => new Error('Invalid id'));
    return this.http.post<any>(`${this.base}/${n}/release`, {});
  }

  fulfill(id: any): Observable<any> {
    const n = Number(id);
    if (!Number.isFinite(n) || n <= 0) return throwError(() => new Error('Invalid id'));
    return this.http.post<any>(`${this.base}/${n}/fulfill`, {});
  }
}


================================================================================
File: src\app\_services\qr.service.ts
Size: 1.54 kB
================================================================================

import { Injectable }                 from '@angular/core';
import { HttpClient, HttpResponse }   from '@angular/common/http';
import { environment }                from '@environments/environment';
import { Observable }                 from 'rxjs';

@Injectable({ providedIn: 'root' })
export class QrService {
  private base = `${environment.apiUrl}/qr`;

  constructor(private http: HttpClient) {}

  releaseUnit(stockroomType: string, apparelId: number, body: { actorId?: number } = {}): Observable<any> {
    return this.http.post<any>(`${this.base}/${stockroomType}/unit/${apparelId}/release`, body);
  }
  verifyQr(payload: any): Observable<any> {
    return this.http.post<any>(`${this.base}/scan`, payload);
  }
  updateUnitStatus(stockroomType: string, unitId: number, body: { status: string }) {
    return this.http.put<any>(`${this.base}/${stockroomType}/unit/${unitId}/status`, body, {
      headers: { 'Content-Type': 'application/json' }
    });
  }
  getUnitQr(stockroomType: string, unitId: number) {
    return this.http.get(`${this.base}/${stockroomType}/unit/${unitId}/qrcode`, { responseType: 'blob' });
  }
  getBatchQr(stockroomType: string, inventoryId: number): Observable<Blob> {
    return this.http.get(`${this.base}/${stockroomType}/${inventoryId}/qrcode`, { responseType: 'blob' });
  }

  downloadAllPdf(stockroomType: string, roomId: number): Observable<Blob> {
    return this.http.get(`${this.base}/${stockroomType}/room/${roomId}/pdf-all`, { responseType: 'blob' });
  }
}


================================================================================
File: src\app\_services\room.service.ts
Size: 7.83 kB
================================================================================

import { Injectable }   from '@angular/core';
import { HttpClient }   from '@angular/common/http';
import { environment }  from '@environments/environment';
import { Observable }   from 'rxjs';

@Injectable({ providedIn: 'root' })
export class RoomService {
  private baseUrl = `${environment.apiUrl}/rooms`;

  constructor(private http: HttpClient) {}

  // Rooms CRUD
  getRooms() { 
    return this.http.get<any[]>(this.baseUrl); 
  }
  getRoomById(roomId: number) { 
    return this.http.get<any>(`${this.baseUrl}/${roomId}`); 
  }
  createRoom(room: any) { 
    return this.http.post(`${this.baseUrl}/create-room`, room); 
  }
  updateRoom(roomId: number, room: any) { 
    return this.http.put(`${this.baseUrl}/${roomId}`, room); 
  }

  // ------------- Receive Any types of item -------------
  receiveItem(roomId: number, payload: any): Observable<any> {
    // determine type from payload (prefer explicit fields)
    if (payload.apparelName) {
      return this.http.post<any>(`${this.baseUrl}/${roomId}/receive/apparel`, payload);
    } else if (payload.supplyName) {
      return this.http.post<any>(`${this.baseUrl}/${roomId}/receive/supply`, payload);
    } else {
      return this.http.post<any>(`${this.baseUrl}/${roomId}/receive/item`, payload);
    }
  }

  // APPAREL
  getApparelInventory(roomId: number)       { return this.http.get<any>(`${this.baseUrl}/${roomId}/apparel-inventory`); }
  getReceivedBatchApparels(roomId: number)  { return this.http.get<any>(`${this.baseUrl}/${roomId}/receive-apparels`); }
  getReleasedBatchApparels(roomId: number)  { return this.http.get<any>(`${this.baseUrl}/${roomId}/release-apparels`); }
  getApparelUnits(roomId: number)           { return this.http.get<any>(`${this.baseUrl}/${roomId}/apparels`); }

  // ADMIN / SUPPLY
  getAdminSupplyInventory(roomId: number)     { return this.http.get<any>(`${this.baseUrl}/${roomId}/supply-inventory`); }
  getReceivedBatchAdminSupply(roomId: number) { return this.http.get<any>(`${this.baseUrl}/${roomId}/receive-supply`); }
  getReleasedBatchAdminSupply(roomId: number) { return this.http.get<any>(`${this.baseUrl}/${roomId}/release-supply`); }
  getAdminSupplyUnits(roomId: number)         { return this.http.get<any>(`${this.baseUrl}/${roomId}/supply`); }

  // GENERAL / ITEMS
  getGenItemInventory(roomId: number)     { return this.http.get<any>(`${this.baseUrl}/${roomId}/items-inventory`); }
  getReceivedBatchGenItem(roomId: number) { return this.http.get<any>(`${this.baseUrl}/${roomId}/receive-items`); }
  getReleasedBatchGenItem(roomId: number) { return this.http.get<any>(`${this.baseUrl}/${roomId}/release-items`); }
  getGenItemUnits(roomId: number)         { return this.http.get<any>(`${this.baseUrl}/${roomId}/items`); }

  // ------------- Room-scoped QR endpoints (return PNG blobs) -------------
  // Apparel
  getApparelBatchQr(roomId: number, inventoryId: number): Observable<Blob> {
    return this.http.get(`${this.baseUrl}/${roomId}/qr/apparel/batch/${inventoryId}`, { responseType: 'blob' });
  }
  getApparelUnitQr(roomId: number, unitId: number): Observable<Blob> {
    return this.http.get(`${this.baseUrl}/${roomId}/qr/apparel/unit/${unitId}`, { responseType: 'blob' });
  }
  // Admin supply
  getAdminSupplyBatchQr(roomId: number, inventoryId: number): Observable<Blob> {
    return this.http.get(`${this.baseUrl}/${roomId}/qr/admin-supply/batch/${inventoryId}`, { responseType: 'blob' });
  }
  getAdminSupplyUnitQr(roomId: number, unitId: number): Observable<Blob> {
    return this.http.get(`${this.baseUrl}/${roomId}/qr/admin-supply/unit/${unitId}`, { responseType: 'blob' });
  }
  // Gen / items
  getGenItemBatchQr(roomId: number, inventoryId: number): Observable<Blob> {
    return this.http.get(`${this.baseUrl}/${roomId}/qr/general-item/batch/${inventoryId}`, { responseType: 'blob' });
  }
  getGenItemUnitQr(roomId: number, unitId: number): Observable<Blob> {
    return this.http.get(`${this.baseUrl}/${roomId}/qr/general-item/unit/${unitId}`, { responseType: 'blob' });
  }

  // Get list of in-charge accounts (used to populate receivedBy/releasedBy fields)
  getInChargeOptions(): Observable<any> {
    return this.http.get<any>(`${environment.apiUrl}/accounts`); // filter client-side if needed
  }

  releaseApparel(roomId: number, payload: any): Observable<any> {
    // make a shallow copy so we don't mutate callers' objects
    const body: any = { ...payload };
  
    // backend (server) expects releaseApparelQuantity â support both shortcut field names
    if (body.releaseQuantity != null && body.releaseApparelQuantity == null) {
      body.releaseApparelQuantity = Number(body.releaseQuantity);
      // delete(body.releaseQuantity); // optional
    }
  
    // ensure numeric fields are numbers (server normalizes but it's good to be explicit)
    if (body.releaseApparelQuantity != null) body.releaseApparelQuantity = Number(body.releaseApparelQuantity);
    if (body.apparelInventoryId != null) body.apparelInventoryId = Number(body.apparelInventoryId);
  
    // NOTE: backend route for apparel release is /rooms/:roomId/release/apparel
    return this.http.post<any>(`${this.baseUrl}/${roomId}/release/apparel`, body);
  }
  releaseAdminSupply(roomId: number, payload: any): Observable<any> {
    // make a shallow copy so we don't mutate callers' objects
    const body: any = { ...payload };
  
    // backend (server) expects releaseApparelQuantity â support both shortcut field names
    if (body.releaseQuantity != null && body.releaseAdminSupplyQuantity == null) {
      body.releaseAdminSupplyQuantity = Number(body.releaseQuantity);
      // delete(body.releaseQuantity); // optional
    }
  
    // ensure numeric fields are numbers (server normalizes but it's good to be explicit)
    if (body.releaseAdminSupplyQuantity != null) body.releaseAdminSupplyQuantity = Number(body.releaseAdminSupplyQuantity);
    if (body.adminSupplyInventoryId != null) body.adminSupplyInventoryId = Number(body.adminSupplyInventoryId);
  
    // NOTE: backend route for apparel release is /rooms/:roomId/release/apparel
    return this.http.post<any>(`${this.baseUrl}/${roomId}/release/supply`, body);
  }
  releaseGenItem(roomId: number, payload: any): Observable<any> {
    // make a shallow copy so we don't mutate callers' objects
    const body: any = { ...payload };
  
    // backend (server) expects releaseApparelQuantity â support both shortcut field names
    if (body.releaseQuantity != null && body.releaseItemQuantity == null) {
      body.releaseItemQuantity = Number(body.releaseQuantity);
      // delete(body.releaseQuantity); // optional
    }
  
    // ensure numeric fields are numbers (server normalizes but it's good to be explicit)
    if (body.releaseItemQuantity != null) body.releaseItemQuantity = Number(body.releaseItemQuantity);
    if (body.genItemInventoryId != null) body.genItemInventoryId = Number(body.genItemInventoryId);
  
    // NOTE: backend route for apparel release is /rooms/:roomId/release/apparel
    return this.http.post<any>(`${this.baseUrl}/${roomId}/release/item`, body);
  }

  updateApparelStatus(roomId: number, apparelId: number, newStatus: string) {
    return this.http.put(`${this.baseUrl}/${roomId}/apparels/${apparelId}/status`, { status: newStatus });
  }
  
  updateAdminSupplyStatus(roomId: number, supplyId: number, newStatus: string) {
    return this.http.put(`${this.baseUrl}/${roomId}/admin-supplies/${supplyId}/status`, { status: newStatus });
  }
  
  updateGenItemStatus(roomId: number, genItemId: number, newStatus: string) {
    return this.http.put(`${this.baseUrl}/${roomId}/gen-items/${genItemId}/status`, { status: newStatus });
  }
}


================================================================================
File: src\app\_services\stock-request.service.ts
Size: 1.88 kB
================================================================================

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { environment } from '@environments/environment';
import { Observable, throwError } from 'rxjs';
import { map } from 'rxjs/operators';
import { StockRequest } from '@app/_models/stock-request.model';

@Injectable({ providedIn: 'root' })
export class StockRequestService {
  private base = `${environment.apiUrl}/req-stock`;

  constructor(private http: HttpClient) {}

  list(params: any = {}): Observable<StockRequest[]> {
    return this.http.get<any>(this.base, { params }).pipe(
      map(res => (res?.data || res) as StockRequest[])
    );
  }

  get(id: any): Observable<StockRequest> {
    const numeric = Number(id);
    if (!Number.isFinite(numeric) || numeric <= 0) return throwError(() => new Error('Invalid id'));
    return this.http.get<any>(`${this.base}/${numeric}`).pipe(
      map(res => (res?.data || res) as StockRequest)
    );
  }

  create(payload: any): Observable<any> {
    return this.http.post<any>(`${this.base}`, payload);
  }

  approve(id: any): Observable<any> {
    const numeric = Number(id);
    if (!Number.isFinite(numeric) || numeric <= 0) return throwError(() => new Error('Invalid id'));
    return this.http.post<any>(`${this.base}/${numeric}/approve`, {});
  }

  disapprove(id: any, reason?: string): Observable<any> {
    const numeric = Number(id);
    if (!Number.isFinite(numeric) || numeric <= 0) return throwError(() => new Error('Invalid id'));
    return this.http.post<any>(`${this.base}/${numeric}/disapprove`, { reason });
  }

  fulfill(id: any): Observable<any> {
    const numeric = Number(id);
    if (!Number.isFinite(numeric) || numeric <= 0) return throwError(() => new Error('Invalid id'));
    return this.http.post<any>(`${this.base}/${numeric}/fulfill`, {});
  }
}

================================================================================
File: src\app\_services\transfer.service.ts
Size: 1.73 kB
================================================================================

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { environment } from '@environments/environment';
import { Observable, throwError } from 'rxjs';
import { map } from 'rxjs/operators';
import { Transfer } from '@app/_models/transfer.model';

@Injectable({ providedIn: 'root' })
export class TransferService {
  private base = `${environment.apiUrl}/transfers`;

  constructor(private http: HttpClient) {}

  list(params: any = {}): Observable<Transfer[]> {
    return this.http.get<any>(this.base, { params }).pipe(
      map(res => (res?.data || res) as Transfer[])
    );
  }

  get(id: any): Observable<Transfer> {
    const n = Number(id);
    if (!Number.isFinite(n) || n <= 0) return throwError(() => new Error('Invalid id'));
    return this.http.get<any>(`${this.base}/${n}`).pipe(map(res => (res?.data || res) as Transfer));
  }

  create(payload: Partial<Transfer>): Observable<any> {
    return this.http.post<any>(this.base, payload);
  }

  accept(id: any): Observable<any> {
    const n = Number(id);
    if (!Number.isFinite(n) || n <= 0) return throwError(() => new Error('Invalid id'));
    return this.http.post<any>(`${this.base}/${n}/accept`, {});
  }

  return(id: any): Observable<any> {
    const n = Number(id);
    if (!Number.isFinite(n) || n <= 0) return throwError(() => new Error('Invalid id'));
    return this.http.post<any>(`${this.base}/${n}/return`, {});
  }

  acceptReturn(id: any): Observable<any> {
    const n = Number(id);
    if (!Number.isFinite(n) || n <= 0) return throwError(() => new Error('Invalid id'));
    return this.http.post<any>(`${this.base}/${n}/accept-return`, {});
  }
}


================================================================================
File: src\environments\environment.prod.ts
Size: 84 B
================================================================================

export const environment = {
    production: true,
    apiUrl: 'https://IMP.com'
};


================================================================================
File: src\environments\environment.ts
Size: 701 B
================================================================================

// This file can be replaced during build by using the `fileReplacements` array.
// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.

export const environment = {
    production: false,
    apiUrl: 'http://localhost:5000'
};

/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/dist/zone-error';  // Included with Angular CLI.


================================================================================
File: src\index.html
Size: 486 B
================================================================================

<!DOCTYPE html>
<html>
<head>
    <base href="/" />
    <title>Angular 18 Auth Boilerplate - Sign Up with Verification, Login and Forgot Password</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- bootstrap css -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <app-root></app-root>

    <!-- credits -->
    <div class="text-center mt-4">
    </div>
</body>
</html>

================================================================================
File: src\main.ts
Size: 376 B
================================================================================

import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
    enableProdMode();
}

platformBrowserDynamic().bootstrapModule(AppModule)
    .catch(err => console.error(err));


================================================================================
File: src\polyfills.ts
Size: 2.34 kB
================================================================================

/**
 * This file includes polyfills needed by Angular and is loaded before the app.
 * You can add your own extra polyfills to this file.
 *
 * This file is divided into 2 sections:
 *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.
 *   2. Application imports. Files imported after ZoneJS that should be loaded before your main
 *      file.
 *
 * The current setup is for so-called "evergreen" browsers; the last versions of browsers that
 * automatically update themselves. This includes recent versions of Safari, Chrome (including
 * Opera), Edge on the desktop, and iOS and Chrome on mobile.
 *
 * Learn more in https://angular.io/guide/browser-support
 */

/***************************************************************************************************
 * BROWSER POLYFILLS
 */

/**
 * By default, zone.js will patch all possible macroTask and DomEvents
 * user can disable parts of macroTask/DomEvents patch by setting following flags
 * because those flags need to be set before `zone.js` being loaded, and webpack
 * will put import in the top of bundle, so user need to create a separate file
 * in this directory (for example: zone-flags.ts), and put the following flags
 * into that file, and then add the following code before importing zone.js.
 * import './zone-flags';
 *
 * The flags allowed in zone-flags.ts are listed here.
 *
 * The following flags will work for all browsers.
 *
 * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame
 * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick
 * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames
 *
 *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js
 *  with the following flag, it will bypass `zone.js` patch for IE/Edge
 *
 *  (window as any).__Zone_enable_cross_context_check = true;
 *
 */

/***************************************************************************************************
 * Zone JS is required by default for Angular itself.
 */
import 'zone.js';  // Included with Angular CLI.


/***************************************************************************************************
 * APPLICATION IMPORTS
 */


================================================================================
File: src\styles.less
Size: 341 B
================================================================================

/* You can add global styles to this file, and also import other style files */
.app-container {
    min-height: 320px;
}

.admin-nav {
    padding-top: 0;
    padding-bottom: 0;
    background-color: #e8e9ea;
    border-bottom: 1px solid #ccc;
}

.btn-delete-account {
    width: 40px;
    text-align: center;
    box-sizing: content-box;
}

================================================================================
File: src\test.ts
Size: 749 B
================================================================================

// This file is required by karma.conf.js and loads recursively all the .spec and framework files

import 'zone.js/testing';
import { getTestBed } from '@angular/core/testing';
import {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting
} from '@angular/platform-browser-dynamic/testing';

declare const require: {
  context(path: string, deep?: boolean, filter?: RegExp): {
    <T>(id: string): T;
    keys(): string[];
  };
};

// First, initialize the Angular testing environment.
getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting(),
);

// Then we find all the tests.
const context = require.context('./', true, /\.spec\.ts$/);
// And load the modules.
context.keys().forEach(context);


================================================================================
File: tsconfig.app.json
Size: 320 B
================================================================================

/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
    "extends": "./tsconfig.json",
    "compilerOptions": {
        "outDir": "./out-tsc/app",
        "types": []
    },
    "files": [
        "src/main.ts",
        "src/polyfills.ts"
    ],
    "include": [
        "src/**/*.d.ts"
    ]
}

================================================================================
File: tsconfig.json
Size: 1.14 kB
================================================================================

/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
    "compileOnSave": false,
    "compilerOptions": {
        "baseUrl": "./",
        "outDir": "./dist/out-tsc",
        "allowSyntheticDefaultImports": true,
        "forceConsistentCasingInFileNames": true,
        "strict": true,
        "noImplicitOverride": true,
        "noPropertyAccessFromIndexSignature": false,
        "noImplicitReturns": true,
        "noFallthroughCasesInSwitch": true,
        "sourceMap": true,
        "declaration": false,
        "downlevelIteration": true,
        "experimentalDecorators": true,
        "moduleResolution": "node",
        "importHelpers": true,
        "target": "es2020",
        "module": "es2020",
        "lib": [
            "es2020",
            "dom"
        ],
        "paths": {
            "@app/*": ["src/app/*"],
            "@environments/*": ["src/environments/*"]
        }
    },
    "angularCompilerOptions": {
        "enableI18nLegacyMessageIdFormat": false,
        "strictInjectionParameters": true,
        "strictInputAccessModifiers": true,
        "strictTemplates": true
    }
}

================================================================================
File: tsconfig.spec.json
Size: 380 B
================================================================================

/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
    "extends": "./tsconfig.json",
    "compilerOptions": {
        "outDir": "./out-tsc/spec",
        "types": [
            "jasmine"
        ]
    },
    "files": [
        "src/test.ts",
        "src/polyfills.ts"
    ],
    "include": [
        "src/**/*.spec.ts",
        "src/**/*.d.ts"
    ]
}
